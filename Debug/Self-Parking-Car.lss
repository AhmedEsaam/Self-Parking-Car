
Self-Parking-Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  000036ca  0000375e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080016e  0080016e  0000386c  2**0
                  ALLOC
  3 .stab         000031b0  00000000  00000000  0000386c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001726  00000000  00000000  00006a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008142  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00008302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00008516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000ab28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000bff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d304  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000d7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e205  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_1>
       8:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_2>
       c:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_10>
      2c:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 97 12 	jmp	0x252e	; 0x252e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 16 	call	0x2c88	; 0x2c88 <main>
      8a:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e6       	ldi	r22, 0x65	; 101
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 35 1b 	jmp	0x366a	; 0x366a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e3 59       	subi	r30, 0x93	; 147
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Timer1_voidInit>:
u8 CPU_Clock;



void Timer1_voidInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TCCR1A, TCCR1A_WGM10);
     ef2:	af e4       	ldi	r26, 0x4F	; 79
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ef e4       	ldi	r30, 0x4F	; 79
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8e 7f       	andi	r24, 0xFE	; 254
     efe:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_WGM11);
     f00:	af e4       	ldi	r26, 0x4F	; 79
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ef e4       	ldi	r30, 0x4F	; 79
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8d 7f       	andi	r24, 0xFD	; 253
     f0c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM12);
     f0e:	ae e4       	ldi	r26, 0x4E	; 78
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ee e4       	ldi	r30, 0x4E	; 78
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	87 7f       	andi	r24, 0xF7	; 247
     f1a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM13);
     f1c:	ae e4       	ldi	r26, 0x4E	; 78
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ee e4       	ldi	r30, 0x4E	; 78
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 7e       	andi	r24, 0xEF	; 239
     f28:	8c 93       	st	X, r24

	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     f2a:	af e4       	ldi	r26, 0x4F	; 79
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ef e4       	ldi	r30, 0x4F	; 79
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7b       	andi	r24, 0xBF	; 191
     f36:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
     f38:	af e4       	ldi	r26, 0x4F	; 79
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ef e4       	ldi	r30, 0x4F	; 79
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B, TCCR1B_CS10);
     f46:	ae e4       	ldi	r26, 0x4E	; 78
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ee e4       	ldi	r30, 0x4E	; 78
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8e 7f       	andi	r24, 0xFE	; 254
     f52:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS11);
     f54:	ae e4       	ldi	r26, 0x4E	; 78
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ee e4       	ldi	r30, 0x4E	; 78
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 60       	ori	r24, 0x02	; 2
     f60:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_CS12);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8b 7f       	andi	r24, 0xFB	; 251
     f6e:	8c 93       	st	X, r24


}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <timer1_Voidseticrvalue>:


void timer1_Voidseticrvalue(u16 Copy_u16ICRValue)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <timer1_Voidseticrvalue+0x6>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
	ICR1= Copy_u16ICRValue;
     f84:	e6 e4       	ldi	r30, 0x46	; 70
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <timer1_Voidsetocrvalue>:

void timer1_Voidsetocrvalue(u16 Copy_u16OCRValue)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <timer1_Voidsetocrvalue+0x6>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A= Copy_u16OCRValue;
     fa8:	ea e4       	ldi	r30, 0x4A	; 74
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24

}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <Timer0_voidInit>:


void Timer0_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OCRMode)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <Timer0_voidInit+0x6>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <Timer0_voidInit+0x8>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	6a 83       	std	Y+2, r22	; 0x02
     fd0:	4b 83       	std	Y+3, r20	; 0x03
	/*Set Timer0 Mode*/
	switch (Copy_u8Mode)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	3d 83       	std	Y+5, r19	; 0x05
     fda:	2c 83       	std	Y+4, r18	; 0x04
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	9d 81       	ldd	r25, Y+5	; 0x05
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <Timer0_voidInit+0x2a>
     fe6:	4a c0       	rjmp	.+148    	; 0x107c <Timer0_voidInit+0xbe>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	2c f4       	brge	.+10     	; 0xffc <Timer0_voidInit+0x3e>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	61 f0       	breq	.+24     	; 0x1012 <Timer0_voidInit+0x54>
     ffa:	66 c0       	rjmp	.+204    	; 0x10c8 <Timer0_voidInit+0x10a>
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	49 f1       	breq	.+82     	; 0x1058 <Timer0_voidInit+0x9a>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	91 f0       	breq	.+36     	; 0x1034 <Timer0_voidInit+0x76>
    1010:	5b c0       	rjmp	.+182    	; 0x10c8 <Timer0_voidInit+0x10a>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0, TCCR0_WGM00);
    1012:	a3 e5       	ldi	r26, 0x53	; 83
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e3 e5       	ldi	r30, 0x53	; 83
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8f 7b       	andi	r24, 0xBF	; 191
    101e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, TCCR0_WGM01);
    1020:	a3 e5       	ldi	r26, 0x53	; 83
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e5       	ldi	r30, 0x53	; 83
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	87 7f       	andi	r24, 0xF7	; 247
    102c:	8c 93       	st	X, r24
		Timer0_Mode = TIMER0_NORMAL_MODE;
    102e:	10 92 7e 01 	sts	0x017E, r1
    1032:	4a c0       	rjmp	.+148    	; 0x10c8 <Timer0_voidInit+0x10a>
		break;
	case TIMER0_PHASE_CORRECT_MODE:
		SET_BIT(TCCR0, TCCR0_WGM00);
    1034:	a3 e5       	ldi	r26, 0x53	; 83
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e3 e5       	ldi	r30, 0x53	; 83
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, TCCR0_WGM01);
    1042:	a3 e5       	ldi	r26, 0x53	; 83
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e3 e5       	ldi	r30, 0x53	; 83
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	87 7f       	andi	r24, 0xF7	; 247
    104e:	8c 93       	st	X, r24
		Timer0_Mode = TIMER0_PHASE_CORRECT_MODE;
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	80 93 7e 01 	sts	0x017E, r24
    1056:	38 c0       	rjmp	.+112    	; 0x10c8 <Timer0_voidInit+0x10a>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0, TCCR0_WGM00);
    1058:	a3 e5       	ldi	r26, 0x53	; 83
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e3 e5       	ldi	r30, 0x53	; 83
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7b       	andi	r24, 0xBF	; 191
    1064:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_WGM01);
    1066:	a3 e5       	ldi	r26, 0x53	; 83
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e3 e5       	ldi	r30, 0x53	; 83
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	8c 93       	st	X, r24
		Timer0_Mode = TIMER0_CTC_MODE;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	80 93 7e 01 	sts	0x017E, r24
    107a:	26 c0       	rjmp	.+76     	; 0x10c8 <Timer0_voidInit+0x10a>
		break;
	case TIMER0_FAST_MODE:
		SET_BIT(TCCR0, TCCR0_WGM00);
    107c:	a3 e5       	ldi	r26, 0x53	; 83
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e3 e5       	ldi	r30, 0x53	; 83
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_WGM01);
    108a:	a3 e5       	ldi	r26, 0x53	; 83
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e3 e5       	ldi	r30, 0x53	; 83
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	88 60       	ori	r24, 0x08	; 8
    1096:	8c 93       	st	X, r24
		Timer0_Mode = TIMER0_FAST_MODE;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 7e 01 	sts	0x017E, r24

		CLR_BIT(TCCR0,TCCR0_CS00);
    109e:	a3 e5       	ldi	r26, 0x53	; 83
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e3 e5       	ldi	r30, 0x53	; 83
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8e 7f       	andi	r24, 0xFE	; 254
    10aa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    10ac:	a3 e5       	ldi	r26, 0x53	; 83
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e3 e5       	ldi	r30, 0x53	; 83
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	82 60       	ori	r24, 0x02	; 2
    10b8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    10ba:	a3 e5       	ldi	r26, 0x53	; 83
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e3 e5       	ldi	r30, 0x53	; 83
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8b 7f       	andi	r24, 0xFB	; 251
    10c6:	8c 93       	st	X, r24
		break;
	}


	/*Set Timer0 Prescaler*/
	TCCR0 &= CLOCK_SELECT_MASK;
    10c8:	a3 e5       	ldi	r26, 0x53	; 83
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e3 e5       	ldi	r30, 0x53	; 83
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	88 7f       	andi	r24, 0xF8	; 248
    10d4:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Scaler;
    10d6:	a3 e5       	ldi	r26, 0x53	; 83
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e3 e5       	ldi	r30, 0x53	; 83
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	90 81       	ld	r25, Z
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	89 2b       	or	r24, r25
    10e4:	8c 93       	st	X, r24
	Timer0_Scaler = Copy_u8Scaler;
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	80 93 7d 01 	sts	0x017D, r24

	/*Set OCR Mode*/
	TCCR0 &= OC0_CLEAR_MASK;
    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 7c       	andi	r24, 0xCF	; 207
    10f8:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8OCRMode;
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	90 81       	ld	r25, Z
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	89 2b       	or	r24, r25
    1108:	8c 93       	st	X, r24


	//CPU_Clock = CPU_CLOCK;


}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <Timer0_voidSetPreloadValue>:

void Timer0_voidSetPreloadValue(u8 Copy_u8Value)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    1126:	e2 e5       	ldi	r30, 0x52	; 82
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	80 83       	st	Z, r24
}
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <Timer0_voidSetCompareMatchValue>:

void Timer0_voidSetCompareMatchValue(u8 Copy_u8Value)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    1142:	ec e5       	ldi	r30, 0x5C	; 92
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	80 83       	st	Z, r24
}
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <Timer0_voidTOVSetCallBack>:


void Timer0_voidTOVSetCallBack(void (*Notification)(void))
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	00 d0       	rcall	.+0      	; 0x1158 <Timer0_voidTOVSetCallBack+0x6>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
	pvoid_TOV_NotificationFunc = Notification;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	90 93 6f 01 	sts	0x016F, r25
    1168:	80 93 6e 01 	sts	0x016E, r24
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <Timer0_voidOCMSetCallBack>:

void Timer0_voidOCMSetCallBack(void (*Notification)(void))
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <Timer0_voidOCMSetCallBack+0x6>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
	pvoid_OCR_NotificationFunc = Notification;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	90 93 71 01 	sts	0x0171, r25
    118c:	80 93 70 01 	sts	0x0170, r24
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <Timer0_voidEnableInterrupt>:

void Timer0_voidEnableInterrupt(u8 Copy_u8Mode)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <Timer0_voidEnableInterrupt+0x6>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Mode)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3b 83       	std	Y+3, r19	; 0x03
    11b0:	2a 83       	std	Y+2, r18	; 0x02
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	9b 81       	ldd	r25, Y+3	; 0x03
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	51 f0       	breq	.+20     	; 0x11ce <Timer0_voidEnableInterrupt+0x34>
    11ba:	2a 81       	ldd	r18, Y+2	; 0x02
    11bc:	3b 81       	ldd	r19, Y+3	; 0x03
    11be:	33 23       	and	r19, r19
    11c0:	ac f0       	brlt	.+42     	; 0x11ec <Timer0_voidEnableInterrupt+0x52>
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	9b 81       	ldd	r25, Y+3	; 0x03
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	91 05       	cpc	r25, r1
    11ca:	84 f4       	brge	.+32     	; 0x11ec <Timer0_voidEnableInterrupt+0x52>
    11cc:	08 c0       	rjmp	.+16     	; 0x11de <Timer0_voidEnableInterrupt+0x44>
	{
	case TIMER0_NORMAL_MODE:
		SET_BIT(TIMSK, TIMSK_TOIE0);
    11ce:	a9 e5       	ldi	r26, 0x59	; 89
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e9 e5       	ldi	r30, 0x59	; 89
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	81 60       	ori	r24, 0x01	; 1
    11da:	8c 93       	st	X, r24
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <Timer0_voidEnableInterrupt+0x52>
		break;
	case TIMER0_FAST_MODE:
	case TIMER0_CTC_MODE:
	case TIMER0_PHASE_CORRECT_MODE:
		SET_BIT(TIMSK, TIMSK_OCIE0);
    11de:	a9 e5       	ldi	r26, 0x59	; 89
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e9 e5       	ldi	r30, 0x59	; 89
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <Timer0_voidDisableInterrupt>:

void Timer0_voidDisableInterrupt(u8 Copy_u8Mode)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <Timer0_voidDisableInterrupt+0x6>
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Mode)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	3b 83       	std	Y+3, r19	; 0x03
    120e:	2a 83       	std	Y+2, r18	; 0x02
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	51 f0       	breq	.+20     	; 0x122c <Timer0_voidDisableInterrupt+0x34>
    1218:	2a 81       	ldd	r18, Y+2	; 0x02
    121a:	3b 81       	ldd	r19, Y+3	; 0x03
    121c:	33 23       	and	r19, r19
    121e:	ac f0       	brlt	.+42     	; 0x124a <Timer0_voidDisableInterrupt+0x52>
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	9b 81       	ldd	r25, Y+3	; 0x03
    1224:	84 30       	cpi	r24, 0x04	; 4
    1226:	91 05       	cpc	r25, r1
    1228:	84 f4       	brge	.+32     	; 0x124a <Timer0_voidDisableInterrupt+0x52>
    122a:	08 c0       	rjmp	.+16     	; 0x123c <Timer0_voidDisableInterrupt+0x44>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TIMSK, TIMSK_TOIE0);
    122c:	a9 e5       	ldi	r26, 0x59	; 89
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e9 e5       	ldi	r30, 0x59	; 89
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8e 7f       	andi	r24, 0xFE	; 254
    1238:	8c 93       	st	X, r24
    123a:	07 c0       	rjmp	.+14     	; 0x124a <Timer0_voidDisableInterrupt+0x52>
		break;
	case TIMER0_FAST_MODE:
	case TIMER0_CTC_MODE:
	case TIMER0_PHASE_CORRECT_MODE:
		CLR_BIT(TIMSK, TIMSK_OCIE0);
    123c:	a9 e5       	ldi	r26, 0x59	; 89
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e9 e5       	ldi	r30, 0x59	; 89
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <Timer0_voidDelaySec>:

void Timer0_voidDelaySec(u16 Copy_u16Second)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <Timer0_voidDelaySec+0x6>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01

}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <Timer0_voidDelayms>:

void Timer0_voidDelayms(u16 Copy_u16MilliSec)
{
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	60 97       	sbiw	r28, 0x10	; 16
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	9f 87       	std	Y+15, r25	; 0x0f
    128c:	8e 87       	std	Y+14, r24	; 0x0e


	f32 Local_f32OVCounts = ((f32)Copy_u16MilliSec * 1000.0)/ 256.0;
    128e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1290:	9f 85       	ldd	r25, Y+15	; 0x0f
    1292:	cc 01       	movw	r24, r24
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a e7       	ldi	r20, 0x7A	; 122
    12ae:	54 e4       	ldi	r21, 0x44	; 68
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	53 e4       	ldi	r21, 0x43	; 67
    12c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	8a 87       	std	Y+10, r24	; 0x0a
    12ce:	9b 87       	std	Y+11, r25	; 0x0b
    12d0:	ac 87       	std	Y+12, r26	; 0x0c
    12d2:	bd 87       	std	Y+13, r27	; 0x0d
	u32 Local_u32Counts = (u32)Local_f32OVCounts;
    12d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    12d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    12d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12da:	9d 85       	ldd	r25, Y+13	; 0x0d
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	8e 83       	std	Y+6, r24	; 0x06
    12e6:	9f 83       	std	Y+7, r25	; 0x07
    12e8:	a8 87       	std	Y+8, r26	; 0x08
    12ea:	b9 87       	std	Y+9, r27	; 0x09
	u32 Local_u32Remender = Local_f32OVCounts - (u32)Local_f32OVCounts;
    12ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    12ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    12f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	6a 85       	ldd	r22, Y+10	; 0x0a
    130a:	7b 85       	ldd	r23, Y+11	; 0x0b
    130c:	8c 85       	ldd	r24, Y+12	; 0x0c
    130e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1310:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	9b 83       	std	Y+3, r25	; 0x03
    1328:	ac 83       	std	Y+4, r26	; 0x04
    132a:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8PreloadValue = 0;
    132c:	19 82       	std	Y+1, r1	; 0x01

	if(Local_u32Remender != 0)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	ac 81       	ldd	r26, Y+4	; 0x04
    1334:	bd 81       	ldd	r27, Y+5	; 0x05
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	a1 05       	cpc	r26, r1
    133a:	b1 05       	cpc	r27, r1
    133c:	01 f1       	breq	.+64     	; 0x137e <Timer0_voidDelayms+0x110>
	{
		Local_u8PreloadValue = 256 * (1 - Local_u32Remender);
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	ac 81       	ldd	r26, Y+4	; 0x04
    134c:	bd 81       	ldd	r27, Y+5	; 0x05
    134e:	79 01       	movw	r14, r18
    1350:	8a 01       	movw	r16, r20
    1352:	e8 1a       	sub	r14, r24
    1354:	f9 0a       	sbc	r15, r25
    1356:	0a 0b       	sbc	r16, r26
    1358:	1b 0b       	sbc	r17, r27
    135a:	d8 01       	movw	r26, r16
    135c:	c7 01       	movw	r24, r14
    135e:	ba 2f       	mov	r27, r26
    1360:	a9 2f       	mov	r26, r25
    1362:	98 2f       	mov	r25, r24
    1364:	88 27       	eor	r24, r24
    1366:	89 83       	std	Y+1, r24	; 0x01
		Local_u32Counts += 1;
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	a8 85       	ldd	r26, Y+8	; 0x08
    136e:	b9 85       	ldd	r27, Y+9	; 0x09
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	a1 1d       	adc	r26, r1
    1374:	b1 1d       	adc	r27, r1
    1376:	8e 83       	std	Y+6, r24	; 0x06
    1378:	9f 83       	std	Y+7, r25	; 0x07
    137a:	a8 87       	std	Y+8, r26	; 0x08
    137c:	b9 87       	std	Y+9, r27	; 0x09
	}


	Timer0_voidSetPreloadValue(Local_u8PreloadValue);
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	0e 94 8d 08 	call	0x111a	; 0x111a <Timer0_voidSetPreloadValue>
    1384:	10 c0       	rjmp	.+32     	; 0x13a6 <Timer0_voidDelayms+0x138>

	while(Local_u32Counts--)
	{
		while(GET_BIT(TIFR, TIFR_TOV0) == 0);
    1386:	e8 e5       	ldi	r30, 0x58	; 88
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	81 70       	andi	r24, 0x01	; 1
    1392:	90 70       	andi	r25, 0x00	; 0
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	b9 f3       	breq	.-18     	; 0x1386 <Timer0_voidDelayms+0x118>
		SET_BIT(TIFR, TIFR_TOV0);
    1398:	a8 e5       	ldi	r26, 0x58	; 88
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e5       	ldi	r30, 0x58	; 88
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	8c 93       	st	X, r24
	}


	Timer0_voidSetPreloadValue(Local_u8PreloadValue);

	while(Local_u32Counts--)
    13a6:	18 8a       	std	Y+16, r1	; 0x10
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	a8 85       	ldd	r26, Y+8	; 0x08
    13ae:	b9 85       	ldd	r27, Y+9	; 0x09
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	a1 05       	cpc	r26, r1
    13b4:	b1 05       	cpc	r27, r1
    13b6:	11 f0       	breq	.+4      	; 0x13bc <Timer0_voidDelayms+0x14e>
    13b8:	01 e0       	ldi	r16, 0x01	; 1
    13ba:	08 8b       	std	Y+16, r16	; 0x10
    13bc:	8e 81       	ldd	r24, Y+6	; 0x06
    13be:	9f 81       	ldd	r25, Y+7	; 0x07
    13c0:	a8 85       	ldd	r26, Y+8	; 0x08
    13c2:	b9 85       	ldd	r27, Y+9	; 0x09
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	a1 09       	sbc	r26, r1
    13c8:	b1 09       	sbc	r27, r1
    13ca:	8e 83       	std	Y+6, r24	; 0x06
    13cc:	9f 83       	std	Y+7, r25	; 0x07
    13ce:	a8 87       	std	Y+8, r26	; 0x08
    13d0:	b9 87       	std	Y+9, r27	; 0x09
    13d2:	18 89       	ldd	r17, Y+16	; 0x10
    13d4:	11 23       	and	r17, r17
    13d6:	b9 f6       	brne	.-82     	; 0x1386 <Timer0_voidDelayms+0x118>
	{
		while(GET_BIT(TIFR, TIFR_TOV0) == 0);
		SET_BIT(TIFR, TIFR_TOV0);
	}
}
    13d8:	60 96       	adiw	r28, 0x10	; 16
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	08 95       	ret

000013f2 <Timer0_voidDelay_us>:

void Timer0_voidDelay_us(u32 Copy_u16MicroSec)
{
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	60 97       	sbiw	r28, 0x10	; 16
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	6c 87       	std	Y+12, r22	; 0x0c
    1410:	7d 87       	std	Y+13, r23	; 0x0d
    1412:	8e 87       	std	Y+14, r24	; 0x0e
    1414:	9f 87       	std	Y+15, r25	; 0x0f
	f32 Local_f32OVCounts = (f32)Copy_u16MicroSec/ 256.0;
    1416:	6c 85       	ldd	r22, Y+12	; 0x0c
    1418:	7d 85       	ldd	r23, Y+13	; 0x0d
    141a:	8e 85       	ldd	r24, Y+14	; 0x0e
    141c:	9f 85       	ldd	r25, Y+15	; 0x0f
    141e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	53 e4       	ldi	r21, 0x43	; 67
    1432:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	88 87       	std	Y+8, r24	; 0x08
    143c:	99 87       	std	Y+9, r25	; 0x09
    143e:	aa 87       	std	Y+10, r26	; 0x0a
    1440:	bb 87       	std	Y+11, r27	; 0x0b
	u16 Local_u16Counts = (u8) Local_f32OVCounts;
    1442:	68 85       	ldd	r22, Y+8	; 0x08
    1444:	79 85       	ldd	r23, Y+9	; 0x09
    1446:	8a 85       	ldd	r24, Y+10	; 0x0a
    1448:	9b 85       	ldd	r25, Y+11	; 0x0b
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9f 83       	std	Y+7, r25	; 0x07
    1458:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32Remender = Local_f32OVCounts - (s32)Local_f32OVCounts;
    145a:	68 85       	ldd	r22, Y+8	; 0x08
    145c:	79 85       	ldd	r23, Y+9	; 0x09
    145e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1460:	9b 85       	ldd	r25, Y+11	; 0x0b
    1462:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	bc 01       	movw	r22, r24
    146c:	cd 01       	movw	r24, r26
    146e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	68 85       	ldd	r22, Y+8	; 0x08
    1478:	79 85       	ldd	r23, Y+9	; 0x09
    147a:	8a 85       	ldd	r24, Y+10	; 0x0a
    147c:	9b 85       	ldd	r25, Y+11	; 0x0b
    147e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	8a 83       	std	Y+2, r24	; 0x02
    1494:	9b 83       	std	Y+3, r25	; 0x03
    1496:	ac 83       	std	Y+4, r26	; 0x04
    1498:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8PreloadValue = 0;
    149a:	19 82       	std	Y+1, r1	; 0x01

	if(Local_u32Remender != 0)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	ac 81       	ldd	r26, Y+4	; 0x04
    14a2:	bd 81       	ldd	r27, Y+5	; 0x05
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	a1 05       	cpc	r26, r1
    14a8:	b1 05       	cpc	r27, r1
    14aa:	d1 f0       	breq	.+52     	; 0x14e0 <Timer0_voidDelay_us+0xee>
	{
		Local_u8PreloadValue = 256 * (1 - Local_u32Remender);
    14ac:	21 e0       	ldi	r18, 0x01	; 1
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	ac 81       	ldd	r26, Y+4	; 0x04
    14ba:	bd 81       	ldd	r27, Y+5	; 0x05
    14bc:	79 01       	movw	r14, r18
    14be:	8a 01       	movw	r16, r20
    14c0:	e8 1a       	sub	r14, r24
    14c2:	f9 0a       	sbc	r15, r25
    14c4:	0a 0b       	sbc	r16, r26
    14c6:	1b 0b       	sbc	r17, r27
    14c8:	d8 01       	movw	r26, r16
    14ca:	c7 01       	movw	r24, r14
    14cc:	ba 2f       	mov	r27, r26
    14ce:	a9 2f       	mov	r26, r25
    14d0:	98 2f       	mov	r25, r24
    14d2:	88 27       	eor	r24, r24
    14d4:	89 83       	std	Y+1, r24	; 0x01
		Local_u16Counts += 1;
    14d6:	8e 81       	ldd	r24, Y+6	; 0x06
    14d8:	9f 81       	ldd	r25, Y+7	; 0x07
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	9f 83       	std	Y+7, r25	; 0x07
    14de:	8e 83       	std	Y+6, r24	; 0x06
	}


	Timer0_voidSetPreloadValue(Local_u8PreloadValue);
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	0e 94 8d 08 	call	0x111a	; 0x111a <Timer0_voidSetPreloadValue>
    14e6:	10 c0       	rjmp	.+32     	; 0x1508 <Timer0_voidDelay_us+0x116>

	while(Local_u16Counts--)
	{
		while(GET_BIT(TIFR, TIFR_TOV0) == 0);
    14e8:	e8 e5       	ldi	r30, 0x58	; 88
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	90 70       	andi	r25, 0x00	; 0
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	b9 f3       	breq	.-18     	; 0x14e8 <Timer0_voidDelay_us+0xf6>
		SET_BIT(TIFR, TIFR_TOV0);
    14fa:	a8 e5       	ldi	r26, 0x58	; 88
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e8 e5       	ldi	r30, 0x58	; 88
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	81 60       	ori	r24, 0x01	; 1
    1506:	8c 93       	st	X, r24
	}


	Timer0_voidSetPreloadValue(Local_u8PreloadValue);

	while(Local_u16Counts--)
    1508:	18 8a       	std	Y+16, r1	; 0x10
    150a:	8e 81       	ldd	r24, Y+6	; 0x06
    150c:	9f 81       	ldd	r25, Y+7	; 0x07
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	11 f0       	breq	.+4      	; 0x1516 <Timer0_voidDelay_us+0x124>
    1512:	01 e0       	ldi	r16, 0x01	; 1
    1514:	08 8b       	std	Y+16, r16	; 0x10
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	9f 81       	ldd	r25, Y+7	; 0x07
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9f 83       	std	Y+7, r25	; 0x07
    151e:	8e 83       	std	Y+6, r24	; 0x06
    1520:	18 89       	ldd	r17, Y+16	; 0x10
    1522:	11 23       	and	r17, r17
    1524:	09 f7       	brne	.-62     	; 0x14e8 <Timer0_voidDelay_us+0xf6>
	{
		while(GET_BIT(TIFR, TIFR_TOV0) == 0);
		SET_BIT(TIFR, TIFR_TOV0);
	}

}
    1526:	60 96       	adiw	r28, 0x10	; 16
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	08 95       	ret

00001540 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1540:	1f 92       	push	r1
    1542:	0f 92       	push	r0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	0f 92       	push	r0
    1548:	11 24       	eor	r1, r1
    154a:	2f 93       	push	r18
    154c:	3f 93       	push	r19
    154e:	4f 93       	push	r20
    1550:	5f 93       	push	r21
    1552:	6f 93       	push	r22
    1554:	7f 93       	push	r23
    1556:	8f 93       	push	r24
    1558:	9f 93       	push	r25
    155a:	af 93       	push	r26
    155c:	bf 93       	push	r27
    155e:	ef 93       	push	r30
    1560:	ff 93       	push	r31
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	if(pvoid_TOV_NotificationFunc)
    156a:	80 91 6e 01 	lds	r24, 0x016E
    156e:	90 91 6f 01 	lds	r25, 0x016F
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	29 f0       	breq	.+10     	; 0x1580 <__vector_11+0x40>
	{
		pvoid_TOV_NotificationFunc();
    1576:	e0 91 6e 01 	lds	r30, 0x016E
    157a:	f0 91 6f 01 	lds	r31, 0x016F
    157e:	09 95       	icall
	}
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	ef 93       	push	r30
    15c6:	ff 93       	push	r31
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	if(pvoid_OCR_NotificationFunc)
    15d0:	80 91 70 01 	lds	r24, 0x0170
    15d4:	90 91 71 01 	lds	r25, 0x0171
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	29 f0       	breq	.+10     	; 0x15e6 <__vector_10+0x40>
	{
		pvoid_OCR_NotificationFunc();
    15dc:	e0 91 70 01 	lds	r30, 0x0170
    15e0:	f0 91 71 01 	lds	r31, 0x0171
    15e4:	09 95       	icall
	}
}
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	ff 91       	pop	r31
    15ec:	ef 91       	pop	r30
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <ICU_voidSetTRiggerSignal>:

void ICU_voidSetTRiggerSignal(u8 Copy_u8TriggerSignal){
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <ICU_voidSetTRiggerSignal+0x6>
    1612:	0f 92       	push	r0
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8TriggerSignal)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3b 83       	std	Y+3, r19	; 0x03
    1622:	2a 83       	std	Y+2, r18	; 0x02
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	69 f0       	breq	.+26     	; 0x1646 <ICU_voidSetTRiggerSignal+0x3a>
    162c:	2a 81       	ldd	r18, Y+2	; 0x02
    162e:	3b 81       	ldd	r19, Y+3	; 0x03
    1630:	21 30       	cpi	r18, 0x01	; 1
    1632:	31 05       	cpc	r19, r1
    1634:	79 f4       	brne	.+30     	; 0x1654 <ICU_voidSetTRiggerSignal+0x48>

	{
	case RAISING_EDGE:
		SET_BIT(TCCR1B,TCCR1A_ICES1);
    1636:	ae e4       	ldi	r26, 0x4E	; 78
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ee e4       	ldi	r30, 0x4E	; 78
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 64       	ori	r24, 0x40	; 64
    1642:	8c 93       	st	X, r24
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <ICU_voidSetTRiggerSignal+0x48>
		break;
	case FALLING_EDGE:
		CLR_BIT(TCCR1B,TCCR1A_ICES1);
    1646:	ae e4       	ldi	r26, 0x4E	; 78
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ee e4       	ldi	r30, 0x4E	; 78
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 7b       	andi	r24, 0xBF	; 191
    1652:	8c 93       	st	X, r24
		break;
	}
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <ICU_u16getICRRegister>:
static void (*ICU_NotificationFunction)(void )=NULL;
u16 ICU_u16getICRRegister(void )
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1668:	e6 e4       	ldi	r30, 0x46	; 70
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01

}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <ICU_voidInterruptControl>:

void ICU_voidInterruptControl(u8 Copy_u8InterruptState){
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <ICU_voidInterruptControl+0x6>
    167c:	0f 92       	push	r0
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8InterruptState)
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3b 83       	std	Y+3, r19	; 0x03
    168c:	2a 83       	std	Y+2, r18	; 0x02
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	69 f0       	breq	.+26     	; 0x16b0 <ICU_voidInterruptControl+0x3a>
    1696:	2a 81       	ldd	r18, Y+2	; 0x02
    1698:	3b 81       	ldd	r19, Y+3	; 0x03
    169a:	21 30       	cpi	r18, 0x01	; 1
    169c:	31 05       	cpc	r19, r1
    169e:	79 f4       	brne	.+30     	; 0x16be <ICU_voidInterruptControl+0x48>

	{
	case ICU_Enable:
		SET_BIT(TIMSK,TIMSK_TICIE1);
    16a0:	a9 e5       	ldi	r26, 0x59	; 89
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e9 e5       	ldi	r30, 0x59	; 89
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 62       	ori	r24, 0x20	; 32
    16ac:	8c 93       	st	X, r24
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <ICU_voidInterruptControl+0x48>
		break;
	case ICU_Disable:
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    16b0:	a9 e5       	ldi	r26, 0x59	; 89
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e9 e5       	ldi	r30, 0x59	; 89
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 7d       	andi	r24, 0xDF	; 223
    16bc:	8c 93       	st	X, r24

	}



	}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <ICU_voidSetCallback>:

void ICU_voidSetCallback(void (*Notification)(void))
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <ICU_voidSetCallback+0x6>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
	ICU_NotificationFunction = Notification;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	90 93 73 01 	sts	0x0173, r25
    16e0:	80 93 72 01 	sts	0x0172, r24
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <__vector_6>:

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
	{
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
		if(ICU_NotificationFunction)
    1718:	80 91 72 01 	lds	r24, 0x0172
    171c:	90 91 73 01 	lds	r25, 0x0173
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	29 f0       	breq	.+10     	; 0x172e <__vector_6+0x40>
		{
			ICU_NotificationFunction();
    1724:	e0 91 72 01 	lds	r30, 0x0172
    1728:	f0 91 73 01 	lds	r31, 0x0173
    172c:	09 95       	icall
		}
	}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	ff 91       	pop	r31
    1734:	ef 91       	pop	r30
    1736:	bf 91       	pop	r27
    1738:	af 91       	pop	r26
    173a:	9f 91       	pop	r25
    173c:	8f 91       	pop	r24
    173e:	7f 91       	pop	r23
    1740:	6f 91       	pop	r22
    1742:	5f 91       	pop	r21
    1744:	4f 91       	pop	r20
    1746:	3f 91       	pop	r19
    1748:	2f 91       	pop	r18
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <WTD_voidEnable>:


void WTD_voidEnable(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( WDTCR,WDTCR_WDE);
    175c:	a1 e4       	ldi	r26, 0x41	; 65
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e1 e4       	ldi	r30, 0x41	; 65
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	88 60       	ori	r24, 0x08	; 8
    1768:	8c 93       	st	X, r24
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <WTD_voidDisable>:

void WTD_voidDisable(void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	WDTCR= (1<<WDTCR_WDTOE) | (1 << WDTCR_WDE);
    1778:	e1 e4       	ldi	r30, 0x41	; 65
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	88 e1       	ldi	r24, 0x18	; 24
    177e:	80 83       	st	Z, r24
	WDTCR =0;
    1780:	e1 e4       	ldi	r30, 0x41	; 65
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	10 82       	st	Z, r1
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <WTD_voidSleep>:


void WTD_voidSleep(u8 Copy_Timeout)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
	WDTCR &= 0b1111000;
    1798:	a1 e4       	ldi	r26, 0x41	; 65
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e1 e4       	ldi	r30, 0x41	; 65
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	88 77       	andi	r24, 0x78	; 120
    17a4:	8c 93       	st	X, r24
	WDTCR|= Copy_Timeout;
    17a6:	a1 e4       	ldi	r26, 0x41	; 65
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e1 e4       	ldi	r30, 0x41	; 65
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	90 81       	ld	r25, Z
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	89 2b       	or	r24, r25
    17b4:	8c 93       	st	X, r24
}
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <M_GIE_void_enable>:
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"

void M_GIE_void_enable(void)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I_BIT);
    17c6:	af e5       	ldi	r26, 0x5F	; 95
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	ef e5       	ldi	r30, 0x5F	; 95
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 68       	ori	r24, 0x80	; 128
    17d2:	8c 93       	st	X, r24
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
	 CLR_BIT(SREG_REG,I_BIT);
    17e2:	af e5       	ldi	r26, 0x5F	; 95
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ef e5       	ldi	r30, 0x5F	; 95
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8f 77       	andi	r24, 0x7F	; 127
    17ee:	8c 93       	st	X, r24
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <M_EXTI_void_Enable>:

// array of 3 pointers to functions (Call Back fn )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};

void M_EXTI_void_Enable(u8 copy_u8IntID, u8 copy_u8Sense)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <M_EXTI_void_Enable+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <M_EXTI_void_Enable+0x8>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	6a 83       	std	Y+2, r22	; 0x02
    // step 1 : config Sense
	if(copy_u8Sense < EXTI_TRIG_LOW_LEVEL  || copy_u8Sense > EXTI_TRIG_RAIS_EDGE )
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	08 f0       	brcs	.+2      	; 0x180e <M_EXTI_void_Enable+0x18>
    180c:	72 c0       	rjmp	.+228    	; 0x18f2 <M_EXTI_void_Enable+0xfc>
	{
		return ;
	}
	switch(copy_u8IntID)
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3c 83       	std	Y+4, r19	; 0x04
    1816:	2b 83       	std	Y+3, r18	; 0x03
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	86 30       	cpi	r24, 0x06	; 6
    181e:	91 05       	cpc	r25, r1
    1820:	59 f0       	breq	.+22     	; 0x1838 <M_EXTI_void_Enable+0x42>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	27 30       	cpi	r18, 0x07	; 7
    1828:	31 05       	cpc	r19, r1
    182a:	b1 f0       	breq	.+44     	; 0x1858 <M_EXTI_void_Enable+0x62>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	85 30       	cpi	r24, 0x05	; 5
    1832:	91 05       	cpc	r25, r1
    1834:	41 f1       	breq	.+80     	; 0x1886 <M_EXTI_void_Enable+0x90>
    1836:	44 c0       	rjmp	.+136    	; 0x18c0 <M_EXTI_void_Enable+0xca>
	{
	case EXTI_INT0_ID:
		// step 1 : Apply Mask
		MCUCR_REG &= EXTI_INT0_TRIG_MASK;
    1838:	a5 e5       	ldi	r26, 0x55	; 85
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e5       	ldi	r30, 0x55	; 85
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8c 7f       	andi	r24, 0xFC	; 252
    1844:	8c 93       	st	X, r24
		// step 2 : insert value
		MCUCR_REG |= copy_u8Sense;
    1846:	a5 e5       	ldi	r26, 0x55	; 85
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e5       	ldi	r30, 0x55	; 85
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	90 81       	ld	r25, Z
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	89 2b       	or	r24, r25
    1854:	8c 93       	st	X, r24
    1856:	34 c0       	rjmp	.+104    	; 0x18c0 <M_EXTI_void_Enable+0xca>
		break;
	case EXTI_INT1_ID:
		// step 1 : Apply Mask
		MCUCR_REG &= EXTI_INT1_TRIG_MASK;
    1858:	a5 e5       	ldi	r26, 0x55	; 85
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e5       	ldi	r30, 0x55	; 85
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	83 7f       	andi	r24, 0xF3	; 243
    1864:	8c 93       	st	X, r24
		// step 2 : insert value
		MCUCR_REG |= copy_u8Sense << EXTI_INT1_TRIG_SHIFT ;
    1866:	a5 e5       	ldi	r26, 0x55	; 85
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e5 e5       	ldi	r30, 0x55	; 85
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	28 2f       	mov	r18, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	82 2b       	or	r24, r18
    1882:	8c 93       	st	X, r24
    1884:	1d c0       	rjmp	.+58     	; 0x18c0 <M_EXTI_void_Enable+0xca>
		break;
	case EXTI_INT2_ID:
		// step 1 : Apply Mask
		CLR_BIT(MCUCSR_REG , ISC2_BIT);
    1886:	a4 e5       	ldi	r26, 0x54	; 84
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e4 e5       	ldi	r30, 0x54	; 84
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 7b       	andi	r24, 0xBF	; 191
    1892:	8c 93       	st	X, r24
		// step 2 : insert value
		MCUCSR_REG |= (GET_BIT(copy_u8Sense,0))<< EXTI_INT2_TRIG_SHIFT;
    1894:	a4 e5       	ldi	r26, 0x54	; 84
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e4 e5       	ldi	r30, 0x54	; 84
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	00 24       	eor	r0, r0
    18ac:	96 95       	lsr	r25
    18ae:	87 95       	ror	r24
    18b0:	07 94       	ror	r0
    18b2:	96 95       	lsr	r25
    18b4:	87 95       	ror	r24
    18b6:	07 94       	ror	r0
    18b8:	98 2f       	mov	r25, r24
    18ba:	80 2d       	mov	r24, r0
    18bc:	82 2b       	or	r24, r18
    18be:	8c 93       	st	X, r24
		break;
	}

	// step 2 : Enable PIE
	if(copy_u8IntID>= EXTI_INT2_ID && copy_u8IntID <= EXTI_INT1_ID)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	85 30       	cpi	r24, 0x05	; 5
    18c4:	b0 f0       	brcs	.+44     	; 0x18f2 <M_EXTI_void_Enable+0xfc>
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	88 30       	cpi	r24, 0x08	; 8
    18ca:	98 f4       	brcc	.+38     	; 0x18f2 <M_EXTI_void_Enable+0xfc>
	   SET_BIT(GICR_REG ,copy_u8IntID);
    18cc:	ab e5       	ldi	r26, 0x5B	; 91
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	eb e5       	ldi	r30, 0x5B	; 91
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <M_EXTI_void_Enable+0xf4>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <M_EXTI_void_Enable+0xf0>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <M_EXTI_void_Disable>:

void M_EXTI_void_Disable(u8 copy_u8IntID)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	89 83       	std	Y+1, r24	; 0x01
	case EXTI_INT2_ID:
		CLR_BIT(GICR_REG  ,INT2_BIT);
		break;
	}*/
	// Method 2
	if(copy_u8IntID>= EXTI_INT2_ID && copy_u8IntID <= EXTI_INT1_ID)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	85 30       	cpi	r24, 0x05	; 5
    1910:	b8 f0       	brcs	.+46     	; 0x1940 <M_EXTI_void_Disable+0x40>
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	88 30       	cpi	r24, 0x08	; 8
    1916:	a0 f4       	brcc	.+40     	; 0x1940 <M_EXTI_void_Disable+0x40>
	   CLR_BIT(GICR_REG ,copy_u8IntID);
    1918:	ab e5       	ldi	r26, 0x5B	; 91
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	eb e5       	ldi	r30, 0x5B	; 91
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <M_EXTI_void_Disable+0x36>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <M_EXTI_void_Disable+0x32>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
}
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <M_EXTI_void_setCallBack>:
void M_EXTI_void_setCallBack(void (*ptrfn) (void), u8 copy_u8IntID)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <M_EXTI_void_setCallBack+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <M_EXTI_void_setCallBack+0x8>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	6b 83       	std	Y+3, r22	; 0x03
   switch(copy_u8IntID)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3d 83       	std	Y+5, r19	; 0x05
    1964:	2c 83       	std	Y+4, r18	; 0x04
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	86 30       	cpi	r24, 0x06	; 6
    196c:	91 05       	cpc	r25, r1
    196e:	59 f0       	breq	.+22     	; 0x1986 <M_EXTI_void_setCallBack+0x3e>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	27 30       	cpi	r18, 0x07	; 7
    1976:	31 05       	cpc	r19, r1
    1978:	69 f0       	breq	.+26     	; 0x1994 <M_EXTI_void_setCallBack+0x4c>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	85 30       	cpi	r24, 0x05	; 5
    1980:	91 05       	cpc	r25, r1
    1982:	79 f0       	breq	.+30     	; 0x19a2 <M_EXTI_void_setCallBack+0x5a>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <M_EXTI_void_setCallBack+0x66>
   {
   case EXTI_INT0_ID:
	   Arr_CallBack[0]= ptrfn;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	90 93 75 01 	sts	0x0175, r25
    198e:	80 93 74 01 	sts	0x0174, r24
    1992:	0d c0       	rjmp	.+26     	; 0x19ae <M_EXTI_void_setCallBack+0x66>
   		break;
   	case EXTI_INT1_ID:
   		Arr_CallBack[1]= ptrfn;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	90 93 77 01 	sts	0x0177, r25
    199c:	80 93 76 01 	sts	0x0176, r24
    19a0:	06 c0       	rjmp	.+12     	; 0x19ae <M_EXTI_void_setCallBack+0x66>
   		break;
   	case EXTI_INT2_ID:
   		Arr_CallBack[2]= ptrfn;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	90 93 79 01 	sts	0x0179, r25
    19aa:	80 93 78 01 	sts	0x0178, r24
   		break;
   }
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	5f 93       	push	r21
    19d0:	6f 93       	push	r22
    19d2:	7f 93       	push	r23
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	af 93       	push	r26
    19da:	bf 93       	push	r27
    19dc:	ef 93       	push	r30
    19de:	ff 93       	push	r31
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    if(Arr_CallBack[0] != NULL)
    19e8:	80 91 74 01 	lds	r24, 0x0174
    19ec:	90 91 75 01 	lds	r25, 0x0175
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	29 f0       	breq	.+10     	; 0x19fe <__vector_1+0x40>
    {
    	Arr_CallBack[0]();
    19f4:	e0 91 74 01 	lds	r30, 0x0174
    19f8:	f0 91 75 01 	lds	r31, 0x0175
    19fc:	09 95       	icall
    }
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	ff 91       	pop	r31
    1a04:	ef 91       	pop	r30
    1a06:	bf 91       	pop	r27
    1a08:	af 91       	pop	r26
    1a0a:	9f 91       	pop	r25
    1a0c:	8f 91       	pop	r24
    1a0e:	7f 91       	pop	r23
    1a10:	6f 91       	pop	r22
    1a12:	5f 91       	pop	r21
    1a14:	4f 91       	pop	r20
    1a16:	3f 91       	pop	r19
    1a18:	2f 91       	pop	r18
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	0f 90       	pop	r0
    1a20:	1f 90       	pop	r1
    1a22:	18 95       	reti

00001a24 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    if(Arr_CallBack[1] != NULL)
    1a4e:	80 91 76 01 	lds	r24, 0x0176
    1a52:	90 91 77 01 	lds	r25, 0x0177
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <__vector_2+0x40>
    {
    	Arr_CallBack[1]();
    1a5a:	e0 91 76 01 	lds	r30, 0x0176
    1a5e:	f0 91 77 01 	lds	r31, 0x0177
    1a62:	09 95       	icall
    }
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	bf 91       	pop	r27
    1a6e:	af 91       	pop	r26
    1a70:	9f 91       	pop	r25
    1a72:	8f 91       	pop	r24
    1a74:	7f 91       	pop	r23
    1a76:	6f 91       	pop	r22
    1a78:	5f 91       	pop	r21
    1a7a:	4f 91       	pop	r20
    1a7c:	3f 91       	pop	r19
    1a7e:	2f 91       	pop	r18
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    if(Arr_CallBack[2] != NULL)
    1ab4:	80 91 78 01 	lds	r24, 0x0178
    1ab8:	90 91 79 01 	lds	r25, 0x0179
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	29 f0       	breq	.+10     	; 0x1aca <__vector_3+0x40>
    {
    	Arr_CallBack[2]();
    1ac0:	e0 91 78 01 	lds	r30, 0x0178
    1ac4:	f0 91 79 01 	lds	r31, 0x0179
    1ac8:	09 95       	icall
    }
}
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	ff 91       	pop	r31
    1ad0:	ef 91       	pop	r30
    1ad2:	bf 91       	pop	r27
    1ad4:	af 91       	pop	r26
    1ad6:	9f 91       	pop	r25
    1ad8:	8f 91       	pop	r24
    1ada:	7f 91       	pop	r23
    1adc:	6f 91       	pop	r22
    1ade:	5f 91       	pop	r21
    1ae0:	4f 91       	pop	r20
    1ae2:	3f 91       	pop	r19
    1ae4:	2f 91       	pop	r18
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0
    1aec:	1f 90       	pop	r1
    1aee:	18 95       	reti

00001af0 <MDIO_voidSetPinDirection>:

/*****************************************************************
 ***********FUNCTION IMPLEMENTATION*******************************
 ****************************************************************/
void MDIO_voidSetPinDirection (u8 Copy_u8PortName ,u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <MDIO_voidSetPinDirection+0x6>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <MDIO_voidSetPinDirection+0x8>
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	6a 83       	std	Y+2, r22	; 0x02
    1b02:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8PortName)
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3d 83       	std	Y+5, r19	; 0x05
    1b0c:	2c 83       	std	Y+4, r18	; 0x04
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	91 05       	cpc	r25, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <MDIO_voidSetPinDirection+0x2a>
    1b18:	48 c0       	rjmp	.+144    	; 0x1baa <MDIO_voidSetPinDirection+0xba>
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1e:	23 30       	cpi	r18, 0x03	; 3
    1b20:	31 05       	cpc	r19, r1
    1b22:	34 f4       	brge	.+12     	; 0x1b30 <MDIO_voidSetPinDirection+0x40>
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	71 f0       	breq	.+28     	; 0x1b4a <MDIO_voidSetPinDirection+0x5a>
    1b2e:	cb c0       	rjmp	.+406    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
    1b30:	2c 81       	ldd	r18, Y+4	; 0x04
    1b32:	3d 81       	ldd	r19, Y+5	; 0x05
    1b34:	23 30       	cpi	r18, 0x03	; 3
    1b36:	31 05       	cpc	r19, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <MDIO_voidSetPinDirection+0x4c>
    1b3a:	67 c0       	rjmp	.+206    	; 0x1c0a <MDIO_voidSetPinDirection+0x11a>
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b40:	84 30       	cpi	r24, 0x04	; 4
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <MDIO_voidSetPinDirection+0x58>
    1b46:	91 c0       	rjmp	.+290    	; 0x1c6a <MDIO_voidSetPinDirection+0x17a>
    1b48:	be c0       	rjmp	.+380    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
    {
        case (PORTA_ID):
            if (Copy_u8Direction == OUPUT)
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	a1 f4       	brne	.+40     	; 0x1b78 <MDIO_voidSetPinDirection+0x88>
            {
                SET_BIT (DDRA,Copy_u8PinNumber );
    1b50:	aa e3       	ldi	r26, 0x3A	; 58
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ea e3       	ldi	r30, 0x3A	; 58
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <MDIO_voidSetPinDirection+0x7e>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <MDIO_voidSetPinDirection+0x7a>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	a7 c0       	rjmp	.+334    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>

            }
            else if (Copy_u8Direction == INPUT)
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <MDIO_voidSetPinDirection+0x90>
    1b7e:	a3 c0       	rjmp	.+326    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRA,Copy_u8PinNumber );
    1b80:	aa e3       	ldi	r26, 0x3A	; 58
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ea e3       	ldi	r30, 0x3A	; 58
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <MDIO_voidSetPinDirection+0xae>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <MDIO_voidSetPinDirection+0xaa>
    1ba2:	80 95       	com	r24
    1ba4:	84 23       	and	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	8e c0       	rjmp	.+284    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            {
                // do nothing 
            }
        break ;
        case (PORTB_ID)  :
            if (Copy_u8Direction == OUPUT)
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	a1 f4       	brne	.+40     	; 0x1bd8 <MDIO_voidSetPinDirection+0xe8>
            {
                SET_BIT (DDRB,Copy_u8PinNumber );
    1bb0:	a7 e3       	ldi	r26, 0x37	; 55
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e7 e3       	ldi	r30, 0x37	; 55
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <MDIO_voidSetPinDirection+0xde>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <MDIO_voidSetPinDirection+0xda>
    1bd2:	84 2b       	or	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	77 c0       	rjmp	.+238    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            }
            else if (Copy_u8Direction == INPUT)
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <MDIO_voidSetPinDirection+0xf0>
    1bde:	73 c0       	rjmp	.+230    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRB,Copy_u8PinNumber );
    1be0:	a7 e3       	ldi	r26, 0x37	; 55
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e7 e3       	ldi	r30, 0x37	; 55
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <MDIO_voidSetPinDirection+0x10e>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <MDIO_voidSetPinDirection+0x10a>
    1c02:	80 95       	com	r24
    1c04:	84 23       	and	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	5e c0       	rjmp	.+188    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            {
                // do nothing 
            }
        break;
        case (PORTC_ID):
            if (Copy_u8Direction == OUPUT)
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	a1 f4       	brne	.+40     	; 0x1c38 <MDIO_voidSetPinDirection+0x148>
            {
                SET_BIT (DDRC,Copy_u8PinNumber );
    1c10:	a4 e3       	ldi	r26, 0x34	; 52
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e4 e3       	ldi	r30, 0x34	; 52
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <MDIO_voidSetPinDirection+0x13e>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <MDIO_voidSetPinDirection+0x13a>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	47 c0       	rjmp	.+142    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>

            }
            else if (Copy_u8Direction == INPUT)
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <MDIO_voidSetPinDirection+0x150>
    1c3e:	43 c0       	rjmp	.+134    	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRC,Copy_u8PinNumber );
    1c40:	a4 e3       	ldi	r26, 0x34	; 52
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e4 e3       	ldi	r30, 0x34	; 52
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <MDIO_voidSetPinDirection+0x16e>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <MDIO_voidSetPinDirection+0x16a>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	2e c0       	rjmp	.+92     	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            {
                // do nothing 
            }
        break;
        case (PORTD_ID):
            if (Copy_u8Direction == OUPUT)
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	a1 f4       	brne	.+40     	; 0x1c98 <MDIO_voidSetPinDirection+0x1a8>
            {
                SET_BIT (DDRD,Copy_u8PinNumber );
    1c70:	a1 e3       	ldi	r26, 0x31	; 49
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e1 e3       	ldi	r30, 0x31	; 49
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <MDIO_voidSetPinDirection+0x19e>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <MDIO_voidSetPinDirection+0x19a>
    1c92:	84 2b       	or	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	17 c0       	rjmp	.+46     	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>

            }
            else if (Copy_u8Direction == INPUT)
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	88 23       	and	r24, r24
    1c9c:	a1 f4       	brne	.+40     	; 0x1cc6 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRD,Copy_u8PinNumber );
    1c9e:	a1 e3       	ldi	r26, 0x31	; 49
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e1 e3       	ldi	r30, 0x31	; 49
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <MDIO_voidSetPinDirection+0x1cc>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <MDIO_voidSetPinDirection+0x1c8>
    1cc0:	80 95       	com	r24
    1cc2:	84 23       	and	r24, r20
    1cc4:	8c 93       	st	X, r24
            }
        break;


    }
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 Copy_u8PortName ,u8 Copy_u8PinNumber , u8 Copy_u8Value)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	2d 97       	sbiw	r28, 0x0d	; 13
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	6a 83       	std	Y+2, r22	; 0x02
    1cee:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8PortName)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	3d 87       	std	Y+13, r19	; 0x0d
    1cf8:	2c 87       	std	Y+12, r18	; 0x0c
    1cfa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cfc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cfe:	82 30       	cpi	r24, 0x02	; 2
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <MDIO_voidSetPinValue+0x30>
    1d04:	50 c0       	rjmp	.+160    	; 0x1da6 <MDIO_voidSetPinValue+0xd0>
    1d06:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d08:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d0a:	23 30       	cpi	r18, 0x03	; 3
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	34 f4       	brge	.+12     	; 0x1d1c <MDIO_voidSetPinValue+0x46>
    1d10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d12:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	91 05       	cpc	r25, r1
    1d18:	71 f0       	breq	.+28     	; 0x1d36 <MDIO_voidSetPinValue+0x60>
    1d1a:	ec c0       	rjmp	.+472    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
    1d1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d1e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d20:	23 30       	cpi	r18, 0x03	; 3
    1d22:	31 05       	cpc	r19, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <MDIO_voidSetPinValue+0x52>
    1d26:	77 c0       	rjmp	.+238    	; 0x1e16 <MDIO_voidSetPinValue+0x140>
    1d28:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <MDIO_voidSetPinValue+0x5e>
    1d32:	a9 c0       	rjmp	.+338    	; 0x1e86 <MDIO_voidSetPinValue+0x1b0>
    1d34:	df c0       	rjmp	.+446    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
    {
        case (PORTA_ID):
            switch (Copy_u8Value )
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3b 87       	std	Y+11, r19	; 0x0b
    1d3e:	2a 87       	std	Y+10, r18	; 0x0a
    1d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	31 f0       	breq	.+12     	; 0x1d54 <MDIO_voidSetPinValue+0x7e>
    1d48:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d4c:	21 30       	cpi	r18, 0x01	; 1
    1d4e:	31 05       	cpc	r19, r1
    1d50:	b1 f0       	breq	.+44     	; 0x1d7e <MDIO_voidSetPinValue+0xa8>
    1d52:	d0 c0       	rjmp	.+416    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
            {
				case LOW:
					CLR_BIT (PORTA,Copy_u8PinNumber );
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <MDIO_voidSetPinValue+0x9c>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <MDIO_voidSetPinValue+0x98>
    1d76:	80 95       	com	r24
    1d78:	84 23       	and	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	bb c0       	rjmp	.+374    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
					break;
				case HIGH:
					SET_BIT (PORTA,Copy_u8PinNumber );
    1d7e:	ab e3       	ldi	r26, 0x3B	; 59
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <MDIO_voidSetPinValue+0xc6>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <MDIO_voidSetPinValue+0xc2>
    1da0:	84 2b       	or	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	a7 c0       	rjmp	.+334    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
					break;
            }
        	break;
        case (PORTB_ID):
        
            switch (Copy_u8Value )
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	39 87       	std	Y+9, r19	; 0x09
    1dae:	28 87       	std	Y+8, r18	; 0x08
    1db0:	88 85       	ldd	r24, Y+8	; 0x08
    1db2:	99 85       	ldd	r25, Y+9	; 0x09
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <MDIO_voidSetPinValue+0xee>
    1db8:	28 85       	ldd	r18, Y+8	; 0x08
    1dba:	39 85       	ldd	r19, Y+9	; 0x09
    1dbc:	21 30       	cpi	r18, 0x01	; 1
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	b1 f0       	breq	.+44     	; 0x1dee <MDIO_voidSetPinValue+0x118>
    1dc2:	98 c0       	rjmp	.+304    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
            {
            case LOW:
                CLR_BIT (PORTB,Copy_u8PinNumber );
    1dc4:	a8 e3       	ldi	r26, 0x38	; 56
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e8 e3       	ldi	r30, 0x38	; 56
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <MDIO_voidSetPinValue+0x10c>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <MDIO_voidSetPinValue+0x108>
    1de6:	80 95       	com	r24
    1de8:	84 23       	and	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	83 c0       	rjmp	.+262    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
                break;
            case HIGH:
                SET_BIT (PORTB,Copy_u8PinNumber );
    1dee:	a8 e3       	ldi	r26, 0x38	; 56
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e8 e3       	ldi	r30, 0x38	; 56
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <MDIO_voidSetPinValue+0x136>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <MDIO_voidSetPinValue+0x132>
    1e10:	84 2b       	or	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	6f c0       	rjmp	.+222    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
            default:
                break;
            }
        break;
        case (PORTC_ID):
            switch (Copy_u8Value )
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	3f 83       	std	Y+7, r19	; 0x07
    1e1e:	2e 83       	std	Y+6, r18	; 0x06
    1e20:	8e 81       	ldd	r24, Y+6	; 0x06
    1e22:	9f 81       	ldd	r25, Y+7	; 0x07
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	31 f0       	breq	.+12     	; 0x1e34 <MDIO_voidSetPinValue+0x15e>
    1e28:	2e 81       	ldd	r18, Y+6	; 0x06
    1e2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2c:	21 30       	cpi	r18, 0x01	; 1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	b1 f0       	breq	.+44     	; 0x1e5e <MDIO_voidSetPinValue+0x188>
    1e32:	60 c0       	rjmp	.+192    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
            {
				case LOW:
					CLR_BIT (PORTC,Copy_u8PinNumber );
    1e34:	a5 e3       	ldi	r26, 0x35	; 53
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e5 e3       	ldi	r30, 0x35	; 53
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <MDIO_voidSetPinValue+0x17c>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <MDIO_voidSetPinValue+0x178>
    1e56:	80 95       	com	r24
    1e58:	84 23       	and	r24, r20
    1e5a:	8c 93       	st	X, r24
    1e5c:	4b c0       	rjmp	.+150    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
					break;
				case HIGH:
					SET_BIT (PORTC,Copy_u8PinNumber );
    1e5e:	a5 e3       	ldi	r26, 0x35	; 53
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <MDIO_voidSetPinValue+0x1a6>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <MDIO_voidSetPinValue+0x1a2>
    1e80:	84 2b       	or	r24, r20
    1e82:	8c 93       	st	X, r24
    1e84:	37 c0       	rjmp	.+110    	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
				default:
					break;
            }
        	break;
        case (PORTD_ID):
            switch (Copy_u8Value )
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	3d 83       	std	Y+5, r19	; 0x05
    1e8e:	2c 83       	std	Y+4, r18	; 0x04
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	31 f0       	breq	.+12     	; 0x1ea4 <MDIO_voidSetPinValue+0x1ce>
    1e98:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9c:	21 30       	cpi	r18, 0x01	; 1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	b1 f0       	breq	.+44     	; 0x1ece <MDIO_voidSetPinValue+0x1f8>
    1ea2:	28 c0       	rjmp	.+80     	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
            {
				case LOW:
					CLR_BIT (PORTD,Copy_u8PinNumber );
    1ea4:	a2 e3       	ldi	r26, 0x32	; 50
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <MDIO_voidSetPinValue+0x1ec>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <MDIO_voidSetPinValue+0x1e8>
    1ec6:	80 95       	com	r24
    1ec8:	84 23       	and	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	13 c0       	rjmp	.+38     	; 0x1ef4 <MDIO_voidSetPinValue+0x21e>
					break;
				case HIGH:
					SET_BIT (PORTD,Copy_u8PinNumber );
    1ece:	a2 e3       	ldi	r26, 0x32	; 50
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e2 e3       	ldi	r30, 0x32	; 50
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <MDIO_voidSetPinValue+0x216>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <MDIO_voidSetPinValue+0x212>
    1ef0:	84 2b       	or	r24, r20
    1ef2:	8c 93       	st	X, r24
				default:
					break;
            }
        	break;
    }
}
    1ef4:	2d 96       	adiw	r28, 0x0d	; 13
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <MDIO_voidReadPinValue>:

u8   MDIO_voidReadPinValue (u8 Copy_u8PortName ,u8 Copy_u8PinNumber)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <MDIO_voidReadPinValue+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <MDIO_voidReadPinValue+0x8>
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	8a 83       	std	Y+2, r24	; 0x02
    1f16:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8PinValue ;
    switch (Copy_u8PortName )
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	3d 83       	std	Y+5, r19	; 0x05
    1f20:	2c 83       	std	Y+4, r18	; 0x04
    1f22:	4c 81       	ldd	r20, Y+4	; 0x04
    1f24:	5d 81       	ldd	r21, Y+5	; 0x05
    1f26:	42 30       	cpi	r20, 0x02	; 2
    1f28:	51 05       	cpc	r21, r1
    1f2a:	41 f1       	breq	.+80     	; 0x1f7c <MDIO_voidReadPinValue+0x76>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	83 30       	cpi	r24, 0x03	; 3
    1f32:	91 05       	cpc	r25, r1
    1f34:	34 f4       	brge	.+12     	; 0x1f42 <MDIO_voidReadPinValue+0x3c>
    1f36:	2c 81       	ldd	r18, Y+4	; 0x04
    1f38:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3a:	21 30       	cpi	r18, 0x01	; 1
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <MDIO_voidReadPinValue+0x52>
    1f40:	52 c0       	rjmp	.+164    	; 0x1fe6 <MDIO_voidReadPinValue+0xe0>
    1f42:	4c 81       	ldd	r20, Y+4	; 0x04
    1f44:	5d 81       	ldd	r21, Y+5	; 0x05
    1f46:	43 30       	cpi	r20, 0x03	; 3
    1f48:	51 05       	cpc	r21, r1
    1f4a:	51 f1       	breq	.+84     	; 0x1fa0 <MDIO_voidReadPinValue+0x9a>
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	84 30       	cpi	r24, 0x04	; 4
    1f52:	91 05       	cpc	r25, r1
    1f54:	b9 f1       	breq	.+110    	; 0x1fc4 <MDIO_voidReadPinValue+0xbe>
    1f56:	47 c0       	rjmp	.+142    	; 0x1fe6 <MDIO_voidReadPinValue+0xe0>
    {
    case PORTA_ID:
        Local_u8PinValue = GET_BIT (PINA, Copy_u8PinNumber); break;
    1f58:	e9 e3       	ldi	r30, 0x39	; 57
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a9 01       	movw	r20, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <MDIO_voidReadPinValue+0x6a>
    1f6c:	55 95       	asr	r21
    1f6e:	47 95       	ror	r20
    1f70:	8a 95       	dec	r24
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <MDIO_voidReadPinValue+0x66>
    1f74:	ca 01       	movw	r24, r20
    1f76:	81 70       	andi	r24, 0x01	; 1
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	35 c0       	rjmp	.+106    	; 0x1fe6 <MDIO_voidReadPinValue+0xe0>
    case PORTB_ID:
        Local_u8PinValue = GET_BIT (PINB, Copy_u8PinNumber); break;
    1f7c:	e6 e3       	ldi	r30, 0x36	; 54
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a9 01       	movw	r20, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <MDIO_voidReadPinValue+0x8e>
    1f90:	55 95       	asr	r21
    1f92:	47 95       	ror	r20
    1f94:	8a 95       	dec	r24
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <MDIO_voidReadPinValue+0x8a>
    1f98:	ca 01       	movw	r24, r20
    1f9a:	81 70       	andi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	23 c0       	rjmp	.+70     	; 0x1fe6 <MDIO_voidReadPinValue+0xe0>
    case PORTC_ID:
        Local_u8PinValue = GET_BIT (PINC, Copy_u8PinNumber); break;
    1fa0:	e3 e3       	ldi	r30, 0x33	; 51
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a9 01       	movw	r20, r18
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <MDIO_voidReadPinValue+0xb2>
    1fb4:	55 95       	asr	r21
    1fb6:	47 95       	ror	r20
    1fb8:	8a 95       	dec	r24
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <MDIO_voidReadPinValue+0xae>
    1fbc:	ca 01       	movw	r24, r20
    1fbe:	81 70       	andi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	11 c0       	rjmp	.+34     	; 0x1fe6 <MDIO_voidReadPinValue+0xe0>
    case PORTD_ID:
        Local_u8PinValue = GET_BIT (PIND, Copy_u8PinNumber); break;
    1fc4:	e0 e3       	ldi	r30, 0x30	; 48
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a9 01       	movw	r20, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <MDIO_voidReadPinValue+0xd6>
    1fd8:	55 95       	asr	r21
    1fda:	47 95       	ror	r20
    1fdc:	8a 95       	dec	r24
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <MDIO_voidReadPinValue+0xd2>
    1fe0:	ca 01       	movw	r24, r20
    1fe2:	81 70       	andi	r24, 0x01	; 1
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    default: break;
    }
    return Local_u8PinValue ;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <MDIO_voidTogglePin>:

void MDIO_voidTogglePin (u8 Copy_u8PortName ,u8 Copy_u8PinNumber )
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <MDIO_voidTogglePin+0x6>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <MDIO_voidTogglePin+0x8>
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	3c 83       	std	Y+4, r19	; 0x04
    2010:	2b 83       	std	Y+3, r18	; 0x03
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	91 05       	cpc	r25, r1
    201a:	51 f1       	breq	.+84     	; 0x2070 <MDIO_voidTogglePin+0x78>
    201c:	2b 81       	ldd	r18, Y+3	; 0x03
    201e:	3c 81       	ldd	r19, Y+4	; 0x04
    2020:	23 30       	cpi	r18, 0x03	; 3
    2022:	31 05       	cpc	r19, r1
    2024:	34 f4       	brge	.+12     	; 0x2032 <MDIO_voidTogglePin+0x3a>
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	91 05       	cpc	r25, r1
    202e:	61 f0       	breq	.+24     	; 0x2048 <MDIO_voidTogglePin+0x50>
    2030:	5a c0       	rjmp	.+180    	; 0x20e6 <MDIO_voidTogglePin+0xee>
    2032:	2b 81       	ldd	r18, Y+3	; 0x03
    2034:	3c 81       	ldd	r19, Y+4	; 0x04
    2036:	23 30       	cpi	r18, 0x03	; 3
    2038:	31 05       	cpc	r19, r1
    203a:	71 f1       	breq	.+92     	; 0x2098 <MDIO_voidTogglePin+0xa0>
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	84 30       	cpi	r24, 0x04	; 4
    2042:	91 05       	cpc	r25, r1
    2044:	e9 f1       	breq	.+122    	; 0x20c0 <MDIO_voidTogglePin+0xc8>
    2046:	4f c0       	rjmp	.+158    	; 0x20e6 <MDIO_voidTogglePin+0xee>
	{
	case PORTA_ID:
		TOG_BIT(PORTA,Copy_u8PinNumber); break;
    2048:	ab e3       	ldi	r26, 0x3B	; 59
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	eb e3       	ldi	r30, 0x3B	; 59
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <MDIO_voidTogglePin+0x6e>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <MDIO_voidTogglePin+0x6a>
    206a:	84 27       	eor	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	3b c0       	rjmp	.+118    	; 0x20e6 <MDIO_voidTogglePin+0xee>
	case PORTB_ID:
		TOG_BIT(PORTB,Copy_u8PinNumber); break;
    2070:	a8 e3       	ldi	r26, 0x38	; 56
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e8 e3       	ldi	r30, 0x38	; 56
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	48 2f       	mov	r20, r24
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 2e       	mov	r0, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <MDIO_voidTogglePin+0x96>
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	0a 94       	dec	r0
    2090:	e2 f7       	brpl	.-8      	; 0x208a <MDIO_voidTogglePin+0x92>
    2092:	84 27       	eor	r24, r20
    2094:	8c 93       	st	X, r24
    2096:	27 c0       	rjmp	.+78     	; 0x20e6 <MDIO_voidTogglePin+0xee>
	case PORTC_ID:
		TOG_BIT(PORTC,Copy_u8PinNumber); break;
    2098:	a5 e3       	ldi	r26, 0x35	; 53
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e5 e3       	ldi	r30, 0x35	; 53
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	48 2f       	mov	r20, r24
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <MDIO_voidTogglePin+0xbe>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <MDIO_voidTogglePin+0xba>
    20ba:	84 27       	eor	r24, r20
    20bc:	8c 93       	st	X, r24
    20be:	13 c0       	rjmp	.+38     	; 0x20e6 <MDIO_voidTogglePin+0xee>
	case PORTD_ID:
		TOG_BIT(PORTD,Copy_u8PinNumber); break;
    20c0:	a2 e3       	ldi	r26, 0x32	; 50
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e2 e3       	ldi	r30, 0x32	; 50
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <MDIO_voidTogglePin+0xe6>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <MDIO_voidTogglePin+0xe2>
    20e2:	84 27       	eor	r24, r20
    20e4:	8c 93       	st	X, r24
	}
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <MDIO_voidSetPortDirection>:
void MDIO_voidSetPortDirection (u8 Copy_u8PortName , u8 Copy_u8Direction)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	2c 97       	sbiw	r28, 0x0c	; 12
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	3c 87       	std	Y+12, r19	; 0x0c
    2114:	2b 87       	std	Y+11, r18	; 0x0b
    2116:	8b 85       	ldd	r24, Y+11	; 0x0b
    2118:	9c 85       	ldd	r25, Y+12	; 0x0c
    211a:	82 30       	cpi	r24, 0x02	; 2
    211c:	91 05       	cpc	r25, r1
    211e:	79 f1       	breq	.+94     	; 0x217e <MDIO_voidSetPortDirection+0x8a>
    2120:	2b 85       	ldd	r18, Y+11	; 0x0b
    2122:	3c 85       	ldd	r19, Y+12	; 0x0c
    2124:	23 30       	cpi	r18, 0x03	; 3
    2126:	31 05       	cpc	r19, r1
    2128:	34 f4       	brge	.+12     	; 0x2136 <MDIO_voidSetPortDirection+0x42>
    212a:	8b 85       	ldd	r24, Y+11	; 0x0b
    212c:	9c 85       	ldd	r25, Y+12	; 0x0c
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 05       	cpc	r25, r1
    2132:	69 f0       	breq	.+26     	; 0x214e <MDIO_voidSetPortDirection+0x5a>
    2134:	68 c0       	rjmp	.+208    	; 0x2206 <MDIO_voidSetPortDirection+0x112>
    2136:	2b 85       	ldd	r18, Y+11	; 0x0b
    2138:	3c 85       	ldd	r19, Y+12	; 0x0c
    213a:	23 30       	cpi	r18, 0x03	; 3
    213c:	31 05       	cpc	r19, r1
    213e:	b1 f1       	breq	.+108    	; 0x21ac <MDIO_voidSetPortDirection+0xb8>
    2140:	8b 85       	ldd	r24, Y+11	; 0x0b
    2142:	9c 85       	ldd	r25, Y+12	; 0x0c
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	91 05       	cpc	r25, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <MDIO_voidSetPortDirection+0x58>
    214a:	47 c0       	rjmp	.+142    	; 0x21da <MDIO_voidSetPortDirection+0xe6>
    214c:	5c c0       	rjmp	.+184    	; 0x2206 <MDIO_voidSetPortDirection+0x112>
		{
		case PORTA_ID:
			switch (Copy_u8Direction)
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	3a 87       	std	Y+10, r19	; 0x0a
    2156:	29 87       	std	Y+9, r18	; 0x09
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	59 f0       	breq	.+22     	; 0x2176 <MDIO_voidSetPortDirection+0x82>
    2160:	29 85       	ldd	r18, Y+9	; 0x09
    2162:	3a 85       	ldd	r19, Y+10	; 0x0a
    2164:	21 30       	cpi	r18, 0x01	; 1
    2166:	31 05       	cpc	r19, r1
    2168:	09 f0       	breq	.+2      	; 0x216c <MDIO_voidSetPortDirection+0x78>
    216a:	4d c0       	rjmp	.+154    	; 0x2206 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRA = 0xFF;
    216c:	ea e3       	ldi	r30, 0x3A	; 58
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	80 83       	st	Z, r24
    2174:	48 c0       	rjmp	.+144    	; 0x2206 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRA = 0x00;
    2176:	ea e3       	ldi	r30, 0x3A	; 58
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	10 82       	st	Z, r1
    217c:	44 c0       	rjmp	.+136    	; 0x2206 <MDIO_voidSetPortDirection+0x112>
			default :
				break ;
			}
			break ;
		case PORTB_ID:
			switch (Copy_u8Direction)
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	38 87       	std	Y+8, r19	; 0x08
    2186:	2f 83       	std	Y+7, r18	; 0x07
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	51 f0       	breq	.+20     	; 0x21a4 <MDIO_voidSetPortDirection+0xb0>
    2190:	2f 81       	ldd	r18, Y+7	; 0x07
    2192:	38 85       	ldd	r19, Y+8	; 0x08
    2194:	21 30       	cpi	r18, 0x01	; 1
    2196:	31 05       	cpc	r19, r1
    2198:	b1 f5       	brne	.+108    	; 0x2206 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRB = 0xFF;
    219a:	e7 e3       	ldi	r30, 0x37	; 55
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	80 83       	st	Z, r24
    21a2:	31 c0       	rjmp	.+98     	; 0x2206 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRB = 0x00;
    21a4:	e7 e3       	ldi	r30, 0x37	; 55
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	10 82       	st	Z, r1
    21aa:	2d c0       	rjmp	.+90     	; 0x2206 <MDIO_voidSetPortDirection+0x112>
			default :
				break ;
			}
			break ;
		case PORTC_ID:
			switch (Copy_u8Direction)
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	3e 83       	std	Y+6, r19	; 0x06
    21b4:	2d 83       	std	Y+5, r18	; 0x05
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	51 f0       	breq	.+20     	; 0x21d2 <MDIO_voidSetPortDirection+0xde>
    21be:	2d 81       	ldd	r18, Y+5	; 0x05
    21c0:	3e 81       	ldd	r19, Y+6	; 0x06
    21c2:	21 30       	cpi	r18, 0x01	; 1
    21c4:	31 05       	cpc	r19, r1
    21c6:	f9 f4       	brne	.+62     	; 0x2206 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRC = 0xFF;
    21c8:	e4 e3       	ldi	r30, 0x34	; 52
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
    21ce:	80 83       	st	Z, r24
    21d0:	1a c0       	rjmp	.+52     	; 0x2206 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRC = 0x00;
    21d2:	e4 e3       	ldi	r30, 0x34	; 52
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	10 82       	st	Z, r1
    21d8:	16 c0       	rjmp	.+44     	; 0x2206 <MDIO_voidSetPortDirection+0x112>
			default :
				break ;
			}
			break ;
		case PORTD_ID:
			switch (Copy_u8Direction)
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	3c 83       	std	Y+4, r19	; 0x04
    21e2:	2b 83       	std	Y+3, r18	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	51 f0       	breq	.+20     	; 0x2200 <MDIO_voidSetPortDirection+0x10c>
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	3c 81       	ldd	r19, Y+4	; 0x04
    21f0:	21 30       	cpi	r18, 0x01	; 1
    21f2:	31 05       	cpc	r19, r1
    21f4:	41 f4       	brne	.+16     	; 0x2206 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRD = 0xFF;
    21f6:	e1 e3       	ldi	r30, 0x31	; 49
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	80 83       	st	Z, r24
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRD = 0x00;
    2200:	e1 e3       	ldi	r30, 0x31	; 49
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	10 82       	st	Z, r1
			break ;
		default :
			// do nothing
			break ;
		}
}
    2206:	2c 96       	adiw	r28, 0x0c	; 12
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <MDIO_voidSetPortSpecificDirection>:

void MDIO_voidSetPortSpecificDirection (u8 Copy_u8PortName , u8 Copy_u8SpecificDirection)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	00 d0       	rcall	.+0      	; 0x221e <MDIO_voidSetPortSpecificDirection+0x6>
    221e:	00 d0       	rcall	.+0      	; 0x2220 <MDIO_voidSetPortSpecificDirection+0x8>
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	3c 83       	std	Y+4, r19	; 0x04
    2230:	2b 83       	std	Y+3, r18	; 0x03
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	82 30       	cpi	r24, 0x02	; 2
    2238:	91 05       	cpc	r25, r1
    223a:	d9 f0       	breq	.+54     	; 0x2272 <MDIO_voidSetPortSpecificDirection+0x5a>
    223c:	2b 81       	ldd	r18, Y+3	; 0x03
    223e:	3c 81       	ldd	r19, Y+4	; 0x04
    2240:	23 30       	cpi	r18, 0x03	; 3
    2242:	31 05       	cpc	r19, r1
    2244:	34 f4       	brge	.+12     	; 0x2252 <MDIO_voidSetPortSpecificDirection+0x3a>
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	91 05       	cpc	r25, r1
    224e:	61 f0       	breq	.+24     	; 0x2268 <MDIO_voidSetPortSpecificDirection+0x50>
    2250:	1e c0       	rjmp	.+60     	; 0x228e <MDIO_voidSetPortSpecificDirection+0x76>
    2252:	2b 81       	ldd	r18, Y+3	; 0x03
    2254:	3c 81       	ldd	r19, Y+4	; 0x04
    2256:	23 30       	cpi	r18, 0x03	; 3
    2258:	31 05       	cpc	r19, r1
    225a:	81 f0       	breq	.+32     	; 0x227c <MDIO_voidSetPortSpecificDirection+0x64>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	84 30       	cpi	r24, 0x04	; 4
    2262:	91 05       	cpc	r25, r1
    2264:	81 f0       	breq	.+32     	; 0x2286 <MDIO_voidSetPortSpecificDirection+0x6e>
    2266:	13 c0       	rjmp	.+38     	; 0x228e <MDIO_voidSetPortSpecificDirection+0x76>
		{
		case PORTA_ID:
			SET_REG(DDRA, Copy_u8SpecificDirection);
    2268:	ea e3       	ldi	r30, 0x3A	; 58
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	80 83       	st	Z, r24
    2270:	0e c0       	rjmp	.+28     	; 0x228e <MDIO_voidSetPortSpecificDirection+0x76>
			break ;
		case PORTB_ID:
			SET_REG(DDRB, Copy_u8SpecificDirection);
    2272:	e7 e3       	ldi	r30, 0x37	; 55
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	80 83       	st	Z, r24
    227a:	09 c0       	rjmp	.+18     	; 0x228e <MDIO_voidSetPortSpecificDirection+0x76>
			break ;
		case PORTC_ID:
			SET_REG(DDRC, Copy_u8SpecificDirection);
    227c:	e4 e3       	ldi	r30, 0x34	; 52
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	80 83       	st	Z, r24
    2284:	04 c0       	rjmp	.+8      	; 0x228e <MDIO_voidSetPortSpecificDirection+0x76>
			break ;
		case PORTD_ID:
			SET_REG(DDRD, Copy_u8SpecificDirection);
    2286:	e1 e3       	ldi	r30, 0x31	; 49
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	80 83       	st	Z, r24
			break ;
		default :
			// do nothing
			break ;
		}
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue (u8 Copy_u8PortName , u8 Copy_u8Value)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <MDIO_voidSetPortValue+0x6>
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <MDIO_voidSetPortValue+0x8>
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	3c 83       	std	Y+4, r19	; 0x04
    22b4:	2b 83       	std	Y+3, r18	; 0x03
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	82 30       	cpi	r24, 0x02	; 2
    22bc:	91 05       	cpc	r25, r1
    22be:	d9 f0       	breq	.+54     	; 0x22f6 <MDIO_voidSetPortValue+0x5a>
    22c0:	2b 81       	ldd	r18, Y+3	; 0x03
    22c2:	3c 81       	ldd	r19, Y+4	; 0x04
    22c4:	23 30       	cpi	r18, 0x03	; 3
    22c6:	31 05       	cpc	r19, r1
    22c8:	34 f4       	brge	.+12     	; 0x22d6 <MDIO_voidSetPortValue+0x3a>
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	91 05       	cpc	r25, r1
    22d2:	61 f0       	breq	.+24     	; 0x22ec <MDIO_voidSetPortValue+0x50>
    22d4:	1e c0       	rjmp	.+60     	; 0x2312 <MDIO_voidSetPortValue+0x76>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	3c 81       	ldd	r19, Y+4	; 0x04
    22da:	23 30       	cpi	r18, 0x03	; 3
    22dc:	31 05       	cpc	r19, r1
    22de:	81 f0       	breq	.+32     	; 0x2300 <MDIO_voidSetPortValue+0x64>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	91 05       	cpc	r25, r1
    22e8:	81 f0       	breq	.+32     	; 0x230a <MDIO_voidSetPortValue+0x6e>
    22ea:	13 c0       	rjmp	.+38     	; 0x2312 <MDIO_voidSetPortValue+0x76>
		{
		case PORTA_ID:
			PORTA = Copy_u8Value; // equal to SET_REG(PORTA, Copy_u8Value);
    22ec:	eb e3       	ldi	r30, 0x3B	; 59
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	80 83       	st	Z, r24
    22f4:	0e c0       	rjmp	.+28     	; 0x2312 <MDIO_voidSetPortValue+0x76>
			break;
		case PORTB_ID:
			PORTB = Copy_u8Value;
    22f6:	e8 e3       	ldi	r30, 0x38	; 56
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	80 83       	st	Z, r24
    22fe:	09 c0       	rjmp	.+18     	; 0x2312 <MDIO_voidSetPortValue+0x76>
			break ;
		case PORTC_ID:
			PORTC = Copy_u8Value;
    2300:	e5 e3       	ldi	r30, 0x35	; 53
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	80 83       	st	Z, r24
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <MDIO_voidSetPortValue+0x76>
			break;
		case PORTD_ID:
			PORTD = Copy_u8Value;
    230a:	e2 e3       	ldi	r30, 0x32	; 50
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	80 83       	st	Z, r24
			break;
		default :
			break ;
		}
}
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <MDIO_voidGetPortValue>:
u8 MDIO_voidGetPortValue (u8 Copy_u8PortName)
{
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <MDIO_voidGetPortValue+0x6>
    2326:	00 d0       	rcall	.+0      	; 0x2328 <MDIO_voidGetPortValue+0x8>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortValue;
	switch (Copy_u8PortName)
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	3c 83       	std	Y+4, r19	; 0x04
    2336:	2b 83       	std	Y+3, r18	; 0x03
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	91 05       	cpc	r25, r1
    2340:	d9 f0       	breq	.+54     	; 0x2378 <MDIO_voidGetPortValue+0x58>
    2342:	2b 81       	ldd	r18, Y+3	; 0x03
    2344:	3c 81       	ldd	r19, Y+4	; 0x04
    2346:	23 30       	cpi	r18, 0x03	; 3
    2348:	31 05       	cpc	r19, r1
    234a:	34 f4       	brge	.+12     	; 0x2358 <MDIO_voidGetPortValue+0x38>
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	61 f0       	breq	.+24     	; 0x236e <MDIO_voidGetPortValue+0x4e>
    2356:	1e c0       	rjmp	.+60     	; 0x2394 <MDIO_voidGetPortValue+0x74>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	23 30       	cpi	r18, 0x03	; 3
    235e:	31 05       	cpc	r19, r1
    2360:	81 f0       	breq	.+32     	; 0x2382 <MDIO_voidGetPortValue+0x62>
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	84 30       	cpi	r24, 0x04	; 4
    2368:	91 05       	cpc	r25, r1
    236a:	81 f0       	breq	.+32     	; 0x238c <MDIO_voidGetPortValue+0x6c>
    236c:	13 c0       	rjmp	.+38     	; 0x2394 <MDIO_voidGetPortValue+0x74>
		{
		case PORTA_ID:
			Local_u8PortValue = PORTA;
    236e:	eb e3       	ldi	r30, 0x3B	; 59
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	0e c0       	rjmp	.+28     	; 0x2394 <MDIO_voidGetPortValue+0x74>
			break;
		case PORTB_ID:
			Local_u8PortValue = PORTB;
    2378:	e8 e3       	ldi	r30, 0x38	; 56
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	09 c0       	rjmp	.+18     	; 0x2394 <MDIO_voidGetPortValue+0x74>
			break ;
		case PORTC_ID:
			Local_u8PortValue = PORTC;
    2382:	e5 e3       	ldi	r30, 0x35	; 53
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <MDIO_voidGetPortValue+0x74>
			break;
		case PORTD_ID:
			Local_u8PortValue = PORTD;
    238c:	e2 e3       	ldi	r30, 0x32	; 50
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	89 83       	std	Y+1, r24	; 0x01
			break;
		default :
			break ;
		}
	return Local_u8PortValue ;
    2394:	89 81       	ldd	r24, Y+1	; 0x01
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <ADC_voidInit>:
static void (*ADC_pvoidNotifiFunction) (void) = NULL;
volatile u16 ADC_u16DigitalResult;
volatile u8 ADC_u8DigitalValue;

void ADC_voidInit(void)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    /*Check For The ADC Enable*/
    #if ADC_ENABLE  == ENABLE
        SET_BIT(ADCSRA, ADCSRA_ADEN);
    23ac:	a6 e2       	ldi	r26, 0x26	; 38
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e6 e2       	ldi	r30, 0x26	; 38
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	80 68       	ori	r24, 0x80	; 128
    23b8:	8c 93       	st	X, r24
        #error "Error, ADC_ENABLE Configuration Error"
    #endif

    /*Check For The ADC Interrupt*/ 
    #if ADC_INTERRUPT_STATUS == ENABLE
        SET_BIT(ADCSRA, ADCSRA_ADIE);
    23ba:	a6 e2       	ldi	r26, 0x26	; 38
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e6 e2       	ldi	r30, 0x26	; 38
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	88 60       	ori	r24, 0x08	; 8
    23c6:	8c 93       	st	X, r24
    #else
        #error("Error, ADC_INTERRUPT_ENABLE Configuration Error")
    #endif

    /* Set the reference selection option using Bt Masking */
    ADMUX &= REF_SEL_BIT_MASK;
    23c8:	a7 e2       	ldi	r26, 0x27	; 39
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e7 e2       	ldi	r30, 0x27	; 39
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 73       	andi	r24, 0x3F	; 63
    23d4:	8c 93       	st	X, r24
    ADMUX |= ADC_REFERENCE_SELECTION;
    23d6:	a7 e2       	ldi	r26, 0x27	; 39
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e7 e2       	ldi	r30, 0x27	; 39
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	8c 93       	st	X, r24

    /*Check For The ADC Adjust Result*/
    #if ADC_ADJUST_RESULT == RIGHT_ADJUST
        CLR_BIT(ADMUX, ADMUX_ADLAR);
    #elif ADC_ADJUST_RESULT == LEFT_ADJUST
        SET_BIT(ADMUX, ADMUX_ADLAR);
    23e2:	a7 e2       	ldi	r26, 0x27	; 39
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e7 e2       	ldi	r30, 0x27	; 39
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	80 62       	ori	r24, 0x20	; 32
    23ee:	8c 93       	st	X, r24
    #else
        #error("Error, ADC_ADJUST_RESULT Confiuration Error")
    #endif

    /* Set The Prescaler Values*/
    ADCSRA &= DIV_FACTOR_SEL_BIT_MASK;
    23f0:	a6 e2       	ldi	r26, 0x26	; 38
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e6 e2       	ldi	r30, 0x26	; 38
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	88 7f       	andi	r24, 0xF8	; 248
    23fc:	8c 93       	st	X, r24
    ADCSRA |= ADC_PRESCALER_VALUE;
    23fe:	a6 e2       	ldi	r26, 0x26	; 38
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e6 e2       	ldi	r30, 0x26	; 38
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	87 60       	ori	r24, 0x07	; 7
    240a:	8c 93       	st	X, r24
}
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <ADC_voidInterruptControl>:


void ADC_voidInterruptControl(u8 Copy_u8InterruptStatus)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	00 d0       	rcall	.+0      	; 0x2418 <ADC_voidInterruptControl+0x6>
    2418:	0f 92       	push	r0
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8InterruptStatus)
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3b 83       	std	Y+3, r19	; 0x03
    2428:	2a 83       	std	Y+2, r18	; 0x02
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	9b 81       	ldd	r25, Y+3	; 0x03
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	31 f0       	breq	.+12     	; 0x243e <ADC_voidInterruptControl+0x2c>
    2432:	2a 81       	ldd	r18, Y+2	; 0x02
    2434:	3b 81       	ldd	r19, Y+3	; 0x03
    2436:	21 30       	cpi	r18, 0x01	; 1
    2438:	31 05       	cpc	r19, r1
    243a:	49 f0       	breq	.+18     	; 0x244e <ADC_voidInterruptControl+0x3c>
    243c:	0f c0       	rjmp	.+30     	; 0x245c <ADC_voidInterruptControl+0x4a>
    {
        case DISABLE:
            CLR_BIT(ADCSRA, ADCSRA_ADIE);
    243e:	a6 e2       	ldi	r26, 0x26	; 38
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e6 e2       	ldi	r30, 0x26	; 38
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	87 7f       	andi	r24, 0xF7	; 247
    244a:	8c 93       	st	X, r24
    244c:	07 c0       	rjmp	.+14     	; 0x245c <ADC_voidInterruptControl+0x4a>
        break;

        case ENABLE:
            SET_BIT(ADCSRA, ADCSRA_ADIE);
    244e:	a6 e2       	ldi	r26, 0x26	; 38
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e6 e2       	ldi	r30, 0x26	; 38
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	88 60       	ori	r24, 0x08	; 8
    245a:	8c 93       	st	X, r24

        default:
            /*Do Noting*/
        break;
    }
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <ADC_u8StartConversionSynchronous>:

// Post-buid Channel Selection 
u8 ADC_u8StartConversionSynchronous(u8 Copy_u8ChannelNumber) // Polling Mechanism (Synchronous or Blocking)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <ADC_u8StartConversionSynchronous+0x6>
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8DigitalValue;

    /* Set channle of ADC */
    ADMUX &= CHANNEL_SELECTION_MASK;
    2474:	a7 e2       	ldi	r26, 0x27	; 39
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e7 e2       	ldi	r30, 0x27	; 39
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	80 7e       	andi	r24, 0xE0	; 224
    2480:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ChannelNumber;
    2482:	a7 e2       	ldi	r26, 0x27	; 39
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e7 e2       	ldi	r30, 0x27	; 39
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	90 81       	ld	r25, Z
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	89 2b       	or	r24, r25
    2490:	8c 93       	st	X, r24

    /* Start Conversion */
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2492:	a6 e2       	ldi	r26, 0x26	; 38
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e6 e2       	ldi	r30, 0x26	; 38
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	80 64       	ori	r24, 0x40	; 64
    249e:	8c 93       	st	X, r24

    /* Polling (busy wait) till flag is raised */
    while(GET_BIT(ADCSRA, ADCSRA_ADIF) == FALSE);
    24a0:	e6 e2       	ldi	r30, 0x26	; 38
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	82 95       	swap	r24
    24a8:	8f 70       	andi	r24, 0x0F	; 15
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	81 70       	andi	r24, 0x01	; 1
    24b0:	90 70       	andi	r25, 0x00	; 0
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	a9 f3       	breq	.-22     	; 0x24a0 <ADC_u8StartConversionSynchronous+0x38>

    /* Clear The Flag */
    SET_BIT(ADCSRA, ADCSRA_ADIF);
    24b6:	a6 e2       	ldi	r26, 0x26	; 38
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e6 e2       	ldi	r30, 0x26	; 38
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	80 61       	ori	r24, 0x10	; 16
    24c2:	8c 93       	st	X, r24

    /* Check For Left or Right Adjust */
    #if ADC_ADJUST_RESULT == LEFT_ADJUST
        Local_u8DigitalValue = ADCH;
    24c4:	e5 e2       	ldi	r30, 0x25	; 37
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	89 83       	std	Y+1, r24	; 0x01
    #elif ADC_ADJUST_RESULT == RIGHT_ADJUST
        Local_u8DigitalValue = ADCL;
    #endif

    /* Return The Digital Value */
    return Local_u8DigitalValue;
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <ADC_u8StartConversionAsynchronous>:

void ADC_u8StartConversionAsynchronous(u8 Copy_u8ChannelNumber, void (*NotifiFunction)(void)) // Polling Mechanism (Asynchronous)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <ADC_u8StartConversionAsynchronous+0x6>
    24de:	0f 92       	push	r0
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	7b 83       	std	Y+3, r23	; 0x03
    24e8:	6a 83       	std	Y+2, r22	; 0x02
    /* Set channle of ADC */
    ADMUX &= CHANNEL_SELECTION_MASK;
    24ea:	a7 e2       	ldi	r26, 0x27	; 39
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e7 e2       	ldi	r30, 0x27	; 39
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	80 7e       	andi	r24, 0xE0	; 224
    24f6:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ChannelNumber;
    24f8:	a7 e2       	ldi	r26, 0x27	; 39
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e7 e2       	ldi	r30, 0x27	; 39
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	90 81       	ld	r25, Z
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	89 2b       	or	r24, r25
    2506:	8c 93       	st	X, r24

    /* Set Callback Function in the Global Pointer to Function */
    ADC_pvoidNotifiFunction = NotifiFunction;
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	90 93 7b 01 	sts	0x017B, r25
    2510:	80 93 7a 01 	sts	0x017A, r24

    /* Start Conversion */
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2514:	a6 e2       	ldi	r26, 0x26	; 38
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e6 e2       	ldi	r30, 0x26	; 38
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	80 64       	ori	r24, 0x40	; 64
    2520:	8c 93       	st	X, r24
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    252e:	1f 92       	push	r1
    2530:	0f 92       	push	r0
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	0f 92       	push	r0
    2536:	11 24       	eor	r1, r1
    2538:	2f 93       	push	r18
    253a:	3f 93       	push	r19
    253c:	4f 93       	push	r20
    253e:	5f 93       	push	r21
    2540:	6f 93       	push	r22
    2542:	7f 93       	push	r23
    2544:	8f 93       	push	r24
    2546:	9f 93       	push	r25
    2548:	af 93       	push	r26
    254a:	bf 93       	push	r27
    254c:	ef 93       	push	r30
    254e:	ff 93       	push	r31
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    ADC_voidInterruptControl(DISABLE);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 09 12 	call	0x2412	; 0x2412 <ADC_voidInterruptControl>
    
    ADC_u8DigitalValue = ADCH;
    255e:	e5 e2       	ldi	r30, 0x25	; 37
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	80 93 7f 01 	sts	0x017F, r24

    if (ADC_pvoidNotifiFunction != NULL)
    2568:	80 91 7a 01 	lds	r24, 0x017A
    256c:	90 91 7b 01 	lds	r25, 0x017B
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	29 f0       	breq	.+10     	; 0x257e <__vector_16+0x50>
    {
        ADC_pvoidNotifiFunction();
    2574:	e0 91 7a 01 	lds	r30, 0x017A
    2578:	f0 91 7b 01 	lds	r31, 0x017B
    257c:	09 95       	icall
    }
    else
    {
        /* Do Nothing */
    }
    ADC_voidInterruptControl(ENABLE);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	0e 94 09 12 	call	0x2412	; 0x2412 <ADC_voidInterruptControl>
}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	ff 91       	pop	r31
    258a:	ef 91       	pop	r30
    258c:	bf 91       	pop	r27
    258e:	af 91       	pop	r26
    2590:	9f 91       	pop	r25
    2592:	8f 91       	pop	r24
    2594:	7f 91       	pop	r23
    2596:	6f 91       	pop	r22
    2598:	5f 91       	pop	r21
    259a:	4f 91       	pop	r20
    259c:	3f 91       	pop	r19
    259e:	2f 91       	pop	r18
    25a0:	0f 90       	pop	r0
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	0f 90       	pop	r0
    25a6:	1f 90       	pop	r1
    25a8:	18 95       	reti

000025aa <HLED_voidLedInit>:
/*****************************************************************
 ***********FUNCTION IMPLEMENTATION*******************************
 ***************************************************************/

void HLED_voidLedInit(LED_t* LedOBJ)
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <HLED_voidLedInit+0x6>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection (LedOBJ->LED_PORT , LedOBJ->LED_PIN , OUPUT);
    25b8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ba:	fa 81       	ldd	r31, Y+2	; 0x02
    25bc:	80 81       	ld	r24, Z
    25be:	e9 81       	ldd	r30, Y+1	; 0x01
    25c0:	fa 81       	ldd	r31, Y+2	; 0x02
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	69 2f       	mov	r22, r25
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <MDIO_voidSetPinDirection>
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <HLED_voidTurnOnLed>:
void HLED_voidTurnOnLed(LED_t* LedOBJ)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <HLED_voidTurnOnLed+0x6>
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue (LedOBJ->LED_PORT  , LedOBJ->LED_PIN , HIGH);
    25e4:	e9 81       	ldd	r30, Y+1	; 0x01
    25e6:	fa 81       	ldd	r31, Y+2	; 0x02
    25e8:	80 81       	ld	r24, Z
    25ea:	e9 81       	ldd	r30, Y+1	; 0x01
    25ec:	fa 81       	ldd	r31, Y+2	; 0x02
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	69 2f       	mov	r22, r25
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <HLED_voidTurnOffLed>:
void HLED_voidTurnOffLed(LED_t * LedOBJ)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <HLED_voidTurnOffLed+0x6>
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue (LedOBJ->LED_PORT  , LedOBJ->LED_PIN , LOW);
    2610:	e9 81       	ldd	r30, Y+1	; 0x01
    2612:	fa 81       	ldd	r31, Y+2	; 0x02
    2614:	80 81       	ld	r24, Z
    2616:	e9 81       	ldd	r30, Y+1	; 0x01
    2618:	fa 81       	ldd	r31, Y+2	; 0x02
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	69 2f       	mov	r22, r25
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
}
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <HLED_voidToggleLed>:
void HLED_voidToggleLed(LED_t* LedOBJ)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <HLED_voidToggleLed+0x6>
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidTogglePin(LedOBJ->LED_PORT , LedOBJ->LED_PIN );
    263c:	e9 81       	ldd	r30, Y+1	; 0x01
    263e:	fa 81       	ldd	r31, Y+2	; 0x02
    2640:	80 81       	ld	r24, Z
    2642:	e9 81       	ldd	r30, Y+1	; 0x01
    2644:	fa 81       	ldd	r31, Y+2	; 0x02
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	69 2f       	mov	r22, r25
    264a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <MDIO_voidTogglePin>
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <HLCD_voidInit>:

/*****************************************************************
 ***********FUNCTION IMPLEMENTATION*******************************
 ****************************************************************/
void HLCD_voidInit(void)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	2e 97       	sbiw	r28, 0x0e	; 14
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
	#if LCD_INIT_MODE == EIGHT_BIT_MODE
		/**intialize data port**/
		MDIO_voidSetPortSpecificDirection(LCD_DATA_PORT,LCD_ALL_OUTPUT);
    266c:	84 e0       	ldi	r24, 0x04	; 4
    266e:	6f ef       	ldi	r22, 0xFF	; 255
    2670:	0e 94 0c 11 	call	0x2218	; 0x2218 <MDIO_voidSetPortSpecificDirection>
		/**initialize control pins as output**/
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_RS_PIN,OUPUT);
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	61 e0       	ldi	r22, 0x01	; 1
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_EN_PIN,OUPUT);
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	62 e0       	ldi	r22, 0x02	; 2
    2682:	41 e0       	ldi	r20, 0x01	; 1
    2684:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_RW_PIN,OUPUT);
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	41 e0       	ldi	r20, 0x01	; 1
    268e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <MDIO_voidSetPinDirection>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e2       	ldi	r26, 0x20	; 32
    2698:	b2 e4       	ldi	r27, 0x42	; 66
    269a:	8b 87       	std	Y+11, r24	; 0x0b
    269c:	9c 87       	std	Y+12, r25	; 0x0c
    269e:	ad 87       	std	Y+13, r26	; 0x0d
    26a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a ef       	ldi	r20, 0xFA	; 250
    26b0:	54 e4       	ldi	r21, 0x44	; 68
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8f 83       	std	Y+7, r24	; 0x07
    26bc:	98 87       	std	Y+8, r25	; 0x08
    26be:	a9 87       	std	Y+9, r26	; 0x09
    26c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e8       	ldi	r20, 0x80	; 128
    26d0:	5f e3       	ldi	r21, 0x3F	; 63
    26d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d6:	88 23       	and	r24, r24
    26d8:	2c f4       	brge	.+10     	; 0x26e4 <HLCD_voidInit+0x8c>
		__ticks = 1;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	3f c0       	rjmp	.+126    	; 0x2762 <HLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	3f ef       	ldi	r19, 0xFF	; 255
    26f0:	4f e7       	ldi	r20, 0x7F	; 127
    26f2:	57 e4       	ldi	r21, 0x47	; 71
    26f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f8:	18 16       	cp	r1, r24
    26fa:	4c f5       	brge	.+82     	; 0x274e <HLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e2       	ldi	r20, 0x20	; 32
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <HLCD_voidInit+0xec>
    2726:	88 ec       	ldi	r24, 0xC8	; 200
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <HLCD_voidInit+0xda>
    2736:	9c 83       	std	Y+4, r25	; 0x04
    2738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	9e 81       	ldd	r25, Y+6	; 0x06
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	69 f7       	brne	.-38     	; 0x2726 <HLCD_voidInit+0xce>
    274c:	14 c0       	rjmp	.+40     	; 0x2776 <HLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <HLCD_voidInit+0x116>
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
		/**pooling for 40 seconds**/
		_delay_ms(40);

		/**Send Function Set Command**/
		HLCD_voidSendCommand(FUNCTION_SET_CMD);
    2776:	88 e3       	ldi	r24, 0x38	; 56
    2778:	0e 94 cd 13 	call	0x279a	; 0x279a <HLCD_voidSendCommand>
		/**Send Display On/Off Control Command**/
		HLCD_voidSendCommand(DISPLAY_ON_OFF_CMD);
    277c:	8f e0       	ldi	r24, 0x0F	; 15
    277e:	0e 94 cd 13 	call	0x279a	; 0x279a <HLCD_voidSendCommand>
		/**Send Display Clear Command**/
		HLCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	0e 94 cd 13 	call	0x279a	; 0x279a <HLCD_voidSendCommand>
			// task
		}
	#else
        #error("LCD_INIT_MODE Configuration Error")
	#endif
}
    2788:	2e 96       	adiw	r28, 0x0e	; 14
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <HLCD_voidSendCommand>:
static void HLCD_voidSendCommand (u8 Copy_u8Command)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	2f 97       	sbiw	r28, 0x0f	; 15
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	8f 87       	std	Y+15, r24	; 0x0f
	// Clear The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOW);
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
	// Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
    // Set The Command On The Data/Command Port
	MDIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    27c4:	84 e0       	ldi	r24, 0x04	; 4
    27c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    27c8:	0e 94 4e 11 	call	0x229c	; 0x229c <MDIO_voidSetPortValue>

	/****SEND  ENABLE PULSE *****/
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	62 e0       	ldi	r22, 0x02	; 2
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
	/*HIGH for 2 ms*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,HIGH);
    27d6:	82 e0       	ldi	r24, 0x02	; 2
    27d8:	62 e0       	ldi	r22, 0x02	; 2
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e0       	ldi	r26, 0x00	; 0
    27e6:	b0 e4       	ldi	r27, 0x40	; 64
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
    27ea:	9c 87       	std	Y+12, r25	; 0x0c
    27ec:	ad 87       	std	Y+13, r26	; 0x0d
    27ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8f 83       	std	Y+7, r24	; 0x07
    280a:	98 87       	std	Y+8, r25	; 0x08
    280c:	a9 87       	std	Y+9, r26	; 0x09
    280e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <HLCD_voidSendCommand+0x98>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <HLCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <HLCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <HLCD_voidSendCommand+0xf8>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <HLCD_voidSendCommand+0xe6>
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <HLCD_voidSendCommand+0xda>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <HLCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <HLCD_voidSendCommand+0x122>
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	62 e0       	ldi	r22, 0x02	; 2
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
}
    28ce:	2f 96       	adiw	r28, 0x0f	; 15
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	2f 97       	sbiw	r28, 0x0f	; 15
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	8f 87       	std	Y+15, r24	; 0x0f
	// Set The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,HIGH);
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	61 e0       	ldi	r22, 0x01	; 1
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
	// Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
    // Set The Command On The Data/Command Port
	MDIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    290a:	84 e0       	ldi	r24, 0x04	; 4
    290c:	6f 85       	ldd	r22, Y+15	; 0x0f
    290e:	0e 94 4e 11 	call	0x229c	; 0x229c <MDIO_voidSetPortValue>

	/****SEND  ENABLE PULSE *****/
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	62 e0       	ldi	r22, 0x02	; 2
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
	/*HIGH for 2 ms*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,HIGH);
    291c:	82 e0       	ldi	r24, 0x02	; 2
    291e:	62 e0       	ldi	r22, 0x02	; 2
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e4       	ldi	r27, 0x40	; 64
    292e:	8b 87       	std	Y+11, r24	; 0x0b
    2930:	9c 87       	std	Y+12, r25	; 0x0c
    2932:	ad 87       	std	Y+13, r26	; 0x0d
    2934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2936:	6b 85       	ldd	r22, Y+11	; 0x0b
    2938:	7c 85       	ldd	r23, Y+12	; 0x0c
    293a:	8d 85       	ldd	r24, Y+13	; 0x0d
    293c:	9e 85       	ldd	r25, Y+14	; 0x0e
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	4a ef       	ldi	r20, 0xFA	; 250
    2944:	54 e4       	ldi	r21, 0x44	; 68
    2946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	8f 83       	std	Y+7, r24	; 0x07
    2950:	98 87       	std	Y+8, r25	; 0x08
    2952:	a9 87       	std	Y+9, r26	; 0x09
    2954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e8       	ldi	r20, 0x80	; 128
    2964:	5f e3       	ldi	r21, 0x3F	; 63
    2966:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    296a:	88 23       	and	r24, r24
    296c:	2c f4       	brge	.+10     	; 0x2978 <HLCD_voidSendData+0x98>
		__ticks = 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9e 83       	std	Y+6, r25	; 0x06
    2974:	8d 83       	std	Y+5, r24	; 0x05
    2976:	3f c0       	rjmp	.+126    	; 0x29f6 <HLCD_voidSendData+0x116>
	else if (__tmp > 65535)
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	3f ef       	ldi	r19, 0xFF	; 255
    2984:	4f e7       	ldi	r20, 0x7F	; 127
    2986:	57 e4       	ldi	r21, 0x47	; 71
    2988:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    298c:	18 16       	cp	r1, r24
    298e:	4c f5       	brge	.+82     	; 0x29e2 <HLCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2990:	6b 85       	ldd	r22, Y+11	; 0x0b
    2992:	7c 85       	ldd	r23, Y+12	; 0x0c
    2994:	8d 85       	ldd	r24, Y+13	; 0x0d
    2996:	9e 85       	ldd	r25, Y+14	; 0x0e
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e2       	ldi	r20, 0x20	; 32
    299e:	51 e4       	ldi	r21, 0x41	; 65
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	0f c0       	rjmp	.+30     	; 0x29d8 <HLCD_voidSendData+0xf8>
    29ba:	88 ec       	ldi	r24, 0xC8	; 200
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	9c 81       	ldd	r25, Y+4	; 0x04
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <HLCD_voidSendData+0xe6>
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	69 f7       	brne	.-38     	; 0x29ba <HLCD_voidSendData+0xda>
    29e0:	14 c0       	rjmp	.+40     	; 0x2a0a <HLCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <HLCD_voidSendData+0x122>
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	62 e0       	ldi	r22, 0x02	; 2
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <MDIO_voidSetPinValue>

}
    2a14:	2f 96       	adiw	r28, 0x0f	; 15
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	0e 94 cd 13 	call	0x279a	; 0x279a <HLCD_voidSendCommand>
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <HLCD_voidGoToXY>:

/****************NEW FUNCTIONS***********************/

void HLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <HLCD_voidGoToXY+0x6>
    2a40:	0f 92       	push	r0
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	8a 83       	std	Y+2, r24	; 0x02
    2a48:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8CharacterAddress = 0;
    2a4a:	19 82       	std	Y+1, r1	; 0x01
    /*Calculate The Address Of The Character On LCD*/
    if(Copy_u8XPos == 0)
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	88 23       	and	r24, r24
    2a50:	19 f4       	brne	.+6      	; 0x2a58 <HLCD_voidGoToXY+0x1e>
    {
        // @ x = 0 -> Address = Y-Position
        Local_u8CharacterAddress = Copy_u8YPos;
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <HLCD_voidGoToXY+0x2a>
    }
    else if (Copy_u8XPos == 1)
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	19 f4       	brne	.+6      	; 0x2a64 <HLCD_voidGoToXY+0x2a>
    {
        // @ x = 1 -> Address = Y-Position + 0x40
        Local_u8CharacterAddress = Copy_u8YPos + 0x40;
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	80 5c       	subi	r24, 0xC0	; 192
    2a62:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        // Raise an error
    }
    /*Set The 7th bit in the address variable*/
    SET_BIT(Local_u8CharacterAddress, 7);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	80 68       	ori	r24, 0x80	; 128
    2a68:	89 83       	std	Y+1, r24	; 0x01
    /*Send the address variable as a command*/
    HLCD_voidSendCommand(Local_u8CharacterAddress);
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	0e 94 cd 13 	call	0x279a	; 0x279a <HLCD_voidSendCommand>
}
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <HLCD_voidSendString>:
void HLCD_voidSendString (u8 *Copy_pu8StringArray)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <HLCD_voidSendString+0x6>
    2a82:	0f 92       	push	r0
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	9b 83       	std	Y+3, r25	; 0x03
    2a8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_s8LoopIterator = 0 ;
    2a8c:	19 82       	std	Y+1, r1	; 0x01
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <HLCD_voidSendString+0x32>
	while (Copy_pu8StringArray[Local_s8LoopIterator]!= '\0')
	{
		HLCD_voidSendData(Copy_pu8StringArray[Local_s8LoopIterator++]);
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	e2 0f       	add	r30, r18
    2a9e:	f3 1f       	adc	r31, r19
    2aa0:	90 81       	ld	r25, Z
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	89 2f       	mov	r24, r25
    2aaa:	0e 94 70 14 	call	0x28e0	; 0x28e0 <HLCD_voidSendData>
    HLCD_voidSendCommand(Local_u8CharacterAddress);
}
void HLCD_voidSendString (u8 *Copy_pu8StringArray)
{
	u8 Local_s8LoopIterator = 0 ;
	while (Copy_pu8StringArray[Local_s8LoopIterator]!= '\0')
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e2 0f       	add	r30, r18
    2abc:	f3 1f       	adc	r31, r19
    2abe:	80 81       	ld	r24, Z
    2ac0:	88 23       	and	r24, r24
    2ac2:	31 f7       	brne	.-52     	; 0x2a90 <HLCD_voidSendString+0x14>
	{
		HLCD_voidSendData(Copy_pu8StringArray[Local_s8LoopIterator++]);
	}
}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <HLCD_voidSendNumber>:
void HLCD_voidSendNumber (u32 Copy_u32Number)
{
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	2f 97       	sbiw	r28, 0x0f	; 15
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	6c 87       	std	Y+12, r22	; 0x0c
    2aea:	7d 87       	std	Y+13, r23	; 0x0d
    2aec:	8e 87       	std	Y+14, r24	; 0x0e
    2aee:	9f 87       	std	Y+15, r25	; 0x0f
	// assume number of 10 digits
	u8 Local_u8ArrayNumber[10];
	s8 Local_s8LoopIterator = 0 ;
    2af0:	19 82       	std	Y+1, r1	; 0x01
    2af2:	2f c0       	rjmp	.+94     	; 0x2b52 <HLCD_voidSendNumber+0x82>
	while (Copy_u32Number != 0 )
	{
		Local_u8ArrayNumber[Local_s8LoopIterator++] = Copy_u32Number%10;
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	08 2f       	mov	r16, r24
    2af8:	11 27       	eor	r17, r17
    2afa:	07 fd       	sbrc	r16, 7
    2afc:	10 95       	com	r17
    2afe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b00:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b02:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b04:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__udivmodsi4>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	02 96       	adiw	r24, 0x02	; 2
    2b20:	fc 01       	movw	r30, r24
    2b22:	e0 0f       	add	r30, r16
    2b24:	f1 1f       	adc	r31, r17
    2b26:	20 83       	st	Z, r18
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	8f 5f       	subi	r24, 0xFF	; 255
    2b2c:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Number/=10;
    2b2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b30:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b32:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b34:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b36:	2a e0       	ldi	r18, 0x0A	; 10
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__udivmodsi4>
    2b46:	da 01       	movw	r26, r20
    2b48:	c9 01       	movw	r24, r18
    2b4a:	8c 87       	std	Y+12, r24	; 0x0c
    2b4c:	9d 87       	std	Y+13, r25	; 0x0d
    2b4e:	ae 87       	std	Y+14, r26	; 0x0e
    2b50:	bf 87       	std	Y+15, r27	; 0x0f
void HLCD_voidSendNumber (u32 Copy_u32Number)
{
	// assume number of 10 digits
	u8 Local_u8ArrayNumber[10];
	s8 Local_s8LoopIterator = 0 ;
	while (Copy_u32Number != 0 )
    2b52:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b54:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b56:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b58:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	a1 05       	cpc	r26, r1
    2b5e:	b1 05       	cpc	r27, r1
    2b60:	49 f6       	brne	.-110    	; 0x2af4 <HLCD_voidSendNumber+0x24>
	{
		Local_u8ArrayNumber[Local_s8LoopIterator++] = Copy_u32Number%10;
		Copy_u32Number/=10;
	}
	Local_s8LoopIterator-- ;
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	81 50       	subi	r24, 0x01	; 1
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	13 c0       	rjmp	.+38     	; 0x2b90 <HLCD_voidSendNumber+0xc0>
	while (Local_s8LoopIterator >= 0)
	{
		HLCD_voidSendData (Local_u8ArrayNumber[Local_s8LoopIterator--] + '0');
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	33 27       	eor	r19, r19
    2b70:	27 fd       	sbrc	r18, 7
    2b72:	30 95       	com	r19
    2b74:	ce 01       	movw	r24, r28
    2b76:	02 96       	adiw	r24, 0x02	; 2
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e2 0f       	add	r30, r18
    2b7c:	f3 1f       	adc	r31, r19
    2b7e:	80 81       	ld	r24, Z
    2b80:	98 2f       	mov	r25, r24
    2b82:	90 5d       	subi	r25, 0xD0	; 208
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	81 50       	subi	r24, 0x01	; 1
    2b88:	89 83       	std	Y+1, r24	; 0x01
    2b8a:	89 2f       	mov	r24, r25
    2b8c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <HLCD_voidSendData>
	{
		Local_u8ArrayNumber[Local_s8LoopIterator++] = Copy_u32Number%10;
		Copy_u32Number/=10;
	}
	Local_s8LoopIterator-- ;
	while (Local_s8LoopIterator >= 0)
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	88 23       	and	r24, r24
    2b94:	54 f7       	brge	.-44     	; 0x2b6a <HLCD_voidSendNumber+0x9a>
	{
		HLCD_voidSendData (Local_u8ArrayNumber[Local_s8LoopIterator--] + '0');
	}
}
    2b96:	2f 96       	adiw	r28, 0x0f	; 15
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	08 95       	ret

00002bac <HLCD_voidSendCustomCharacter>:

void HLCD_voidSendCustomCharacter (u8 *Copy_pu8CharectarArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	27 97       	sbiw	r28, 0x07	; 7
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	9c 83       	std	Y+4, r25	; 0x04
    2bc2:	8b 83       	std	Y+3, r24	; 0x03
    2bc4:	6d 83       	std	Y+5, r22	; 0x05
    2bc6:	4e 83       	std	Y+6, r20	; 0x06
    2bc8:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_s8LoopIterator ;
	u8 Local_u8CGRAMAddress = 0 ;
    2bca:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
    2bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bce:	88 2f       	mov	r24, r24
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT (Local_u8CGRAMAddress , 6);
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	80 64       	ori	r24, 0x40	; 64
    2be4:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand (Local_u8CGRAMAddress);
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	0e 94 cd 13 	call	0x279a	; 0x279a <HLCD_voidSendCommand>
	for (Local_s8LoopIterator=0 ; Local_s8LoopIterator < 8 ; Local_s8LoopIterator++)
    2bec:	1a 82       	std	Y+2, r1	; 0x02
    2bee:	0e c0       	rjmp	.+28     	; 0x2c0c <HLCD_voidSendCustomCharacter+0x60>
	{
		HLCD_voidSendData (Copy_pu8CharectarArray[Local_s8LoopIterator]);
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	e2 0f       	add	r30, r18
    2bfe:	f3 1f       	adc	r31, r19
    2c00:	80 81       	ld	r24, Z
    2c02:	0e 94 70 14 	call	0x28e0	; 0x28e0 <HLCD_voidSendData>
	u8 Local_u8CGRAMAddress = 0 ;

	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
	SET_BIT (Local_u8CGRAMAddress , 6);
	HLCD_voidSendCommand (Local_u8CGRAMAddress);
	for (Local_s8LoopIterator=0 ; Local_s8LoopIterator < 8 ; Local_s8LoopIterator++)
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	8f 5f       	subi	r24, 0xFF	; 255
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	88 30       	cpi	r24, 0x08	; 8
    2c10:	78 f3       	brcs	.-34     	; 0x2bf0 <HLCD_voidSendCustomCharacter+0x44>
	{
		HLCD_voidSendData (Copy_pu8CharectarArray[Local_s8LoopIterator]);
	}
	HLCD_voidGoToXY (Copy_u8XPosition,Copy_u8YPosition);
    2c12:	8e 81       	ldd	r24, Y+6	; 0x06
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
	HLCD_voidSendData (Copy_u8PatternNumber);
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <HLCD_voidSendData>
}
    2c20:	27 96       	adiw	r28, 0x07	; 7
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <BUTTON_voidInit>:
#include "BUTTON_private.h"
#include "BUTTON_config.h"


void BUTTON_voidInit(BUTTON_t* Copy_pBUTTON_t_Obj)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <BUTTON_voidInit+0x6>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection(Copy_pBUTTON_t_Obj->BUTTON_u8PORT, Copy_pBUTTON_t_Obj->BUTTON_u8PIN, INPUT);
    2c40:	e9 81       	ldd	r30, Y+1	; 0x01
    2c42:	fa 81       	ldd	r31, Y+2	; 0x02
    2c44:	80 81       	ld	r24, Z
    2c46:	e9 81       	ldd	r30, Y+1	; 0x01
    2c48:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	69 2f       	mov	r22, r25
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <MDIO_voidSetPinDirection>
}
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <BUTTON_u8Read>:

u8 BUTTON_u8Read(BUTTON_t* Copy_pBUTTON_t_Obj)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <BUTTON_u8Read+0x6>
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
	return MDIO_voidReadPinValue(Copy_pBUTTON_t_Obj->BUTTON_u8PORT, Copy_pBUTTON_t_Obj->BUTTON_u8PIN);
    2c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c70:	80 81       	ld	r24, Z
    2c72:	e9 81       	ldd	r30, Y+1	; 0x01
    2c74:	fa 81       	ldd	r31, Y+2	; 0x02
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	69 2f       	mov	r22, r25
    2c7a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <MDIO_voidReadPinValue>
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <main>:
#include "../HAL/LCD/LCD_int.h"

#if 1
// Name animation
void main(void)
{
    2c88:	0f 93       	push	r16
    2c8a:	1f 93       	push	r17
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	c0 57       	subi	r28, 0x70	; 112
    2c96:	d0 40       	sbci	r29, 0x00	; 0
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidInit();
    2ca2:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLCD_voidInit>
	while(1)
	{
		HLCD_voidGoToXY(1,0);
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    2cae:	80 e6       	ldi	r24, 0x60	; 96
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e3 59       	subi	r30, 0x93	; 147
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	aa e7       	ldi	r26, 0x7A	; 122
    2cc2:	b4 e4       	ldi	r27, 0x44	; 68
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	07 59       	subi	r16, 0x97	; 151
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e3 59       	subi	r30, 0x93	; 147
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a ef       	ldi	r20, 0xFA	; 250
    2ce6:	54 e4       	ldi	r21, 0x44	; 68
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 83       	st	Z, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	a2 83       	std	Z+2, r26	; 0x02
    2cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e7 59       	subi	r30, 0x97	; 151
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	44 f4       	brge	.+16     	; 0x2d28 <main+0xa0>
		__ticks = 1;
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e9 59       	subi	r30, 0x99	; 153
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	64 c0       	rjmp	.+200    	; 0x2df0 <main+0x168>
	else if (__tmp > 65535)
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e7 59       	subi	r30, 0x97	; 151
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	0c f0       	brlt	.+2      	; 0x2d48 <main+0xc0>
    2d46:	43 c0       	rjmp	.+134    	; 0x2dce <main+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e3 59       	subi	r30, 0x93	; 147
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8e 01       	movw	r16, r28
    2d68:	09 59       	subi	r16, 0x99	; 153
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	1f c0       	rjmp	.+62     	; 0x2dbe <main+0x136>
    2d80:	fe 01       	movw	r30, r28
    2d82:	eb 59       	subi	r30, 0x9B	; 155
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
    2d8e:	fe 01       	movw	r30, r28
    2d90:	eb 59       	subi	r30, 0x9B	; 155
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <main+0x110>
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	eb 59       	subi	r30, 0x9B	; 155
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	de 01       	movw	r26, r28
    2da8:	a9 59       	subi	r26, 0x99	; 153
    2daa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	e9 59       	subi	r30, 0x99	; 153
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	9c 93       	st	X, r25
    2dbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e9 59       	subi	r30, 0x99	; 153
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	d1 f6       	brne	.-76     	; 0x2d80 <main+0xf8>
    2dcc:	27 c0       	rjmp	.+78     	; 0x2e1c <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dce:	8e 01       	movw	r16, r28
    2dd0:	09 59       	subi	r16, 0x99	; 153
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e7 59       	subi	r30, 0x97	; 151
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	f8 01       	movw	r30, r16
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	de 01       	movw	r26, r28
    2df2:	ad 59       	subi	r26, 0x9D	; 157
    2df4:	bf 4f       	sbci	r27, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	e9 59       	subi	r30, 0x99	; 153
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	8d 93       	st	X+, r24
    2e02:	9c 93       	st	X, r25
    2e04:	fe 01       	movw	r30, r28
    2e06:	ed 59       	subi	r30, 0x9D	; 157
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <main+0x186>
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 59       	subi	r30, 0x9D	; 157
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    2e1c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>

		HLCD_voidGoToXY(0,0);
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    2e28:	80 e6       	ldi	r24, 0x60	; 96
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    2e30:	fe 01       	movw	r30, r28
    2e32:	e1 5a       	subi	r30, 0xA1	; 161
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	aa e7       	ldi	r26, 0x7A	; 122
    2e3c:	b4 e4       	ldi	r27, 0x44	; 68
    2e3e:	80 83       	st	Z, r24
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	a2 83       	std	Z+2, r26	; 0x02
    2e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	8e 01       	movw	r16, r28
    2e48:	05 5a       	subi	r16, 0xA5	; 165
    2e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e1 5a       	subi	r30, 0xA1	; 161
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a ef       	ldi	r20, 0xFA	; 250
    2e60:	54 e4       	ldi	r21, 0x44	; 68
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	80 83       	st	Z, r24
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	a2 83       	std	Z+2, r26	; 0x02
    2e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e74:	fe 01       	movw	r30, r28
    2e76:	e5 5a       	subi	r30, 0xA5	; 165
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	44 f4       	brge	.+16     	; 0x2ea2 <main+0x21a>
		__ticks = 1;
    2e92:	fe 01       	movw	r30, r28
    2e94:	e7 5a       	subi	r30, 0xA7	; 167
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
    2ea0:	64 c0       	rjmp	.+200    	; 0x2f6a <main+0x2e2>
	else if (__tmp > 65535)
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e5 5a       	subi	r30, 0xA5	; 165
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	3f ef       	ldi	r19, 0xFF	; 255
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	0c f0       	brlt	.+2      	; 0x2ec2 <main+0x23a>
    2ec0:	43 c0       	rjmp	.+134    	; 0x2f48 <main+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e1 5a       	subi	r30, 0xA1	; 161
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e2       	ldi	r20, 0x20	; 32
    2ed6:	51 e4       	ldi	r21, 0x41	; 65
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	8e 01       	movw	r16, r28
    2ee2:	07 5a       	subi	r16, 0xA7	; 167
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	f8 01       	movw	r30, r16
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
    2ef8:	1f c0       	rjmp	.+62     	; 0x2f38 <main+0x2b0>
    2efa:	fe 01       	movw	r30, r28
    2efc:	e9 5a       	subi	r30, 0xA9	; 169
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e9 5a       	subi	r30, 0xA9	; 169
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	91 81       	ldd	r25, Z+1	; 0x01
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <main+0x28a>
    2f16:	fe 01       	movw	r30, r28
    2f18:	e9 5a       	subi	r30, 0xA9	; 169
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f20:	de 01       	movw	r26, r28
    2f22:	a7 5a       	subi	r26, 0xA7	; 167
    2f24:	bf 4f       	sbci	r27, 0xFF	; 255
    2f26:	fe 01       	movw	r30, r28
    2f28:	e7 5a       	subi	r30, 0xA7	; 167
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	11 96       	adiw	r26, 0x01	; 1
    2f34:	9c 93       	st	X, r25
    2f36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e7 5a       	subi	r30, 0xA7	; 167
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	d1 f6       	brne	.-76     	; 0x2efa <main+0x272>
    2f46:	27 c0       	rjmp	.+78     	; 0x2f96 <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f48:	8e 01       	movw	r16, r28
    2f4a:	07 5a       	subi	r16, 0xA7	; 167
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e5 5a       	subi	r30, 0xA5	; 165
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	de 01       	movw	r26, r28
    2f6c:	ab 5a       	subi	r26, 0xAB	; 171
    2f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 5a       	subi	r30, 0xA7	; 167
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	8d 93       	st	X+, r24
    2f7c:	9c 93       	st	X, r25
    2f7e:	fe 01       	movw	r30, r28
    2f80:	eb 5a       	subi	r30, 0xAB	; 171
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <main+0x300>
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	eb 5a       	subi	r30, 0xAB	; 171
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    2f96:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>

		HLCD_voidGoToXY(0,4);
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	64 e0       	ldi	r22, 0x04	; 4
    2f9e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    2fa2:	80 e6       	ldi	r24, 0x60	; 96
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    2faa:	fe 01       	movw	r30, r28
    2fac:	ef 5a       	subi	r30, 0xAF	; 175
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	aa e7       	ldi	r26, 0x7A	; 122
    2fb6:	b4 e4       	ldi	r27, 0x44	; 68
    2fb8:	80 83       	st	Z, r24
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	a2 83       	std	Z+2, r26	; 0x02
    2fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	03 5b       	subi	r16, 0xB3	; 179
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ef 5a       	subi	r30, 0xAF	; 175
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a ef       	ldi	r20, 0xFA	; 250
    2fda:	54 e4       	ldi	r21, 0x44	; 68
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	80 83       	st	Z, r24
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	a2 83       	std	Z+2, r26	; 0x02
    2fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e3 5b       	subi	r30, 0xB3	; 179
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	5f e3       	ldi	r21, 0x3F	; 63
    3004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	44 f4       	brge	.+16     	; 0x301c <main+0x394>
		__ticks = 1;
    300c:	fe 01       	movw	r30, r28
    300e:	e5 5b       	subi	r30, 0xB5	; 181
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	64 c0       	rjmp	.+200    	; 0x30e4 <main+0x45c>
	else if (__tmp > 65535)
    301c:	fe 01       	movw	r30, r28
    301e:	e3 5b       	subi	r30, 0xB3	; 179
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	3f ef       	ldi	r19, 0xFF	; 255
    302e:	4f e7       	ldi	r20, 0x7F	; 127
    3030:	57 e4       	ldi	r21, 0x47	; 71
    3032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3036:	18 16       	cp	r1, r24
    3038:	0c f0       	brlt	.+2      	; 0x303c <main+0x3b4>
    303a:	43 c0       	rjmp	.+134    	; 0x30c2 <main+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303c:	fe 01       	movw	r30, r28
    303e:	ef 5a       	subi	r30, 0xAF	; 175
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	8e 01       	movw	r16, r28
    305c:	05 5b       	subi	r16, 0xB5	; 181
    305e:	1f 4f       	sbci	r17, 0xFF	; 255
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	f8 01       	movw	r30, r16
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	1f c0       	rjmp	.+62     	; 0x30b2 <main+0x42a>
    3074:	fe 01       	movw	r30, r28
    3076:	e7 5b       	subi	r30, 0xB7	; 183
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	88 ec       	ldi	r24, 0xC8	; 200
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	fe 01       	movw	r30, r28
    3084:	e7 5b       	subi	r30, 0xB7	; 183
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <main+0x404>
    3090:	fe 01       	movw	r30, r28
    3092:	e7 5b       	subi	r30, 0xB7	; 183
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309a:	de 01       	movw	r26, r28
    309c:	a5 5b       	subi	r26, 0xB5	; 181
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	e5 5b       	subi	r30, 0xB5	; 181
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	11 96       	adiw	r26, 0x01	; 1
    30ae:	9c 93       	st	X, r25
    30b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	fe 01       	movw	r30, r28
    30b4:	e5 5b       	subi	r30, 0xB5	; 181
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	d1 f6       	brne	.-76     	; 0x3074 <main+0x3ec>
    30c0:	27 c0       	rjmp	.+78     	; 0x3110 <main+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	8e 01       	movw	r16, r28
    30c4:	05 5b       	subi	r16, 0xB5	; 181
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e3 5b       	subi	r30, 0xB3	; 179
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	f8 01       	movw	r30, r16
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	de 01       	movw	r26, r28
    30e6:	a9 5b       	subi	r26, 0xB9	; 185
    30e8:	bf 4f       	sbci	r27, 0xFF	; 255
    30ea:	fe 01       	movw	r30, r28
    30ec:	e5 5b       	subi	r30, 0xB5	; 181
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	91 81       	ldd	r25, Z+1	; 0x01
    30f4:	8d 93       	st	X+, r24
    30f6:	9c 93       	st	X, r25
    30f8:	fe 01       	movw	r30, r28
    30fa:	e9 5b       	subi	r30, 0xB9	; 185
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <main+0x47a>
    3106:	fe 01       	movw	r30, r28
    3108:	e9 5b       	subi	r30, 0xB9	; 185
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    3110:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>

		HLCD_voidGoToXY(1,4);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	64 e0       	ldi	r22, 0x04	; 4
    3118:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    311c:	80 e6       	ldi	r24, 0x60	; 96
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    3124:	fe 01       	movw	r30, r28
    3126:	ed 5b       	subi	r30, 0xBD	; 189
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	aa e7       	ldi	r26, 0x7A	; 122
    3130:	b4 e4       	ldi	r27, 0x44	; 68
    3132:	80 83       	st	Z, r24
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	a2 83       	std	Z+2, r26	; 0x02
    3138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	8e 01       	movw	r16, r28
    313c:	01 5c       	subi	r16, 0xC1	; 193
    313e:	1f 4f       	sbci	r17, 0xFF	; 255
    3140:	fe 01       	movw	r30, r28
    3142:	ed 5b       	subi	r30, 0xBD	; 189
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a ef       	ldi	r20, 0xFA	; 250
    3154:	54 e4       	ldi	r21, 0x44	; 68
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	80 83       	st	Z, r24
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	a2 83       	std	Z+2, r26	; 0x02
    3166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3168:	fe 01       	movw	r30, r28
    316a:	ff 96       	adiw	r30, 0x3f	; 63
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e8       	ldi	r20, 0x80	; 128
    317a:	5f e3       	ldi	r21, 0x3F	; 63
    317c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3180:	88 23       	and	r24, r24
    3182:	2c f4       	brge	.+10     	; 0x318e <main+0x506>
		__ticks = 1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	9e af       	std	Y+62, r25	; 0x3e
    318a:	8d af       	std	Y+61, r24	; 0x3d
    318c:	46 c0       	rjmp	.+140    	; 0x321a <main+0x592>
	else if (__tmp > 65535)
    318e:	fe 01       	movw	r30, r28
    3190:	ff 96       	adiw	r30, 0x3f	; 63
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	3f ef       	ldi	r19, 0xFF	; 255
    319e:	4f e7       	ldi	r20, 0x7F	; 127
    31a0:	57 e4       	ldi	r21, 0x47	; 71
    31a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a6:	18 16       	cp	r1, r24
    31a8:	64 f5       	brge	.+88     	; 0x3202 <main+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31aa:	fe 01       	movw	r30, r28
    31ac:	ed 5b       	subi	r30, 0xBD	; 189
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	82 81       	ldd	r24, Z+2	; 0x02
    31b6:	93 81       	ldd	r25, Z+3	; 0x03
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e2       	ldi	r20, 0x20	; 32
    31be:	51 e4       	ldi	r21, 0x41	; 65
    31c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9e af       	std	Y+62, r25	; 0x3e
    31d6:	8d af       	std	Y+61, r24	; 0x3d
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <main+0x570>
    31da:	88 ec       	ldi	r24, 0xC8	; 200
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9c af       	std	Y+60, r25	; 0x3c
    31e0:	8b af       	std	Y+59, r24	; 0x3b
    31e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    31e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <main+0x55e>
    31ea:	9c af       	std	Y+60, r25	; 0x3c
    31ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    31f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	9e af       	std	Y+62, r25	; 0x3e
    31f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    31fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	69 f7       	brne	.-38     	; 0x31da <main+0x552>
    3200:	16 c0       	rjmp	.+44     	; 0x322e <main+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3202:	fe 01       	movw	r30, r28
    3204:	ff 96       	adiw	r30, 0x3f	; 63
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	9e af       	std	Y+62, r25	; 0x3e
    3218:	8d af       	std	Y+61, r24	; 0x3d
    321a:	8d ad       	ldd	r24, Y+61	; 0x3d
    321c:	9e ad       	ldd	r25, Y+62	; 0x3e
    321e:	9a af       	std	Y+58, r25	; 0x3a
    3220:	89 af       	std	Y+57, r24	; 0x39
    3222:	89 ad       	ldd	r24, Y+57	; 0x39
    3224:	9a ad       	ldd	r25, Y+58	; 0x3a
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <main+0x59e>
    322a:	9a af       	std	Y+58, r25	; 0x3a
    322c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    322e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>

		HLCD_voidGoToXY(1,8);
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	68 e0       	ldi	r22, 0x08	; 8
    3236:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    323a:	80 e6       	ldi	r24, 0x60	; 96
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	aa e7       	ldi	r26, 0x7A	; 122
    3248:	b4 e4       	ldi	r27, 0x44	; 68
    324a:	8d ab       	std	Y+53, r24	; 0x35
    324c:	9e ab       	std	Y+54, r25	; 0x36
    324e:	af ab       	std	Y+55, r26	; 0x37
    3250:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	6d a9       	ldd	r22, Y+53	; 0x35
    3254:	7e a9       	ldd	r23, Y+54	; 0x36
    3256:	8f a9       	ldd	r24, Y+55	; 0x37
    3258:	98 ad       	ldd	r25, Y+56	; 0x38
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a ef       	ldi	r20, 0xFA	; 250
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	89 ab       	std	Y+49, r24	; 0x31
    326c:	9a ab       	std	Y+50, r25	; 0x32
    326e:	ab ab       	std	Y+51, r26	; 0x33
    3270:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3272:	69 a9       	ldd	r22, Y+49	; 0x31
    3274:	7a a9       	ldd	r23, Y+50	; 0x32
    3276:	8b a9       	ldd	r24, Y+51	; 0x33
    3278:	9c a9       	ldd	r25, Y+52	; 0x34
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <main+0x60c>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	98 ab       	std	Y+48, r25	; 0x30
    3290:	8f a7       	std	Y+47, r24	; 0x2f
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <main+0x68a>
	else if (__tmp > 65535)
    3294:	69 a9       	ldd	r22, Y+49	; 0x31
    3296:	7a a9       	ldd	r23, Y+50	; 0x32
    3298:	8b a9       	ldd	r24, Y+51	; 0x33
    329a:	9c a9       	ldd	r25, Y+52	; 0x34
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <main+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	6d a9       	ldd	r22, Y+53	; 0x35
    32ae:	7e a9       	ldd	r23, Y+54	; 0x36
    32b0:	8f a9       	ldd	r24, Y+55	; 0x37
    32b2:	98 ad       	ldd	r25, Y+56	; 0x38
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	98 ab       	std	Y+48, r25	; 0x30
    32d2:	8f a7       	std	Y+47, r24	; 0x2f
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <main+0x66c>
    32d6:	88 ec       	ldi	r24, 0xC8	; 200
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9e a7       	std	Y+46, r25	; 0x2e
    32dc:	8d a7       	std	Y+45, r24	; 0x2d
    32de:	8d a5       	ldd	r24, Y+45	; 0x2d
    32e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <main+0x65a>
    32e6:	9e a7       	std	Y+46, r25	; 0x2e
    32e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ec:	98 a9       	ldd	r25, Y+48	; 0x30
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	98 ab       	std	Y+48, r25	; 0x30
    32f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f6:	98 a9       	ldd	r25, Y+48	; 0x30
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <main+0x64e>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <main+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3300:	7a a9       	ldd	r23, Y+50	; 0x32
    3302:	8b a9       	ldd	r24, Y+51	; 0x33
    3304:	9c a9       	ldd	r25, Y+52	; 0x34
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	98 ab       	std	Y+48, r25	; 0x30
    3310:	8f a7       	std	Y+47, r24	; 0x2f
    3312:	8f a5       	ldd	r24, Y+47	; 0x2f
    3314:	98 a9       	ldd	r25, Y+48	; 0x30
    3316:	9c a7       	std	Y+44, r25	; 0x2c
    3318:	8b a7       	std	Y+43, r24	; 0x2b
    331a:	8b a5       	ldd	r24, Y+43	; 0x2b
    331c:	9c a5       	ldd	r25, Y+44	; 0x2c
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <main+0x696>
    3322:	9c a7       	std	Y+44, r25	; 0x2c
    3324:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    3326:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>

		HLCD_voidGoToXY(0,8);
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	68 e0       	ldi	r22, 0x08	; 8
    332e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    3332:	80 e6       	ldi	r24, 0x60	; 96
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	aa e7       	ldi	r26, 0x7A	; 122
    3340:	b4 e4       	ldi	r27, 0x44	; 68
    3342:	8f a3       	std	Y+39, r24	; 0x27
    3344:	98 a7       	std	Y+40, r25	; 0x28
    3346:	a9 a7       	std	Y+41, r26	; 0x29
    3348:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334a:	6f a1       	ldd	r22, Y+39	; 0x27
    334c:	78 a5       	ldd	r23, Y+40	; 0x28
    334e:	89 a5       	ldd	r24, Y+41	; 0x29
    3350:	9a a5       	ldd	r25, Y+42	; 0x2a
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	4a ef       	ldi	r20, 0xFA	; 250
    3358:	54 e4       	ldi	r21, 0x44	; 68
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	8b a3       	std	Y+35, r24	; 0x23
    3364:	9c a3       	std	Y+36, r25	; 0x24
    3366:	ad a3       	std	Y+37, r26	; 0x25
    3368:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    336a:	6b a1       	ldd	r22, Y+35	; 0x23
    336c:	7c a1       	ldd	r23, Y+36	; 0x24
    336e:	8d a1       	ldd	r24, Y+37	; 0x25
    3370:	9e a1       	ldd	r25, Y+38	; 0x26
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e8       	ldi	r20, 0x80	; 128
    3378:	5f e3       	ldi	r21, 0x3F	; 63
    337a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    337e:	88 23       	and	r24, r24
    3380:	2c f4       	brge	.+10     	; 0x338c <main+0x704>
		__ticks = 1;
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9a a3       	std	Y+34, r25	; 0x22
    3388:	89 a3       	std	Y+33, r24	; 0x21
    338a:	3f c0       	rjmp	.+126    	; 0x340a <main+0x782>
	else if (__tmp > 65535)
    338c:	6b a1       	ldd	r22, Y+35	; 0x23
    338e:	7c a1       	ldd	r23, Y+36	; 0x24
    3390:	8d a1       	ldd	r24, Y+37	; 0x25
    3392:	9e a1       	ldd	r25, Y+38	; 0x26
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	3f ef       	ldi	r19, 0xFF	; 255
    3398:	4f e7       	ldi	r20, 0x7F	; 127
    339a:	57 e4       	ldi	r21, 0x47	; 71
    339c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a0:	18 16       	cp	r1, r24
    33a2:	4c f5       	brge	.+82     	; 0x33f6 <main+0x76e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a4:	6f a1       	ldd	r22, Y+39	; 0x27
    33a6:	78 a5       	ldd	r23, Y+40	; 0x28
    33a8:	89 a5       	ldd	r24, Y+41	; 0x29
    33aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e2       	ldi	r20, 0x20	; 32
    33b2:	51 e4       	ldi	r21, 0x41	; 65
    33b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	9a a3       	std	Y+34, r25	; 0x22
    33ca:	89 a3       	std	Y+33, r24	; 0x21
    33cc:	0f c0       	rjmp	.+30     	; 0x33ec <main+0x764>
    33ce:	88 ec       	ldi	r24, 0xC8	; 200
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	98 a3       	std	Y+32, r25	; 0x20
    33d4:	8f 8f       	std	Y+31, r24	; 0x1f
    33d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33d8:	98 a1       	ldd	r25, Y+32	; 0x20
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <main+0x752>
    33de:	98 a3       	std	Y+32, r25	; 0x20
    33e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e2:	89 a1       	ldd	r24, Y+33	; 0x21
    33e4:	9a a1       	ldd	r25, Y+34	; 0x22
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	9a a3       	std	Y+34, r25	; 0x22
    33ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ec:	89 a1       	ldd	r24, Y+33	; 0x21
    33ee:	9a a1       	ldd	r25, Y+34	; 0x22
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	69 f7       	brne	.-38     	; 0x33ce <main+0x746>
    33f4:	14 c0       	rjmp	.+40     	; 0x341e <main+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f6:	6b a1       	ldd	r22, Y+35	; 0x23
    33f8:	7c a1       	ldd	r23, Y+36	; 0x24
    33fa:	8d a1       	ldd	r24, Y+37	; 0x25
    33fc:	9e a1       	ldd	r25, Y+38	; 0x26
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9a a3       	std	Y+34, r25	; 0x22
    3408:	89 a3       	std	Y+33, r24	; 0x21
    340a:	89 a1       	ldd	r24, Y+33	; 0x21
    340c:	9a a1       	ldd	r25, Y+34	; 0x22
    340e:	9e 8f       	std	Y+30, r25	; 0x1e
    3410:	8d 8f       	std	Y+29, r24	; 0x1d
    3412:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3414:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <main+0x78e>
    341a:	9e 8f       	std	Y+30, r25	; 0x1e
    341c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    341e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>

		HLCD_voidGoToXY(0,12);
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	6c e0       	ldi	r22, 0x0C	; 12
    3426:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    342a:	80 e6       	ldi	r24, 0x60	; 96
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	aa e7       	ldi	r26, 0x7A	; 122
    3438:	b4 e4       	ldi	r27, 0x44	; 68
    343a:	89 8f       	std	Y+25, r24	; 0x19
    343c:	9a 8f       	std	Y+26, r25	; 0x1a
    343e:	ab 8f       	std	Y+27, r26	; 0x1b
    3440:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3442:	69 8d       	ldd	r22, Y+25	; 0x19
    3444:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	4a ef       	ldi	r20, 0xFA	; 250
    3450:	54 e4       	ldi	r21, 0x44	; 68
    3452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	8d 8b       	std	Y+21, r24	; 0x15
    345c:	9e 8b       	std	Y+22, r25	; 0x16
    345e:	af 8b       	std	Y+23, r26	; 0x17
    3460:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3462:	6d 89       	ldd	r22, Y+21	; 0x15
    3464:	7e 89       	ldd	r23, Y+22	; 0x16
    3466:	8f 89       	ldd	r24, Y+23	; 0x17
    3468:	98 8d       	ldd	r25, Y+24	; 0x18
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e8       	ldi	r20, 0x80	; 128
    3470:	5f e3       	ldi	r21, 0x3F	; 63
    3472:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3476:	88 23       	and	r24, r24
    3478:	2c f4       	brge	.+10     	; 0x3484 <main+0x7fc>
		__ticks = 1;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	9c 8b       	std	Y+20, r25	; 0x14
    3480:	8b 8b       	std	Y+19, r24	; 0x13
    3482:	3f c0       	rjmp	.+126    	; 0x3502 <main+0x87a>
	else if (__tmp > 65535)
    3484:	6d 89       	ldd	r22, Y+21	; 0x15
    3486:	7e 89       	ldd	r23, Y+22	; 0x16
    3488:	8f 89       	ldd	r24, Y+23	; 0x17
    348a:	98 8d       	ldd	r25, Y+24	; 0x18
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	3f ef       	ldi	r19, 0xFF	; 255
    3490:	4f e7       	ldi	r20, 0x7F	; 127
    3492:	57 e4       	ldi	r21, 0x47	; 71
    3494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3498:	18 16       	cp	r1, r24
    349a:	4c f5       	brge	.+82     	; 0x34ee <main+0x866>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349c:	69 8d       	ldd	r22, Y+25	; 0x19
    349e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e2       	ldi	r20, 0x20	; 32
    34aa:	51 e4       	ldi	r21, 0x41	; 65
    34ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	bc 01       	movw	r22, r24
    34b6:	cd 01       	movw	r24, r26
    34b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	9c 8b       	std	Y+20, r25	; 0x14
    34c2:	8b 8b       	std	Y+19, r24	; 0x13
    34c4:	0f c0       	rjmp	.+30     	; 0x34e4 <main+0x85c>
    34c6:	88 ec       	ldi	r24, 0xC8	; 200
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	9a 8b       	std	Y+18, r25	; 0x12
    34cc:	89 8b       	std	Y+17, r24	; 0x11
    34ce:	89 89       	ldd	r24, Y+17	; 0x11
    34d0:	9a 89       	ldd	r25, Y+18	; 0x12
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <main+0x84a>
    34d6:	9a 8b       	std	Y+18, r25	; 0x12
    34d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34da:	8b 89       	ldd	r24, Y+19	; 0x13
    34dc:	9c 89       	ldd	r25, Y+20	; 0x14
    34de:	01 97       	sbiw	r24, 0x01	; 1
    34e0:	9c 8b       	std	Y+20, r25	; 0x14
    34e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e4:	8b 89       	ldd	r24, Y+19	; 0x13
    34e6:	9c 89       	ldd	r25, Y+20	; 0x14
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	69 f7       	brne	.-38     	; 0x34c6 <main+0x83e>
    34ec:	14 c0       	rjmp	.+40     	; 0x3516 <main+0x88e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ee:	6d 89       	ldd	r22, Y+21	; 0x15
    34f0:	7e 89       	ldd	r23, Y+22	; 0x16
    34f2:	8f 89       	ldd	r24, Y+23	; 0x17
    34f4:	98 8d       	ldd	r25, Y+24	; 0x18
    34f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	9c 8b       	std	Y+20, r25	; 0x14
    3500:	8b 8b       	std	Y+19, r24	; 0x13
    3502:	8b 89       	ldd	r24, Y+19	; 0x13
    3504:	9c 89       	ldd	r25, Y+20	; 0x14
    3506:	98 8b       	std	Y+16, r25	; 0x10
    3508:	8f 87       	std	Y+15, r24	; 0x0f
    350a:	8f 85       	ldd	r24, Y+15	; 0x0f
    350c:	98 89       	ldd	r25, Y+16	; 0x10
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <main+0x886>
    3512:	98 8b       	std	Y+16, r25	; 0x10
    3514:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    3516:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>

		HLCD_voidGoToXY(1,12);
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	6c e0       	ldi	r22, 0x0C	; 12
    351e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <HLCD_voidGoToXY>
		HLCD_voidSendString("Doaa");
    3522:	80 e6       	ldi	r24, 0x60	; 96
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <HLCD_voidSendString>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	aa e7       	ldi	r26, 0x7A	; 122
    3530:	b4 e4       	ldi	r27, 0x44	; 68
    3532:	8b 87       	std	Y+11, r24	; 0x0b
    3534:	9c 87       	std	Y+12, r25	; 0x0c
    3536:	ad 87       	std	Y+13, r26	; 0x0d
    3538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	6b 85       	ldd	r22, Y+11	; 0x0b
    353c:	7c 85       	ldd	r23, Y+12	; 0x0c
    353e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3540:	9e 85       	ldd	r25, Y+14	; 0x0e
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4a ef       	ldi	r20, 0xFA	; 250
    3548:	54 e4       	ldi	r21, 0x44	; 68
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8f 83       	std	Y+7, r24	; 0x07
    3554:	98 87       	std	Y+8, r25	; 0x08
    3556:	a9 87       	std	Y+9, r26	; 0x09
    3558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	2c f4       	brge	.+10     	; 0x357c <main+0x8f4>
		__ticks = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <main+0x972>
	else if (__tmp > 65535)
    357c:	6f 81       	ldd	r22, Y+7	; 0x07
    357e:	78 85       	ldd	r23, Y+8	; 0x08
    3580:	89 85       	ldd	r24, Y+9	; 0x09
    3582:	9a 85       	ldd	r25, Y+10	; 0x0a
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	4c f5       	brge	.+82     	; 0x35e6 <main+0x95e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3594:	6b 85       	ldd	r22, Y+11	; 0x0b
    3596:	7c 85       	ldd	r23, Y+12	; 0x0c
    3598:	8d 85       	ldd	r24, Y+13	; 0x0d
    359a:	9e 85       	ldd	r25, Y+14	; 0x0e
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e2       	ldi	r20, 0x20	; 32
    35a2:	51 e4       	ldi	r21, 0x41	; 65
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <main+0x954>
    35be:	88 ec       	ldi	r24, 0xC8	; 200
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9c 83       	std	Y+4, r25	; 0x04
    35c4:	8b 83       	std	Y+3, r24	; 0x03
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <main+0x942>
    35ce:	9c 83       	std	Y+4, r25	; 0x04
    35d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	9e 81       	ldd	r25, Y+6	; 0x06
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	69 f7       	brne	.-38     	; 0x35be <main+0x936>
    35e4:	14 c0       	rjmp	.+40     	; 0x360e <main+0x986>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	9a 83       	std	Y+2, r25	; 0x02
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <main+0x97e>
    360a:	9a 83       	std	Y+2, r25	; 0x02
    360c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HLCD_voidClearDisplay();
    360e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <HLCD_voidClearDisplay>
    3612:	49 cb       	rjmp	.-2414   	; 0x2ca6 <main+0x1e>

00003614 <__udivmodsi4>:
    3614:	a1 e2       	ldi	r26, 0x21	; 33
    3616:	1a 2e       	mov	r1, r26
    3618:	aa 1b       	sub	r26, r26
    361a:	bb 1b       	sub	r27, r27
    361c:	fd 01       	movw	r30, r26
    361e:	0d c0       	rjmp	.+26     	; 0x363a <__udivmodsi4_ep>

00003620 <__udivmodsi4_loop>:
    3620:	aa 1f       	adc	r26, r26
    3622:	bb 1f       	adc	r27, r27
    3624:	ee 1f       	adc	r30, r30
    3626:	ff 1f       	adc	r31, r31
    3628:	a2 17       	cp	r26, r18
    362a:	b3 07       	cpc	r27, r19
    362c:	e4 07       	cpc	r30, r20
    362e:	f5 07       	cpc	r31, r21
    3630:	20 f0       	brcs	.+8      	; 0x363a <__udivmodsi4_ep>
    3632:	a2 1b       	sub	r26, r18
    3634:	b3 0b       	sbc	r27, r19
    3636:	e4 0b       	sbc	r30, r20
    3638:	f5 0b       	sbc	r31, r21

0000363a <__udivmodsi4_ep>:
    363a:	66 1f       	adc	r22, r22
    363c:	77 1f       	adc	r23, r23
    363e:	88 1f       	adc	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	1a 94       	dec	r1
    3644:	69 f7       	brne	.-38     	; 0x3620 <__udivmodsi4_loop>
    3646:	60 95       	com	r22
    3648:	70 95       	com	r23
    364a:	80 95       	com	r24
    364c:	90 95       	com	r25
    364e:	9b 01       	movw	r18, r22
    3650:	ac 01       	movw	r20, r24
    3652:	bd 01       	movw	r22, r26
    3654:	cf 01       	movw	r24, r30
    3656:	08 95       	ret

00003658 <__prologue_saves__>:
    3658:	2f 92       	push	r2
    365a:	3f 92       	push	r3
    365c:	4f 92       	push	r4
    365e:	5f 92       	push	r5
    3660:	6f 92       	push	r6
    3662:	7f 92       	push	r7
    3664:	8f 92       	push	r8
    3666:	9f 92       	push	r9
    3668:	af 92       	push	r10
    366a:	bf 92       	push	r11
    366c:	cf 92       	push	r12
    366e:	df 92       	push	r13
    3670:	ef 92       	push	r14
    3672:	ff 92       	push	r15
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
    3680:	ca 1b       	sub	r28, r26
    3682:	db 0b       	sbc	r29, r27
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	09 94       	ijmp

00003690 <__epilogue_restores__>:
    3690:	2a 88       	ldd	r2, Y+18	; 0x12
    3692:	39 88       	ldd	r3, Y+17	; 0x11
    3694:	48 88       	ldd	r4, Y+16	; 0x10
    3696:	5f 84       	ldd	r5, Y+15	; 0x0f
    3698:	6e 84       	ldd	r6, Y+14	; 0x0e
    369a:	7d 84       	ldd	r7, Y+13	; 0x0d
    369c:	8c 84       	ldd	r8, Y+12	; 0x0c
    369e:	9b 84       	ldd	r9, Y+11	; 0x0b
    36a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    36a2:	b9 84       	ldd	r11, Y+9	; 0x09
    36a4:	c8 84       	ldd	r12, Y+8	; 0x08
    36a6:	df 80       	ldd	r13, Y+7	; 0x07
    36a8:	ee 80       	ldd	r14, Y+6	; 0x06
    36aa:	fd 80       	ldd	r15, Y+5	; 0x05
    36ac:	0c 81       	ldd	r16, Y+4	; 0x04
    36ae:	1b 81       	ldd	r17, Y+3	; 0x03
    36b0:	aa 81       	ldd	r26, Y+2	; 0x02
    36b2:	b9 81       	ldd	r27, Y+1	; 0x01
    36b4:	ce 0f       	add	r28, r30
    36b6:	d1 1d       	adc	r29, r1
    36b8:	0f b6       	in	r0, 0x3f	; 63
    36ba:	f8 94       	cli
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	cd bf       	out	0x3d, r28	; 61
    36c2:	ed 01       	movw	r28, r26
    36c4:	08 95       	ret

000036c6 <_exit>:
    36c6:	f8 94       	cli

000036c8 <__stop_program>:
    36c8:	ff cf       	rjmp	.-2      	; 0x36c8 <__stop_program>
