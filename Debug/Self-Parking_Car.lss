
Self-Parking_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002f0c  00002fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800168  00800168  000030a8  2**0
                  ALLOC
  3 .stab         00002ec8  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000196b  00000000  00000000  00005f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000078db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c5d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ca8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_1>
       8:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__vector_2>
       c:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_10>
      2c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 37       	cpi	r26, 0x7E	; 126
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e0       	ldi	r30, 0x0C	; 12
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <main>
      8a:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_voidInit>:
static void (*Timer_pvoidOVFNotificationFunction) (void) = NULL;
static void (*Timer_pvoidCTCNotificationFunction) (void) = NULL;
static void (*ICU_NotificationFunction) (void) = NULL;

void TIMER0_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
    /* Set CTC Mode */
//    CLR_BIT(TCCR0, TCCR0_WGM00);
//    SET_BIT(TCCR0, TCCR0_WGM01);

    /* Set Fast PWM Mode */
     SET_BIT(TCCR0, TCCR0_WGM00);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
     SET_BIT(TCCR0, TCCR0_WGM01);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	8c 93       	st	X, r24

    /* Set Compare Output -> Set on Top, Clear on Compare (Non-Inverted Mode) */
    CLR_BIT(TCCR0, TCCR0_COM00);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7e       	andi	r24, 0xEF	; 239
     e5e:	8c 93       	st	X, r24
    SET_BIT(TCCR0, TCCR0_COM01);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	8c 93       	st	X, r24

    /* Set Prescaler */
    TCCR0 &= CLK_SEL_BIT_MASK;
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	8c 93       	st	X, r24
    TCCR0 |= TIMER_PRESCALER_VALUE;
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
    /* Set Normal Mode */
     CLR_BIT(TCCR1A, TCCR1A_WGM10);
     e98:	af e4       	ldi	r26, 0x4F	; 79
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ef e4       	ldi	r30, 0x4F	; 79
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	8c 93       	st	X, r24
     CLR_BIT(TCCR1A, TCCR1A_WGM11);
     ea6:	af e4       	ldi	r26, 0x4F	; 79
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ef e4       	ldi	r30, 0x4F	; 79
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8d 7f       	andi	r24, 0xFD	; 253
     eb2:	8c 93       	st	X, r24
     CLR_BIT(TCCR1B, TCCR1B_WGM12);
     eb4:	ae e4       	ldi	r26, 0x4E	; 78
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ee e4       	ldi	r30, 0x4E	; 78
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	87 7f       	andi	r24, 0xF7	; 247
     ec0:	8c 93       	st	X, r24
     CLR_BIT(TCCR1B, TCCR1B_WGM13);
     ec2:	ae e4       	ldi	r26, 0x4E	; 78
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ee e4       	ldi	r30, 0x4E	; 78
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 7e       	andi	r24, 0xEF	; 239
     ece:	8c 93       	st	X, r24
//    SET_BIT(TCCR1A, TCCR1A_WGM11);
//    SET_BIT(TCCR1B, TCCR1B_WGM12);
//    SET_BIT(TCCR1B, TCCR1B_WGM13);

    /* Set Compare Output -> Set on Top, Clear on Compare (Non-Inverted Mode) */
    CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     ed0:	af e4       	ldi	r26, 0x4F	; 79
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ef e4       	ldi	r30, 0x4F	; 79
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7b       	andi	r24, 0xBF	; 191
     edc:	8c 93       	st	X, r24
    SET_BIT(TCCR1A, TCCR1A_COM1A1);
     ede:	af e4       	ldi	r26, 0x4F	; 79
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ef e4       	ldi	r30, 0x4F	; 79
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	8c 93       	st	X, r24

    /* Set Prescaler */
    TCCR1B &= CLK_SEL_BIT_MASK;
     eec:	ae e4       	ldi	r26, 0x4E	; 78
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ee e4       	ldi	r30, 0x4E	; 78
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	88 7f       	andi	r24, 0xF8	; 248
     ef8:	8c 93       	st	X, r24
    TCCR1B |= DIVISION_FACTOR_8;
     efa:	ae e4       	ldi	r26, 0x4E	; 78
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ee e4       	ldi	r30, 0x4E	; 78
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	8c 93       	st	X, r24
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <TIMER0_voidSetBusyWaitMS_OVFMode>:
void TIMER0_voidSetBusyWaitMS_OVFMode(u32 Copy_u32DelayMS)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	2c 97       	sbiw	r28, 0x0c	; 12
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	69 87       	std	Y+9, r22	; 0x09
     f24:	7a 87       	std	Y+10, r23	; 0x0a
     f26:	8b 87       	std	Y+11, r24	; 0x0b
     f28:	9c 87       	std	Y+12, r25	; 0x0c
	TIMER0_voidSetPreloadValue(6);
     f2a:	86 e0       	ldi	r24, 0x06	; 6
     f2c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <TIMER0_voidSetPreloadValue>

    u32 Local_u32NumberOfOVF;
    u32 Local_u32Counter = 0;
     f30:	19 82       	std	Y+1, r1	; 0x01
     f32:	1a 82       	std	Y+2, r1	; 0x02
     f34:	1b 82       	std	Y+3, r1	; 0x03
     f36:	1c 82       	std	Y+4, r1	; 0x04
    Local_u32NumberOfOVF = (Copy_u32DelayMS * 1000UL) / 256UL;
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	ab 85       	ldd	r26, Y+11	; 0x0b
     f3e:	bc 85       	ldd	r27, Y+12	; 0x0c
     f40:	28 ee       	ldi	r18, 0xE8	; 232
     f42:	33 e0       	ldi	r19, 0x03	; 3
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	bc 01       	movw	r22, r24
     f4a:	cd 01       	movw	r24, r26
     f4c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__mulsi3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	89 2f       	mov	r24, r25
     f56:	9a 2f       	mov	r25, r26
     f58:	ab 2f       	mov	r26, r27
     f5a:	bb 27       	eor	r27, r27
     f5c:	8d 83       	std	Y+5, r24	; 0x05
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	af 83       	std	Y+7, r26	; 0x07
     f62:	b8 87       	std	Y+8, r27	; 0x08
     f64:	1e c0       	rjmp	.+60     	; 0xfa2 <TIMER0_voidSetBusyWaitMS_OVFMode+0x94>

    while(Local_u32Counter < Local_u32NumberOfOVF)
    {
        while(!GET_BIT(TIFR, TIFR_TOV0));
     f66:	e8 e5       	ldi	r30, 0x58	; 88
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	b9 f3       	breq	.-18     	; 0xf66 <TIMER0_voidSetBusyWaitMS_OVFMode+0x58>
        SET_BIT(TIFR, TIFR_TOV0);
     f78:	a8 e5       	ldi	r26, 0x58	; 88
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 e5       	ldi	r30, 0x58	; 88
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	8c 93       	st	X, r24
        Local_u32Counter++;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	ab 81       	ldd	r26, Y+3	; 0x03
     f8c:	bc 81       	ldd	r27, Y+4	; 0x04
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	a1 1d       	adc	r26, r1
     f92:	b1 1d       	adc	r27, r1
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	ab 83       	std	Y+3, r26	; 0x03
     f9a:	bc 83       	std	Y+4, r27	; 0x04
		TIMER0_voidSetPreloadValue(6);
     f9c:	86 e0       	ldi	r24, 0x06	; 6
     f9e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <TIMER0_voidSetPreloadValue>

    u32 Local_u32NumberOfOVF;
    u32 Local_u32Counter = 0;
    Local_u32NumberOfOVF = (Copy_u32DelayMS * 1000UL) / 256UL;

    while(Local_u32Counter < Local_u32NumberOfOVF)
     fa2:	29 81       	ldd	r18, Y+1	; 0x01
     fa4:	3a 81       	ldd	r19, Y+2	; 0x02
     fa6:	4b 81       	ldd	r20, Y+3	; 0x03
     fa8:	5c 81       	ldd	r21, Y+4	; 0x04
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	af 81       	ldd	r26, Y+7	; 0x07
     fb0:	b8 85       	ldd	r27, Y+8	; 0x08
     fb2:	28 17       	cp	r18, r24
     fb4:	39 07       	cpc	r19, r25
     fb6:	4a 07       	cpc	r20, r26
     fb8:	5b 07       	cpc	r21, r27
     fba:	a8 f2       	brcs	.-86     	; 0xf66 <TIMER0_voidSetBusyWaitMS_OVFMode+0x58>
        while(!GET_BIT(TIFR, TIFR_TOV0));
        SET_BIT(TIFR, TIFR_TOV0);
        Local_u32Counter++;
		TIMER0_voidSetPreloadValue(6);
    }
}
     fbc:	2c 96       	adiw	r28, 0x0c	; 12
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <TIMER0_voidSetBusyWaitMS_CTCMode>:
void TIMER0_voidSetBusyWaitMS_CTCMode(u32 Copy_u32DelayMS)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	2c 97       	sbiw	r28, 0x0c	; 12
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	69 87       	std	Y+9, r22	; 0x09
     fe4:	7a 87       	std	Y+10, r23	; 0x0a
     fe6:	8b 87       	std	Y+11, r24	; 0x0b
     fe8:	9c 87       	std	Y+12, r25	; 0x0c
    /* Set Prescaler */
    TCCR0 &= CLK_SEL_BIT_MASK;
     fea:	a3 e5       	ldi	r26, 0x53	; 83
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e3 e5       	ldi	r30, 0x53	; 83
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	88 7f       	andi	r24, 0xF8	; 248
     ff6:	8c 93       	st	X, r24
    TCCR0 |= DIVISION_FACTOR_8;
     ff8:	a3 e5       	ldi	r26, 0x53	; 83
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	8c 93       	st	X, r24
    /* Clear The Timer Register (Reset The Timer Register) */
    TCNT0 = 0;
    1006:	e2 e5       	ldi	r30, 0x52	; 82
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	10 82       	st	Z, r1
    /* Set The compare match value */
    TIMER0_voidSetCTCCompareMatchValue(250); // compare value
    100c:	8a ef       	ldi	r24, 0xFA	; 250
    100e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TIMER0_voidSetCTCCompareMatchValue>

    u32 Local_u32NumberOfCTCFlag;
    u32 Local_u32Counter = 0;
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	1a 82       	std	Y+2, r1	; 0x02
    1016:	1b 82       	std	Y+3, r1	; 0x03
    1018:	1c 82       	std	Y+4, r1	; 0x04
    Local_u32NumberOfCTCFlag = (Copy_u32DelayMS * 1000UL) / 250UL;
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1020:	bc 85       	ldd	r27, Y+12	; 0x0c
    1022:	28 ee       	ldi	r18, 0xE8	; 232
    1024:	33 e0       	ldi	r19, 0x03	; 3
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	bc 01       	movw	r22, r24
    102c:	cd 01       	movw	r24, r26
    102e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__mulsi3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	2a ef       	ldi	r18, 0xFA	; 250
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__udivmodsi4>
    1046:	da 01       	movw	r26, r20
    1048:	c9 01       	movw	r24, r18
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	af 83       	std	Y+7, r26	; 0x07
    1050:	b8 87       	std	Y+8, r27	; 0x08
    1052:	1c c0       	rjmp	.+56     	; 0x108c <TIMER0_voidSetBusyWaitMS_CTCMode+0xbe>

    while(Local_u32Counter < Local_u32NumberOfCTCFlag)
    {
        while(!GET_BIT(TIFR, TIFR_OCF0));
    1054:	e8 e5       	ldi	r30, 0x58	; 88
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	86 95       	lsr	r24
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	81 70       	andi	r24, 0x01	; 1
    1062:	90 70       	andi	r25, 0x00	; 0
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	b1 f3       	breq	.-20     	; 0x1054 <TIMER0_voidSetBusyWaitMS_CTCMode+0x86>
        SET_BIT(TIFR, TIFR_OCF0);
    1068:	a8 e5       	ldi	r26, 0x58	; 88
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e8 e5       	ldi	r30, 0x58	; 88
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	82 60       	ori	r24, 0x02	; 2
    1074:	8c 93       	st	X, r24
        Local_u32Counter++;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	ab 81       	ldd	r26, Y+3	; 0x03
    107c:	bc 81       	ldd	r27, Y+4	; 0x04
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	a1 1d       	adc	r26, r1
    1082:	b1 1d       	adc	r27, r1
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	ab 83       	std	Y+3, r26	; 0x03
    108a:	bc 83       	std	Y+4, r27	; 0x04

    u32 Local_u32NumberOfCTCFlag;
    u32 Local_u32Counter = 0;
    Local_u32NumberOfCTCFlag = (Copy_u32DelayMS * 1000UL) / 250UL;

    while(Local_u32Counter < Local_u32NumberOfCTCFlag)
    108c:	29 81       	ldd	r18, Y+1	; 0x01
    108e:	3a 81       	ldd	r19, Y+2	; 0x02
    1090:	4b 81       	ldd	r20, Y+3	; 0x03
    1092:	5c 81       	ldd	r21, Y+4	; 0x04
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	af 81       	ldd	r26, Y+7	; 0x07
    109a:	b8 85       	ldd	r27, Y+8	; 0x08
    109c:	28 17       	cp	r18, r24
    109e:	39 07       	cpc	r19, r25
    10a0:	4a 07       	cpc	r20, r26
    10a2:	5b 07       	cpc	r21, r27
    10a4:	b8 f2       	brcs	.-82     	; 0x1054 <TIMER0_voidSetBusyWaitMS_CTCMode+0x86>
        while(!GET_BIT(TIFR, TIFR_OCF0));
        SET_BIT(TIFR, TIFR_OCF0);
        Local_u32Counter++;
    }
    /* Return to the precaler set by user */
}
    10a6:	2c 96       	adiw	r28, 0x0c	; 12
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <TIMER0_voidSetPreloadValue>:
void TIMER0_voidSetPreloadValue(u8 Copy_u8Value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	0f 92       	push	r0
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	89 83       	std	Y+1, r24	; 0x01
    TCCR0 = Copy_u8Value;
    10c4:	e3 e5       	ldi	r30, 0x53	; 83
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	80 83       	st	Z, r24
    
}
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <TIMER0_voidSetCTCCompareMatchValue>:
void TIMER0_voidSetCTCCompareMatchValue(u8 Copy_u8Value)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_u8Value;
    10e0:	ec e5       	ldi	r30, 0x5C	; 92
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	80 83       	st	Z, r24
}
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <TIMER0_voidSetOVFCallback>:
void TIMER0_voidSetOVFCallback(void (*pvoidNotificationFunction(void)))
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <TIMER0_voidSetOVFCallback+0x6>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01
    Timer_pvoidOVFNotificationFunction = pvoidNotificationFunction;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	90 93 69 01 	sts	0x0169, r25
    1106:	80 93 68 01 	sts	0x0168, r24
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <TIMER0_voidSetCTCCallback>:
void TIMER0_voidSetCTCCallback(void (*pvoidNotificationFunction(void)))
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <TIMER0_voidSetCTCCallback+0x6>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    Timer_pvoidCTCNotificationFunction = pvoidNotificationFunction;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	90 93 6b 01 	sts	0x016B, r25
    112a:	80 93 6a 01 	sts	0x016A, r24
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <TIMER0_voidEnableInterrupt>:
void TIMER0_voidEnableInterrupt(u8 Copy_u8Mode)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	0f 92       	push	r0
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Mode == Normal_MODE)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	88 23       	and	r24, r24
    1148:	41 f4       	brne	.+16     	; 0x115a <TIMER0_voidEnableInterrupt+0x22>
    {
        SET_BIT(TIMSK, TIMSK_TOIE0);
    114a:	a9 e5       	ldi	r26, 0x59	; 89
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e9 e5       	ldi	r30, 0x59	; 89
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	81 60       	ori	r24, 0x01	; 1
    1156:	8c 93       	st	X, r24
    1158:	0a c0       	rjmp	.+20     	; 0x116e <TIMER0_voidEnableInterrupt+0x36>
    }
    else if(Copy_u8Mode == CTC_MODE)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	39 f4       	brne	.+14     	; 0x116e <TIMER0_voidEnableInterrupt+0x36>
    {
        SET_BIT(TIMSK, TIMSK_OCIE0);
    1160:	a9 e5       	ldi	r26, 0x59	; 89
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e9 e5       	ldi	r30, 0x59	; 89
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	82 60       	ori	r24, 0x02	; 2
    116c:	8c 93       	st	X, r24
    }
}
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <TIMER0_voidDisableInterrupt>:
void TIMER0_voidDisableInterrupt(u8 Copy_u8Mode)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Mode == Normal_MODE)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	88 23       	and	r24, r24
    1186:	41 f4       	brne	.+16     	; 0x1198 <TIMER0_voidDisableInterrupt+0x22>
    {
        CLR_BIT(TIMSK, TIMSK_TOIE0);
    1188:	a9 e5       	ldi	r26, 0x59	; 89
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e9 e5       	ldi	r30, 0x59	; 89
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8e 7f       	andi	r24, 0xFE	; 254
    1194:	8c 93       	st	X, r24
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <TIMER0_voidDisableInterrupt+0x36>
    }
    else if(Copy_u8Mode == CTC_MODE)
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	39 f4       	brne	.+14     	; 0x11ac <TIMER0_voidDisableInterrupt+0x36>
    {
        CLR_BIT(TIMSK, TIMSK_OCIE0);
    119e:	a9 e5       	ldi	r26, 0x59	; 89
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e9 e5       	ldi	r30, 0x59	; 89
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8d 7f       	andi	r24, 0xFD	; 253
    11aa:	8c 93       	st	X, r24
    }
}
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <TIMER0_u8GetCounterValue>:
u8 TIMER0_u8GetCounterValue()
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    return TCNT0;
    11bc:	e2 e5       	ldi	r30, 0x52	; 82
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <TIMER1_u8GetCounterValue>:
u8 TIMER1_u8GetCounterValue()
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    11d0:	ec e4       	ldi	r30, 0x4C	; 76
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <TIMER1_coidSetICR1Value>:


void TIMER1_coidSetICR1Value(u16 Copy_u16ICRValue)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <TIMER1_coidSetICR1Value+0x6>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16ICRValue;
    11ec:	e6 e4       	ldi	r30, 0x46	; 70
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <TIMER1_coidSetOCR1AValue>:
void TIMER1_coidSetOCR1AValue(u16 Copy_u16OCR1AValue)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <TIMER1_coidSetOCR1AValue+0x6>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16OCR1AValue;
    1210:	ea e4       	ldi	r30, 0x4A	; 74
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <TIMER1_voidClearTCNT1>:
void TIMER1_voidClearTCNT1(void)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
    122e:	ec e4       	ldi	r30, 0x4C	; 76
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	11 82       	std	Z+1, r1	; 0x01
    1234:	10 82       	st	Z, r1
}
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <ICU_voidInterruptControl>:
void ICU_voidInterruptControl(u8 Copy_u8InterruptEnable)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <ICU_voidInterruptControl+0x6>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8InterruptEnable)
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3b 83       	std	Y+3, r19	; 0x03
    1252:	2a 83       	std	Y+2, r18	; 0x02
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	9b 81       	ldd	r25, Y+3	; 0x03
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f0       	breq	.+26     	; 0x1276 <ICU_voidInterruptControl+0x3a>
    125c:	2a 81       	ldd	r18, Y+2	; 0x02
    125e:	3b 81       	ldd	r19, Y+3	; 0x03
    1260:	21 30       	cpi	r18, 0x01	; 1
    1262:	31 05       	cpc	r19, r1
    1264:	79 f4       	brne	.+30     	; 0x1284 <ICU_voidInterruptControl+0x48>
    {
    case ICU_ENABLE:
        /* Set The input capture Interrupt Enable Bit to Enable THe Interrupt */
        SET_BIT(TIMSK, TIMSK_TICIE1);
    1266:	a9 e5       	ldi	r26, 0x59	; 89
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 e5       	ldi	r30, 0x59	; 89
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 62       	ori	r24, 0x20	; 32
    1272:	8c 93       	st	X, r24
    1274:	07 c0       	rjmp	.+14     	; 0x1284 <ICU_voidInterruptControl+0x48>
        break;

    case ICU_DISABLE:
        /* Clear The input capture Interrupt Disnable Bit to Disable THe Interrupt */
        CLR_BIT(TIMSK, TIMSK_TICIE1);
    1276:	a9 e5       	ldi	r26, 0x59	; 89
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e9 e5       	ldi	r30, 0x59	; 89
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8f 7d       	andi	r24, 0xDF	; 223
    1282:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <ICU_u16GetICRRegister>:

u16 ICU_u16GetICRRegister(void)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    1298:	e6 e4       	ldi	r30, 0x46	; 70
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
}
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <ICU_vodSetCallBack>:

void ICU_vodSetCallBack(void (*NotifiFunction) (void))
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <ICU_vodSetCallBack+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
    ICU_NotificationFunction = NotifiFunction;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	90 93 6d 01 	sts	0x016D, r25
    12bc:	80 93 6c 01 	sts	0x016C, r24
}
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <ICU_voidSetTriggerSignal>:

void ICU_voidSetTriggerSignal(u8 Copy_u8TriggerSignal)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <ICU_voidSetTriggerSignal+0x6>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8TriggerSignal)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3b 83       	std	Y+3, r19	; 0x03
    12e0:	2a 83       	std	Y+2, r18	; 0x02
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	69 f0       	breq	.+26     	; 0x1304 <ICU_voidSetTriggerSignal+0x3a>
    12ea:	2a 81       	ldd	r18, Y+2	; 0x02
    12ec:	3b 81       	ldd	r19, Y+3	; 0x03
    12ee:	21 30       	cpi	r18, 0x01	; 1
    12f0:	31 05       	cpc	r19, r1
    12f2:	79 f4       	brne	.+30     	; 0x1312 <ICU_voidSetTriggerSignal+0x48>
    {
    case ICU_RISING_EDGE:
        /* Set Input Capture Edge to be Rising Edge*/
        SET_BIT(TCCR1B, TCCR1B_ICES1);
    12f4:	ae e4       	ldi	r26, 0x4E	; 78
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ee e4       	ldi	r30, 0x4E	; 78
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 64       	ori	r24, 0x40	; 64
    1300:	8c 93       	st	X, r24
    1302:	07 c0       	rjmp	.+14     	; 0x1312 <ICU_voidSetTriggerSignal+0x48>
        break;
    
    case ICU_FALLING_EDGE:
        /* Set Input Capture Edge to be Falling Edge*/
        CLR_BIT(TCCR1B, TCCR1B_ICES1);
    1304:	ae e4       	ldi	r26, 0x4E	; 78
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ee e4       	ldi	r30, 0x4E	; 78
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7b       	andi	r24, 0xBF	; 191
    1310:	8c 93       	st	X, r24

    default:
        break;
    }
    
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <__vector_10>:

// CTC ISR
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	2f 93       	push	r18
    132a:	3f 93       	push	r19
    132c:	4f 93       	push	r20
    132e:	5f 93       	push	r21
    1330:	6f 93       	push	r22
    1332:	7f 93       	push	r23
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    if(Timer_pvoidCTCNotificationFunction != NULL)
    1348:	80 91 6a 01 	lds	r24, 0x016A
    134c:	90 91 6b 01 	lds	r25, 0x016B
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	29 f0       	breq	.+10     	; 0x135e <__vector_10+0x40>
    {
        Timer_pvoidCTCNotificationFunction();
    1354:	e0 91 6a 01 	lds	r30, 0x016A
    1358:	f0 91 6b 01 	lds	r31, 0x016B
    135c:	09 95       	icall
    }
}
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	7f 91       	pop	r23
    1370:	6f 91       	pop	r22
    1372:	5f 91       	pop	r21
    1374:	4f 91       	pop	r20
    1376:	3f 91       	pop	r19
    1378:	2f 91       	pop	r18
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <__vector_11>:

// OVF ISR
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    if(Timer_pvoidOVFNotificationFunction != NULL)
    13ae:	80 91 68 01 	lds	r24, 0x0168
    13b2:	90 91 69 01 	lds	r25, 0x0169
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	29 f0       	breq	.+10     	; 0x13c4 <__vector_11+0x40>
    {
        Timer_pvoidOVFNotificationFunction();
    13ba:	e0 91 68 01 	lds	r30, 0x0168
    13be:	f0 91 69 01 	lds	r31, 0x0169
    13c2:	09 95       	icall
    }
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_6>:


// ICU ISR
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 93       	push	r18
    13f6:	3f 93       	push	r19
    13f8:	4f 93       	push	r20
    13fa:	5f 93       	push	r21
    13fc:	6f 93       	push	r22
    13fe:	7f 93       	push	r23
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	af 93       	push	r26
    1406:	bf 93       	push	r27
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    if(ICU_NotificationFunction != NULL)
    1414:	80 91 6c 01 	lds	r24, 0x016C
    1418:	90 91 6d 01 	lds	r25, 0x016D
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	29 f0       	breq	.+10     	; 0x142a <__vector_6+0x40>
    {
        ICU_NotificationFunction();
    1420:	e0 91 6c 01 	lds	r30, 0x016C
    1424:	f0 91 6d 01 	lds	r31, 0x016D
    1428:	09 95       	icall
    }
    else
    {
        /* Do Nothing */
    }
}
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <M_GIE_void_enable>:
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"

void M_GIE_void_enable(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I_BIT);
    1458:	af e5       	ldi	r26, 0x5F	; 95
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ef e5       	ldi	r30, 0x5F	; 95
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 68       	ori	r24, 0x80	; 128
    1464:	8c 93       	st	X, r24
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	 CLR_BIT(SREG_REG,I_BIT);
    1474:	af e5       	ldi	r26, 0x5F	; 95
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ef e5       	ldi	r30, 0x5F	; 95
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8f 77       	andi	r24, 0x7F	; 127
    1480:	8c 93       	st	X, r24
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <M_EXTI_void_Enable>:

// array of 3 pointers to functions (Call Back fn )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};

void M_EXTI_void_Enable(u8 copy_u8IntID, u8 copy_u8Sense)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <M_EXTI_void_Enable+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <M_EXTI_void_Enable+0x8>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	6a 83       	std	Y+2, r22	; 0x02
    // step 1 : config Sense
	if(copy_u8Sense < EXTI_TRIG_LOW_LEVEL  || copy_u8Sense > EXTI_TRIG_RAIS_EDGE )
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <M_EXTI_void_Enable+0x18>
    149e:	72 c0       	rjmp	.+228    	; 0x1584 <M_EXTI_void_Enable+0xfc>
	{
		return ;
	}
	switch(copy_u8IntID)
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3c 83       	std	Y+4, r19	; 0x04
    14a8:	2b 83       	std	Y+3, r18	; 0x03
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	86 30       	cpi	r24, 0x06	; 6
    14b0:	91 05       	cpc	r25, r1
    14b2:	59 f0       	breq	.+22     	; 0x14ca <M_EXTI_void_Enable+0x42>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	27 30       	cpi	r18, 0x07	; 7
    14ba:	31 05       	cpc	r19, r1
    14bc:	b1 f0       	breq	.+44     	; 0x14ea <M_EXTI_void_Enable+0x62>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	85 30       	cpi	r24, 0x05	; 5
    14c4:	91 05       	cpc	r25, r1
    14c6:	41 f1       	breq	.+80     	; 0x1518 <M_EXTI_void_Enable+0x90>
    14c8:	44 c0       	rjmp	.+136    	; 0x1552 <M_EXTI_void_Enable+0xca>
	{
	case EXTI_INT0_ID:
		// step 1 : Apply Mask
		MCUCR_REG &= EXTI_INT0_TRIG_MASK;
    14ca:	a5 e5       	ldi	r26, 0x55	; 85
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e5       	ldi	r30, 0x55	; 85
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8c 7f       	andi	r24, 0xFC	; 252
    14d6:	8c 93       	st	X, r24
		// step 2 : insert value
		MCUCR_REG |= copy_u8Sense;
    14d8:	a5 e5       	ldi	r26, 0x55	; 85
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e5       	ldi	r30, 0x55	; 85
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	90 81       	ld	r25, Z
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	89 2b       	or	r24, r25
    14e6:	8c 93       	st	X, r24
    14e8:	34 c0       	rjmp	.+104    	; 0x1552 <M_EXTI_void_Enable+0xca>
		break;
	case EXTI_INT1_ID:
		// step 1 : Apply Mask
		MCUCR_REG &= EXTI_INT1_TRIG_MASK;
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	83 7f       	andi	r24, 0xF3	; 243
    14f6:	8c 93       	st	X, r24
		// step 2 : insert value
		MCUCR_REG |= copy_u8Sense << EXTI_INT1_TRIG_SHIFT ;
    14f8:	a5 e5       	ldi	r26, 0x55	; 85
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e5       	ldi	r30, 0x55	; 85
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	82 2b       	or	r24, r18
    1514:	8c 93       	st	X, r24
    1516:	1d c0       	rjmp	.+58     	; 0x1552 <M_EXTI_void_Enable+0xca>
		break;
	case EXTI_INT2_ID:
		// step 1 : Apply Mask
		CLR_BIT(MCUCSR_REG , ISC2_BIT);
    1518:	a4 e5       	ldi	r26, 0x54	; 84
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e4 e5       	ldi	r30, 0x54	; 84
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 7b       	andi	r24, 0xBF	; 191
    1524:	8c 93       	st	X, r24
		// step 2 : insert value
		MCUCSR_REG |= (GET_BIT(copy_u8Sense,0))<< EXTI_INT2_TRIG_SHIFT;
    1526:	a4 e5       	ldi	r26, 0x54	; 84
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e4 e5       	ldi	r30, 0x54	; 84
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	28 2f       	mov	r18, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	00 24       	eor	r0, r0
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	07 94       	ror	r0
    1544:	96 95       	lsr	r25
    1546:	87 95       	ror	r24
    1548:	07 94       	ror	r0
    154a:	98 2f       	mov	r25, r24
    154c:	80 2d       	mov	r24, r0
    154e:	82 2b       	or	r24, r18
    1550:	8c 93       	st	X, r24
		break;
	}

	// step 2 : Enable PIE
	if(copy_u8IntID>= EXTI_INT2_ID && copy_u8IntID <= EXTI_INT1_ID)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	85 30       	cpi	r24, 0x05	; 5
    1556:	b0 f0       	brcs	.+44     	; 0x1584 <M_EXTI_void_Enable+0xfc>
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	88 30       	cpi	r24, 0x08	; 8
    155c:	98 f4       	brcc	.+38     	; 0x1584 <M_EXTI_void_Enable+0xfc>
	   SET_BIT(GICR_REG ,copy_u8IntID);
    155e:	ab e5       	ldi	r26, 0x5B	; 91
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e5       	ldi	r30, 0x5B	; 91
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <M_EXTI_void_Enable+0xf4>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <M_EXTI_void_Enable+0xf0>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <M_EXTI_void_Disable>:

void M_EXTI_void_Disable(u8 copy_u8IntID)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
	case EXTI_INT2_ID:
		CLR_BIT(GICR_REG  ,INT2_BIT);
		break;
	}*/
	// Method 2
	if(copy_u8IntID>= EXTI_INT2_ID && copy_u8IntID <= EXTI_INT1_ID)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	85 30       	cpi	r24, 0x05	; 5
    15a2:	b8 f0       	brcs	.+46     	; 0x15d2 <M_EXTI_void_Disable+0x40>
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	a0 f4       	brcc	.+40     	; 0x15d2 <M_EXTI_void_Disable+0x40>
	   CLR_BIT(GICR_REG ,copy_u8IntID);
    15aa:	ab e5       	ldi	r26, 0x5B	; 91
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb e5       	ldi	r30, 0x5B	; 91
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <M_EXTI_void_Disable+0x36>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <M_EXTI_void_Disable+0x32>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
}
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <M_EXTI_void_setCallBack>:
void M_EXTI_void_setCallBack(void (*ptrfn) (void), u8 copy_u8IntID)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <M_EXTI_void_setCallBack+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <M_EXTI_void_setCallBack+0x8>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6b 83       	std	Y+3, r22	; 0x03
   switch(copy_u8IntID)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3d 83       	std	Y+5, r19	; 0x05
    15f6:	2c 83       	std	Y+4, r18	; 0x04
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	86 30       	cpi	r24, 0x06	; 6
    15fe:	91 05       	cpc	r25, r1
    1600:	59 f0       	breq	.+22     	; 0x1618 <M_EXTI_void_setCallBack+0x3e>
    1602:	2c 81       	ldd	r18, Y+4	; 0x04
    1604:	3d 81       	ldd	r19, Y+5	; 0x05
    1606:	27 30       	cpi	r18, 0x07	; 7
    1608:	31 05       	cpc	r19, r1
    160a:	69 f0       	breq	.+26     	; 0x1626 <M_EXTI_void_setCallBack+0x4c>
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	85 30       	cpi	r24, 0x05	; 5
    1612:	91 05       	cpc	r25, r1
    1614:	79 f0       	breq	.+30     	; 0x1634 <M_EXTI_void_setCallBack+0x5a>
    1616:	14 c0       	rjmp	.+40     	; 0x1640 <M_EXTI_void_setCallBack+0x66>
   {
   case EXTI_INT0_ID:
	   Arr_CallBack[0]= ptrfn;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	90 93 6f 01 	sts	0x016F, r25
    1620:	80 93 6e 01 	sts	0x016E, r24
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <M_EXTI_void_setCallBack+0x66>
   		break;
   	case EXTI_INT1_ID:
   		Arr_CallBack[1]= ptrfn;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	90 93 71 01 	sts	0x0171, r25
    162e:	80 93 70 01 	sts	0x0170, r24
    1632:	06 c0       	rjmp	.+12     	; 0x1640 <M_EXTI_void_setCallBack+0x66>
   		break;
   	case EXTI_INT2_ID:
   		Arr_CallBack[2]= ptrfn;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	90 93 73 01 	sts	0x0173, r25
    163c:	80 93 72 01 	sts	0x0172, r24
   		break;
   }
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	4f 93       	push	r20
    1660:	5f 93       	push	r21
    1662:	6f 93       	push	r22
    1664:	7f 93       	push	r23
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
    166a:	af 93       	push	r26
    166c:	bf 93       	push	r27
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    if(Arr_CallBack[0] != NULL)
    167a:	80 91 6e 01 	lds	r24, 0x016E
    167e:	90 91 6f 01 	lds	r25, 0x016F
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	29 f0       	breq	.+10     	; 0x1690 <__vector_1+0x40>
    {
    	Arr_CallBack[0]();
    1686:	e0 91 6e 01 	lds	r30, 0x016E
    168a:	f0 91 6f 01 	lds	r31, 0x016F
    168e:	09 95       	icall
    }
}
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	ff 91       	pop	r31
    1696:	ef 91       	pop	r30
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	7f 91       	pop	r23
    16a2:	6f 91       	pop	r22
    16a4:	5f 91       	pop	r21
    16a6:	4f 91       	pop	r20
    16a8:	3f 91       	pop	r19
    16aa:	2f 91       	pop	r18
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	0f 90       	pop	r0
    16b2:	1f 90       	pop	r1
    16b4:	18 95       	reti

000016b6 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    16b6:	1f 92       	push	r1
    16b8:	0f 92       	push	r0
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	0f 92       	push	r0
    16be:	11 24       	eor	r1, r1
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	7f 93       	push	r23
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	af 93       	push	r26
    16d2:	bf 93       	push	r27
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    if(Arr_CallBack[1] != NULL)
    16e0:	80 91 70 01 	lds	r24, 0x0170
    16e4:	90 91 71 01 	lds	r25, 0x0171
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <__vector_2+0x40>
    {
    	Arr_CallBack[1]();
    16ec:	e0 91 70 01 	lds	r30, 0x0170
    16f0:	f0 91 71 01 	lds	r31, 0x0171
    16f4:	09 95       	icall
    }
}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	ff 91       	pop	r31
    16fc:	ef 91       	pop	r30
    16fe:	bf 91       	pop	r27
    1700:	af 91       	pop	r26
    1702:	9f 91       	pop	r25
    1704:	8f 91       	pop	r24
    1706:	7f 91       	pop	r23
    1708:	6f 91       	pop	r22
    170a:	5f 91       	pop	r21
    170c:	4f 91       	pop	r20
    170e:	3f 91       	pop	r19
    1710:	2f 91       	pop	r18
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    if(Arr_CallBack[2] != NULL)
    1746:	80 91 72 01 	lds	r24, 0x0172
    174a:	90 91 73 01 	lds	r25, 0x0173
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	29 f0       	breq	.+10     	; 0x175c <__vector_3+0x40>
    {
    	Arr_CallBack[2]();
    1752:	e0 91 72 01 	lds	r30, 0x0172
    1756:	f0 91 73 01 	lds	r31, 0x0173
    175a:	09 95       	icall
    }
}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <MDIO_voidSetPinDirection>:

/*****************************************************************
 ***********FUNCTION IMPLEMENTATION*******************************
 ****************************************************************/
void MDIO_voidSetPinDirection (u8 Copy_u8PortName ,u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <MDIO_voidSetPinDirection+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <MDIO_voidSetPinDirection+0x8>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	6a 83       	std	Y+2, r22	; 0x02
    1794:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8PortName)
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	3d 83       	std	Y+5, r19	; 0x05
    179e:	2c 83       	std	Y+4, r18	; 0x04
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	82 30       	cpi	r24, 0x02	; 2
    17a6:	91 05       	cpc	r25, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <MDIO_voidSetPinDirection+0x2a>
    17aa:	48 c0       	rjmp	.+144    	; 0x183c <MDIO_voidSetPinDirection+0xba>
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	23 30       	cpi	r18, 0x03	; 3
    17b2:	31 05       	cpc	r19, r1
    17b4:	34 f4       	brge	.+12     	; 0x17c2 <MDIO_voidSetPinDirection+0x40>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	71 f0       	breq	.+28     	; 0x17dc <MDIO_voidSetPinDirection+0x5a>
    17c0:	cb c0       	rjmp	.+406    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
    17c2:	2c 81       	ldd	r18, Y+4	; 0x04
    17c4:	3d 81       	ldd	r19, Y+5	; 0x05
    17c6:	23 30       	cpi	r18, 0x03	; 3
    17c8:	31 05       	cpc	r19, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <MDIO_voidSetPinDirection+0x4c>
    17cc:	67 c0       	rjmp	.+206    	; 0x189c <MDIO_voidSetPinDirection+0x11a>
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	9d 81       	ldd	r25, Y+5	; 0x05
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	91 05       	cpc	r25, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <MDIO_voidSetPinDirection+0x58>
    17d8:	91 c0       	rjmp	.+290    	; 0x18fc <MDIO_voidSetPinDirection+0x17a>
    17da:	be c0       	rjmp	.+380    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
    {
        case (PORTA_ID):
            if (Copy_u8Direction == OUPUT)
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	a1 f4       	brne	.+40     	; 0x180a <MDIO_voidSetPinDirection+0x88>
            {
                SET_BIT (DDRA,Copy_u8PinNumber );
    17e2:	aa e3       	ldi	r26, 0x3A	; 58
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ea e3       	ldi	r30, 0x3A	; 58
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <MDIO_voidSetPinDirection+0x7e>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <MDIO_voidSetPinDirection+0x7a>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	a7 c0       	rjmp	.+334    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>

            }
            else if (Copy_u8Direction == INPUT)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	88 23       	and	r24, r24
    180e:	09 f0       	breq	.+2      	; 0x1812 <MDIO_voidSetPinDirection+0x90>
    1810:	a3 c0       	rjmp	.+326    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRA,Copy_u8PinNumber );
    1812:	aa e3       	ldi	r26, 0x3A	; 58
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ea e3       	ldi	r30, 0x3A	; 58
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <MDIO_voidSetPinDirection+0xae>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <MDIO_voidSetPinDirection+0xaa>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	8e c0       	rjmp	.+284    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            {
                // do nothing 
            }
        break ;
        case (PORTB_ID)  :
            if (Copy_u8Direction == OUPUT)
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	a1 f4       	brne	.+40     	; 0x186a <MDIO_voidSetPinDirection+0xe8>
            {
                SET_BIT (DDRB,Copy_u8PinNumber );
    1842:	a7 e3       	ldi	r26, 0x37	; 55
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e7 e3       	ldi	r30, 0x37	; 55
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <MDIO_voidSetPinDirection+0xde>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <MDIO_voidSetPinDirection+0xda>
    1864:	84 2b       	or	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	77 c0       	rjmp	.+238    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            }
            else if (Copy_u8Direction == INPUT)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 23       	and	r24, r24
    186e:	09 f0       	breq	.+2      	; 0x1872 <MDIO_voidSetPinDirection+0xf0>
    1870:	73 c0       	rjmp	.+230    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRB,Copy_u8PinNumber );
    1872:	a7 e3       	ldi	r26, 0x37	; 55
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e7 e3       	ldi	r30, 0x37	; 55
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <MDIO_voidSetPinDirection+0x10e>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <MDIO_voidSetPinDirection+0x10a>
    1894:	80 95       	com	r24
    1896:	84 23       	and	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	5e c0       	rjmp	.+188    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            {
                // do nothing 
            }
        break;
        case (PORTC_ID):
            if (Copy_u8Direction == OUPUT)
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	a1 f4       	brne	.+40     	; 0x18ca <MDIO_voidSetPinDirection+0x148>
            {
                SET_BIT (DDRC,Copy_u8PinNumber );
    18a2:	a4 e3       	ldi	r26, 0x34	; 52
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e4 e3       	ldi	r30, 0x34	; 52
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <MDIO_voidSetPinDirection+0x13e>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <MDIO_voidSetPinDirection+0x13a>
    18c4:	84 2b       	or	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	47 c0       	rjmp	.+142    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>

            }
            else if (Copy_u8Direction == INPUT)
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	88 23       	and	r24, r24
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <MDIO_voidSetPinDirection+0x150>
    18d0:	43 c0       	rjmp	.+134    	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRC,Copy_u8PinNumber );
    18d2:	a4 e3       	ldi	r26, 0x34	; 52
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e4 e3       	ldi	r30, 0x34	; 52
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <MDIO_voidSetPinDirection+0x16e>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <MDIO_voidSetPinDirection+0x16a>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	2e c0       	rjmp	.+92     	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            {
                // do nothing 
            }
        break;
        case (PORTD_ID):
            if (Copy_u8Direction == OUPUT)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	a1 f4       	brne	.+40     	; 0x192a <MDIO_voidSetPinDirection+0x1a8>
            {
                SET_BIT (DDRD,Copy_u8PinNumber );
    1902:	a1 e3       	ldi	r26, 0x31	; 49
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e1 e3       	ldi	r30, 0x31	; 49
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <MDIO_voidSetPinDirection+0x19e>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <MDIO_voidSetPinDirection+0x19a>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	17 c0       	rjmp	.+46     	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>

            }
            else if (Copy_u8Direction == INPUT)
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	88 23       	and	r24, r24
    192e:	a1 f4       	brne	.+40     	; 0x1958 <MDIO_voidSetPinDirection+0x1d6>
            {
                CLR_BIT (DDRD,Copy_u8PinNumber );
    1930:	a1 e3       	ldi	r26, 0x31	; 49
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e1 e3       	ldi	r30, 0x31	; 49
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <MDIO_voidSetPinDirection+0x1cc>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <MDIO_voidSetPinDirection+0x1c8>
    1952:	80 95       	com	r24
    1954:	84 23       	and	r24, r20
    1956:	8c 93       	st	X, r24
            }
        break;


    }
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 Copy_u8PortName ,u8 Copy_u8PinNumber , u8 Copy_u8Value)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	2d 97       	sbiw	r28, 0x0d	; 13
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	6a 83       	std	Y+2, r22	; 0x02
    1980:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8PortName)
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3d 87       	std	Y+13, r19	; 0x0d
    198a:	2c 87       	std	Y+12, r18	; 0x0c
    198c:	8c 85       	ldd	r24, Y+12	; 0x0c
    198e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	91 05       	cpc	r25, r1
    1994:	09 f4       	brne	.+2      	; 0x1998 <MDIO_voidSetPinValue+0x30>
    1996:	50 c0       	rjmp	.+160    	; 0x1a38 <MDIO_voidSetPinValue+0xd0>
    1998:	2c 85       	ldd	r18, Y+12	; 0x0c
    199a:	3d 85       	ldd	r19, Y+13	; 0x0d
    199c:	23 30       	cpi	r18, 0x03	; 3
    199e:	31 05       	cpc	r19, r1
    19a0:	34 f4       	brge	.+12     	; 0x19ae <MDIO_voidSetPinValue+0x46>
    19a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    19a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	91 05       	cpc	r25, r1
    19aa:	71 f0       	breq	.+28     	; 0x19c8 <MDIO_voidSetPinValue+0x60>
    19ac:	ec c0       	rjmp	.+472    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
    19ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    19b0:	3d 85       	ldd	r19, Y+13	; 0x0d
    19b2:	23 30       	cpi	r18, 0x03	; 3
    19b4:	31 05       	cpc	r19, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <MDIO_voidSetPinValue+0x52>
    19b8:	77 c0       	rjmp	.+238    	; 0x1aa8 <MDIO_voidSetPinValue+0x140>
    19ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    19bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    19be:	84 30       	cpi	r24, 0x04	; 4
    19c0:	91 05       	cpc	r25, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <MDIO_voidSetPinValue+0x5e>
    19c4:	a9 c0       	rjmp	.+338    	; 0x1b18 <MDIO_voidSetPinValue+0x1b0>
    19c6:	df c0       	rjmp	.+446    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
    {
        case (PORTA_ID):
            switch (Copy_u8Value )
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3b 87       	std	Y+11, r19	; 0x0b
    19d0:	2a 87       	std	Y+10, r18	; 0x0a
    19d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	31 f0       	breq	.+12     	; 0x19e6 <MDIO_voidSetPinValue+0x7e>
    19da:	2a 85       	ldd	r18, Y+10	; 0x0a
    19dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    19de:	21 30       	cpi	r18, 0x01	; 1
    19e0:	31 05       	cpc	r19, r1
    19e2:	b1 f0       	breq	.+44     	; 0x1a10 <MDIO_voidSetPinValue+0xa8>
    19e4:	d0 c0       	rjmp	.+416    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
            {
				case LOW:
					CLR_BIT (PORTA,Copy_u8PinNumber );
    19e6:	ab e3       	ldi	r26, 0x3B	; 59
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	eb e3       	ldi	r30, 0x3B	; 59
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <MDIO_voidSetPinValue+0x9c>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <MDIO_voidSetPinValue+0x98>
    1a08:	80 95       	com	r24
    1a0a:	84 23       	and	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	bb c0       	rjmp	.+374    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
					break;
				case HIGH:
					SET_BIT (PORTA,Copy_u8PinNumber );
    1a10:	ab e3       	ldi	r26, 0x3B	; 59
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	eb e3       	ldi	r30, 0x3B	; 59
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <MDIO_voidSetPinValue+0xc6>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <MDIO_voidSetPinValue+0xc2>
    1a32:	84 2b       	or	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	a7 c0       	rjmp	.+334    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
					break;
            }
        	break;
        case (PORTB_ID):
        
            switch (Copy_u8Value )
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	39 87       	std	Y+9, r19	; 0x09
    1a40:	28 87       	std	Y+8, r18	; 0x08
    1a42:	88 85       	ldd	r24, Y+8	; 0x08
    1a44:	99 85       	ldd	r25, Y+9	; 0x09
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	31 f0       	breq	.+12     	; 0x1a56 <MDIO_voidSetPinValue+0xee>
    1a4a:	28 85       	ldd	r18, Y+8	; 0x08
    1a4c:	39 85       	ldd	r19, Y+9	; 0x09
    1a4e:	21 30       	cpi	r18, 0x01	; 1
    1a50:	31 05       	cpc	r19, r1
    1a52:	b1 f0       	breq	.+44     	; 0x1a80 <MDIO_voidSetPinValue+0x118>
    1a54:	98 c0       	rjmp	.+304    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
            {
            case LOW:
                CLR_BIT (PORTB,Copy_u8PinNumber );
    1a56:	a8 e3       	ldi	r26, 0x38	; 56
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e8 e3       	ldi	r30, 0x38	; 56
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <MDIO_voidSetPinValue+0x10c>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <MDIO_voidSetPinValue+0x108>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	83 c0       	rjmp	.+262    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
                break;
            case HIGH:
                SET_BIT (PORTB,Copy_u8PinNumber );
    1a80:	a8 e3       	ldi	r26, 0x38	; 56
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e8 e3       	ldi	r30, 0x38	; 56
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <MDIO_voidSetPinValue+0x136>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <MDIO_voidSetPinValue+0x132>
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	6f c0       	rjmp	.+222    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
            default:
                break;
            }
        break;
        case (PORTC_ID):
            switch (Copy_u8Value )
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	3f 83       	std	Y+7, r19	; 0x07
    1ab0:	2e 83       	std	Y+6, r18	; 0x06
    1ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <MDIO_voidSetPinValue+0x15e>
    1aba:	2e 81       	ldd	r18, Y+6	; 0x06
    1abc:	3f 81       	ldd	r19, Y+7	; 0x07
    1abe:	21 30       	cpi	r18, 0x01	; 1
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	b1 f0       	breq	.+44     	; 0x1af0 <MDIO_voidSetPinValue+0x188>
    1ac4:	60 c0       	rjmp	.+192    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
            {
				case LOW:
					CLR_BIT (PORTC,Copy_u8PinNumber );
    1ac6:	a5 e3       	ldi	r26, 0x35	; 53
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e3       	ldi	r30, 0x35	; 53
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <MDIO_voidSetPinValue+0x17c>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <MDIO_voidSetPinValue+0x178>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	4b c0       	rjmp	.+150    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
					break;
				case HIGH:
					SET_BIT (PORTC,Copy_u8PinNumber );
    1af0:	a5 e3       	ldi	r26, 0x35	; 53
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e3       	ldi	r30, 0x35	; 53
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <MDIO_voidSetPinValue+0x1a6>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <MDIO_voidSetPinValue+0x1a2>
    1b12:	84 2b       	or	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	37 c0       	rjmp	.+110    	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
				default:
					break;
            }
        	break;
        case (PORTD_ID):
            switch (Copy_u8Value )
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	31 f0       	breq	.+12     	; 0x1b36 <MDIO_voidSetPinValue+0x1ce>
    1b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2e:	21 30       	cpi	r18, 0x01	; 1
    1b30:	31 05       	cpc	r19, r1
    1b32:	b1 f0       	breq	.+44     	; 0x1b60 <MDIO_voidSetPinValue+0x1f8>
    1b34:	28 c0       	rjmp	.+80     	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
            {
				case LOW:
					CLR_BIT (PORTD,Copy_u8PinNumber );
    1b36:	a2 e3       	ldi	r26, 0x32	; 50
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e2 e3       	ldi	r30, 0x32	; 50
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <MDIO_voidSetPinValue+0x1ec>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <MDIO_voidSetPinValue+0x1e8>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <MDIO_voidSetPinValue+0x21e>
					break;
				case HIGH:
					SET_BIT (PORTD,Copy_u8PinNumber );
    1b60:	a2 e3       	ldi	r26, 0x32	; 50
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e2 e3       	ldi	r30, 0x32	; 50
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <MDIO_voidSetPinValue+0x216>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <MDIO_voidSetPinValue+0x212>
    1b82:	84 2b       	or	r24, r20
    1b84:	8c 93       	st	X, r24
				default:
					break;
            }
        	break;
    }
}
    1b86:	2d 96       	adiw	r28, 0x0d	; 13
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <MDIO_voidReadPinValue>:

u8   MDIO_voidReadPinValue (u8 Copy_u8PortName ,u8 Copy_u8PinNumber)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <MDIO_voidReadPinValue+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <MDIO_voidReadPinValue+0x8>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	8a 83       	std	Y+2, r24	; 0x02
    1ba8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8PinValue ;
    switch (Copy_u8PortName )
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3d 83       	std	Y+5, r19	; 0x05
    1bb2:	2c 83       	std	Y+4, r18	; 0x04
    1bb4:	4c 81       	ldd	r20, Y+4	; 0x04
    1bb6:	5d 81       	ldd	r21, Y+5	; 0x05
    1bb8:	42 30       	cpi	r20, 0x02	; 2
    1bba:	51 05       	cpc	r21, r1
    1bbc:	41 f1       	breq	.+80     	; 0x1c0e <MDIO_voidReadPinValue+0x76>
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc2:	83 30       	cpi	r24, 0x03	; 3
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	34 f4       	brge	.+12     	; 0x1bd4 <MDIO_voidReadPinValue+0x3c>
    1bc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bca:	3d 81       	ldd	r19, Y+5	; 0x05
    1bcc:	21 30       	cpi	r18, 0x01	; 1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	61 f0       	breq	.+24     	; 0x1bea <MDIO_voidReadPinValue+0x52>
    1bd2:	52 c0       	rjmp	.+164    	; 0x1c78 <MDIO_voidReadPinValue+0xe0>
    1bd4:	4c 81       	ldd	r20, Y+4	; 0x04
    1bd6:	5d 81       	ldd	r21, Y+5	; 0x05
    1bd8:	43 30       	cpi	r20, 0x03	; 3
    1bda:	51 05       	cpc	r21, r1
    1bdc:	51 f1       	breq	.+84     	; 0x1c32 <MDIO_voidReadPinValue+0x9a>
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	9d 81       	ldd	r25, Y+5	; 0x05
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	91 05       	cpc	r25, r1
    1be6:	b9 f1       	breq	.+110    	; 0x1c56 <MDIO_voidReadPinValue+0xbe>
    1be8:	47 c0       	rjmp	.+142    	; 0x1c78 <MDIO_voidReadPinValue+0xe0>
    {
    case PORTA_ID:
        Local_u8PinValue = GET_BIT (PINA, Copy_u8PinNumber); break;
    1bea:	e9 e3       	ldi	r30, 0x39	; 57
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a9 01       	movw	r20, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <MDIO_voidReadPinValue+0x6a>
    1bfe:	55 95       	asr	r21
    1c00:	47 95       	ror	r20
    1c02:	8a 95       	dec	r24
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <MDIO_voidReadPinValue+0x66>
    1c06:	ca 01       	movw	r24, r20
    1c08:	81 70       	andi	r24, 0x01	; 1
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	35 c0       	rjmp	.+106    	; 0x1c78 <MDIO_voidReadPinValue+0xe0>
    case PORTB_ID:
        Local_u8PinValue = GET_BIT (PINB, Copy_u8PinNumber); break;
    1c0e:	e6 e3       	ldi	r30, 0x36	; 54
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a9 01       	movw	r20, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <MDIO_voidReadPinValue+0x8e>
    1c22:	55 95       	asr	r21
    1c24:	47 95       	ror	r20
    1c26:	8a 95       	dec	r24
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <MDIO_voidReadPinValue+0x8a>
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	81 70       	andi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	23 c0       	rjmp	.+70     	; 0x1c78 <MDIO_voidReadPinValue+0xe0>
    case PORTC_ID:
        Local_u8PinValue = GET_BIT (PINC, Copy_u8PinNumber); break;
    1c32:	e3 e3       	ldi	r30, 0x33	; 51
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <MDIO_voidReadPinValue+0xb2>
    1c46:	55 95       	asr	r21
    1c48:	47 95       	ror	r20
    1c4a:	8a 95       	dec	r24
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <MDIO_voidReadPinValue+0xae>
    1c4e:	ca 01       	movw	r24, r20
    1c50:	81 70       	andi	r24, 0x01	; 1
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	11 c0       	rjmp	.+34     	; 0x1c78 <MDIO_voidReadPinValue+0xe0>
    case PORTD_ID:
        Local_u8PinValue = GET_BIT (PIND, Copy_u8PinNumber); break;
    1c56:	e0 e3       	ldi	r30, 0x30	; 48
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a9 01       	movw	r20, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <MDIO_voidReadPinValue+0xd6>
    1c6a:	55 95       	asr	r21
    1c6c:	47 95       	ror	r20
    1c6e:	8a 95       	dec	r24
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <MDIO_voidReadPinValue+0xd2>
    1c72:	ca 01       	movw	r24, r20
    1c74:	81 70       	andi	r24, 0x01	; 1
    1c76:	89 83       	std	Y+1, r24	; 0x01
    default: break;
    }
    return Local_u8PinValue ;
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <MDIO_voidTogglePin>:

void MDIO_voidTogglePin (u8 Copy_u8PortName ,u8 Copy_u8PinNumber )
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <MDIO_voidTogglePin+0x6>
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <MDIO_voidTogglePin+0x8>
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	3c 83       	std	Y+4, r19	; 0x04
    1ca2:	2b 83       	std	Y+3, r18	; 0x03
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	91 05       	cpc	r25, r1
    1cac:	51 f1       	breq	.+84     	; 0x1d02 <MDIO_voidTogglePin+0x78>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	23 30       	cpi	r18, 0x03	; 3
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	34 f4       	brge	.+12     	; 0x1cc4 <MDIO_voidTogglePin+0x3a>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	61 f0       	breq	.+24     	; 0x1cda <MDIO_voidTogglePin+0x50>
    1cc2:	5a c0       	rjmp	.+180    	; 0x1d78 <MDIO_voidTogglePin+0xee>
    1cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc8:	23 30       	cpi	r18, 0x03	; 3
    1cca:	31 05       	cpc	r19, r1
    1ccc:	71 f1       	breq	.+92     	; 0x1d2a <MDIO_voidTogglePin+0xa0>
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	84 30       	cpi	r24, 0x04	; 4
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	e9 f1       	breq	.+122    	; 0x1d52 <MDIO_voidTogglePin+0xc8>
    1cd8:	4f c0       	rjmp	.+158    	; 0x1d78 <MDIO_voidTogglePin+0xee>
	{
	case PORTA_ID:
		TOG_BIT(PORTA,Copy_u8PinNumber); break;
    1cda:	ab e3       	ldi	r26, 0x3B	; 59
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	eb e3       	ldi	r30, 0x3B	; 59
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <MDIO_voidTogglePin+0x6e>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <MDIO_voidTogglePin+0x6a>
    1cfc:	84 27       	eor	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	3b c0       	rjmp	.+118    	; 0x1d78 <MDIO_voidTogglePin+0xee>
	case PORTB_ID:
		TOG_BIT(PORTB,Copy_u8PinNumber); break;
    1d02:	a8 e3       	ldi	r26, 0x38	; 56
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e8 e3       	ldi	r30, 0x38	; 56
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <MDIO_voidTogglePin+0x96>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <MDIO_voidTogglePin+0x92>
    1d24:	84 27       	eor	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	27 c0       	rjmp	.+78     	; 0x1d78 <MDIO_voidTogglePin+0xee>
	case PORTC_ID:
		TOG_BIT(PORTC,Copy_u8PinNumber); break;
    1d2a:	a5 e3       	ldi	r26, 0x35	; 53
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e5 e3       	ldi	r30, 0x35	; 53
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <MDIO_voidTogglePin+0xbe>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <MDIO_voidTogglePin+0xba>
    1d4c:	84 27       	eor	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	13 c0       	rjmp	.+38     	; 0x1d78 <MDIO_voidTogglePin+0xee>
	case PORTD_ID:
		TOG_BIT(PORTD,Copy_u8PinNumber); break;
    1d52:	a2 e3       	ldi	r26, 0x32	; 50
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e2 e3       	ldi	r30, 0x32	; 50
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <MDIO_voidTogglePin+0xe6>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <MDIO_voidTogglePin+0xe2>
    1d74:	84 27       	eor	r24, r20
    1d76:	8c 93       	st	X, r24
	}
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <MDIO_voidSetPortDirection>:
void MDIO_voidSetPortDirection (u8 Copy_u8PortName , u8 Copy_u8Direction)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	2c 97       	sbiw	r28, 0x0c	; 12
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	3c 87       	std	Y+12, r19	; 0x0c
    1da6:	2b 87       	std	Y+11, r18	; 0x0b
    1da8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1daa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dac:	82 30       	cpi	r24, 0x02	; 2
    1dae:	91 05       	cpc	r25, r1
    1db0:	79 f1       	breq	.+94     	; 0x1e10 <MDIO_voidSetPortDirection+0x8a>
    1db2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1db4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1db6:	23 30       	cpi	r18, 0x03	; 3
    1db8:	31 05       	cpc	r19, r1
    1dba:	34 f4       	brge	.+12     	; 0x1dc8 <MDIO_voidSetPortDirection+0x42>
    1dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	69 f0       	breq	.+26     	; 0x1de0 <MDIO_voidSetPortDirection+0x5a>
    1dc6:	68 c0       	rjmp	.+208    	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
    1dc8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dca:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dcc:	23 30       	cpi	r18, 0x03	; 3
    1dce:	31 05       	cpc	r19, r1
    1dd0:	b1 f1       	breq	.+108    	; 0x1e3e <MDIO_voidSetPortDirection+0xb8>
    1dd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd6:	84 30       	cpi	r24, 0x04	; 4
    1dd8:	91 05       	cpc	r25, r1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <MDIO_voidSetPortDirection+0x58>
    1ddc:	47 c0       	rjmp	.+142    	; 0x1e6c <MDIO_voidSetPortDirection+0xe6>
    1dde:	5c c0       	rjmp	.+184    	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
		{
		case PORTA_ID:
			switch (Copy_u8Direction)
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	3a 87       	std	Y+10, r19	; 0x0a
    1de8:	29 87       	std	Y+9, r18	; 0x09
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	59 f0       	breq	.+22     	; 0x1e08 <MDIO_voidSetPortDirection+0x82>
    1df2:	29 85       	ldd	r18, Y+9	; 0x09
    1df4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1df6:	21 30       	cpi	r18, 0x01	; 1
    1df8:	31 05       	cpc	r19, r1
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <MDIO_voidSetPortDirection+0x78>
    1dfc:	4d c0       	rjmp	.+154    	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRA = 0xFF;
    1dfe:	ea e3       	ldi	r30, 0x3A	; 58
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	80 83       	st	Z, r24
    1e06:	48 c0       	rjmp	.+144    	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRA = 0x00;
    1e08:	ea e3       	ldi	r30, 0x3A	; 58
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	10 82       	st	Z, r1
    1e0e:	44 c0       	rjmp	.+136    	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
			default :
				break ;
			}
			break ;
		case PORTB_ID:
			switch (Copy_u8Direction)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	38 87       	std	Y+8, r19	; 0x08
    1e18:	2f 83       	std	Y+7, r18	; 0x07
    1e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1c:	98 85       	ldd	r25, Y+8	; 0x08
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	51 f0       	breq	.+20     	; 0x1e36 <MDIO_voidSetPortDirection+0xb0>
    1e22:	2f 81       	ldd	r18, Y+7	; 0x07
    1e24:	38 85       	ldd	r19, Y+8	; 0x08
    1e26:	21 30       	cpi	r18, 0x01	; 1
    1e28:	31 05       	cpc	r19, r1
    1e2a:	b1 f5       	brne	.+108    	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRB = 0xFF;
    1e2c:	e7 e3       	ldi	r30, 0x37	; 55
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	80 83       	st	Z, r24
    1e34:	31 c0       	rjmp	.+98     	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRB = 0x00;
    1e36:	e7 e3       	ldi	r30, 0x37	; 55
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	10 82       	st	Z, r1
    1e3c:	2d c0       	rjmp	.+90     	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
			default :
				break ;
			}
			break ;
		case PORTC_ID:
			switch (Copy_u8Direction)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3e 83       	std	Y+6, r19	; 0x06
    1e46:	2d 83       	std	Y+5, r18	; 0x05
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	51 f0       	breq	.+20     	; 0x1e64 <MDIO_voidSetPortDirection+0xde>
    1e50:	2d 81       	ldd	r18, Y+5	; 0x05
    1e52:	3e 81       	ldd	r19, Y+6	; 0x06
    1e54:	21 30       	cpi	r18, 0x01	; 1
    1e56:	31 05       	cpc	r19, r1
    1e58:	f9 f4       	brne	.+62     	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRC = 0xFF;
    1e5a:	e4 e3       	ldi	r30, 0x34	; 52
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
    1e60:	80 83       	st	Z, r24
    1e62:	1a c0       	rjmp	.+52     	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRC = 0x00;
    1e64:	e4 e3       	ldi	r30, 0x34	; 52
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	10 82       	st	Z, r1
    1e6a:	16 c0       	rjmp	.+44     	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
			default :
				break ;
			}
			break ;
		case PORTD_ID:
			switch (Copy_u8Direction)
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3c 83       	std	Y+4, r19	; 0x04
    1e74:	2b 83       	std	Y+3, r18	; 0x03
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	51 f0       	breq	.+20     	; 0x1e92 <MDIO_voidSetPortDirection+0x10c>
    1e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e80:	3c 81       	ldd	r19, Y+4	; 0x04
    1e82:	21 30       	cpi	r18, 0x01	; 1
    1e84:	31 05       	cpc	r19, r1
    1e86:	41 f4       	brne	.+16     	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
			{
			case OUPUT:
				DDRD = 0xFF;
    1e88:	e1 e3       	ldi	r30, 0x31	; 49
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	8f ef       	ldi	r24, 0xFF	; 255
    1e8e:	80 83       	st	Z, r24
    1e90:	03 c0       	rjmp	.+6      	; 0x1e98 <MDIO_voidSetPortDirection+0x112>
				break ;
			case INPUT:
				DDRD = 0x00;
    1e92:	e1 e3       	ldi	r30, 0x31	; 49
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	10 82       	st	Z, r1
			break ;
		default :
			// do nothing
			break ;
		}
}
    1e98:	2c 96       	adiw	r28, 0x0c	; 12
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <MDIO_voidSetPortSpecificDirection>:

void MDIO_voidSetPortSpecificDirection (u8 Copy_u8PortName , u8 Copy_u8SpecificDirection)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <MDIO_voidSetPortSpecificDirection+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <MDIO_voidSetPortSpecificDirection+0x8>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	3c 83       	std	Y+4, r19	; 0x04
    1ec2:	2b 83       	std	Y+3, r18	; 0x03
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	82 30       	cpi	r24, 0x02	; 2
    1eca:	91 05       	cpc	r25, r1
    1ecc:	d9 f0       	breq	.+54     	; 0x1f04 <MDIO_voidSetPortSpecificDirection+0x5a>
    1ece:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed2:	23 30       	cpi	r18, 0x03	; 3
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	34 f4       	brge	.+12     	; 0x1ee4 <MDIO_voidSetPortSpecificDirection+0x3a>
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	91 05       	cpc	r25, r1
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <MDIO_voidSetPortSpecificDirection+0x50>
    1ee2:	1e c0       	rjmp	.+60     	; 0x1f20 <MDIO_voidSetPortSpecificDirection+0x76>
    1ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee8:	23 30       	cpi	r18, 0x03	; 3
    1eea:	31 05       	cpc	r19, r1
    1eec:	81 f0       	breq	.+32     	; 0x1f0e <MDIO_voidSetPortSpecificDirection+0x64>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	81 f0       	breq	.+32     	; 0x1f18 <MDIO_voidSetPortSpecificDirection+0x6e>
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <MDIO_voidSetPortSpecificDirection+0x76>
		{
		case PORTA_ID:
			SET_REG(DDRA, Copy_u8SpecificDirection);
    1efa:	ea e3       	ldi	r30, 0x3A	; 58
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	80 83       	st	Z, r24
    1f02:	0e c0       	rjmp	.+28     	; 0x1f20 <MDIO_voidSetPortSpecificDirection+0x76>
			break ;
		case PORTB_ID:
			SET_REG(DDRB, Copy_u8SpecificDirection);
    1f04:	e7 e3       	ldi	r30, 0x37	; 55
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	80 83       	st	Z, r24
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <MDIO_voidSetPortSpecificDirection+0x76>
			break ;
		case PORTC_ID:
			SET_REG(DDRC, Copy_u8SpecificDirection);
    1f0e:	e4 e3       	ldi	r30, 0x34	; 52
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	80 83       	st	Z, r24
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <MDIO_voidSetPortSpecificDirection+0x76>
			break ;
		case PORTD_ID:
			SET_REG(DDRD, Copy_u8SpecificDirection);
    1f18:	e1 e3       	ldi	r30, 0x31	; 49
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	80 83       	st	Z, r24
			break ;
		default :
			// do nothing
			break ;
		}
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue (u8 Copy_u8PortName , u8 Copy_u8Value)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <MDIO_voidSetPortValue+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <MDIO_voidSetPortValue+0x8>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3c 83       	std	Y+4, r19	; 0x04
    1f46:	2b 83       	std	Y+3, r18	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	91 05       	cpc	r25, r1
    1f50:	d9 f0       	breq	.+54     	; 0x1f88 <MDIO_voidSetPortValue+0x5a>
    1f52:	2b 81       	ldd	r18, Y+3	; 0x03
    1f54:	3c 81       	ldd	r19, Y+4	; 0x04
    1f56:	23 30       	cpi	r18, 0x03	; 3
    1f58:	31 05       	cpc	r19, r1
    1f5a:	34 f4       	brge	.+12     	; 0x1f68 <MDIO_voidSetPortValue+0x3a>
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	91 05       	cpc	r25, r1
    1f64:	61 f0       	breq	.+24     	; 0x1f7e <MDIO_voidSetPortValue+0x50>
    1f66:	1e c0       	rjmp	.+60     	; 0x1fa4 <MDIO_voidSetPortValue+0x76>
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	23 30       	cpi	r18, 0x03	; 3
    1f6e:	31 05       	cpc	r19, r1
    1f70:	81 f0       	breq	.+32     	; 0x1f92 <MDIO_voidSetPortValue+0x64>
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	84 30       	cpi	r24, 0x04	; 4
    1f78:	91 05       	cpc	r25, r1
    1f7a:	81 f0       	breq	.+32     	; 0x1f9c <MDIO_voidSetPortValue+0x6e>
    1f7c:	13 c0       	rjmp	.+38     	; 0x1fa4 <MDIO_voidSetPortValue+0x76>
		{
		case PORTA_ID:
			PORTA = Copy_u8Value; // equal to SET_REG(PORTA, Copy_u8Value);
    1f7e:	eb e3       	ldi	r30, 0x3B	; 59
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	80 83       	st	Z, r24
    1f86:	0e c0       	rjmp	.+28     	; 0x1fa4 <MDIO_voidSetPortValue+0x76>
			break;
		case PORTB_ID:
			PORTB = Copy_u8Value;
    1f88:	e8 e3       	ldi	r30, 0x38	; 56
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	80 83       	st	Z, r24
    1f90:	09 c0       	rjmp	.+18     	; 0x1fa4 <MDIO_voidSetPortValue+0x76>
			break ;
		case PORTC_ID:
			PORTC = Copy_u8Value;
    1f92:	e5 e3       	ldi	r30, 0x35	; 53
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	80 83       	st	Z, r24
    1f9a:	04 c0       	rjmp	.+8      	; 0x1fa4 <MDIO_voidSetPortValue+0x76>
			break;
		case PORTD_ID:
			PORTD = Copy_u8Value;
    1f9c:	e2 e3       	ldi	r30, 0x32	; 50
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	80 83       	st	Z, r24
			break;
		default :
			break ;
		}
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <MDIO_voidGetPortValue>:
u8 MDIO_voidGetPortValue (u8 Copy_u8PortName)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <MDIO_voidGetPortValue+0x6>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <MDIO_voidGetPortValue+0x8>
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortValue;
	switch (Copy_u8PortName)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	3c 83       	std	Y+4, r19	; 0x04
    1fc8:	2b 83       	std	Y+3, r18	; 0x03
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	82 30       	cpi	r24, 0x02	; 2
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	d9 f0       	breq	.+54     	; 0x200a <MDIO_voidGetPortValue+0x58>
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	23 30       	cpi	r18, 0x03	; 3
    1fda:	31 05       	cpc	r19, r1
    1fdc:	34 f4       	brge	.+12     	; 0x1fea <MDIO_voidGetPortValue+0x38>
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	61 f0       	breq	.+24     	; 0x2000 <MDIO_voidGetPortValue+0x4e>
    1fe8:	1e c0       	rjmp	.+60     	; 0x2026 <MDIO_voidGetPortValue+0x74>
    1fea:	2b 81       	ldd	r18, Y+3	; 0x03
    1fec:	3c 81       	ldd	r19, Y+4	; 0x04
    1fee:	23 30       	cpi	r18, 0x03	; 3
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	81 f0       	breq	.+32     	; 0x2014 <MDIO_voidGetPortValue+0x62>
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	84 30       	cpi	r24, 0x04	; 4
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	81 f0       	breq	.+32     	; 0x201e <MDIO_voidGetPortValue+0x6c>
    1ffe:	13 c0       	rjmp	.+38     	; 0x2026 <MDIO_voidGetPortValue+0x74>
		{
		case PORTA_ID:
			Local_u8PortValue = PORTA;
    2000:	eb e3       	ldi	r30, 0x3B	; 59
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <MDIO_voidGetPortValue+0x74>
			break;
		case PORTB_ID:
			Local_u8PortValue = PORTB;
    200a:	e8 e3       	ldi	r30, 0x38	; 56
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	09 c0       	rjmp	.+18     	; 0x2026 <MDIO_voidGetPortValue+0x74>
			break ;
		case PORTC_ID:
			Local_u8PortValue = PORTC;
    2014:	e5 e3       	ldi	r30, 0x35	; 53
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	04 c0       	rjmp	.+8      	; 0x2026 <MDIO_voidGetPortValue+0x74>
			break;
		case PORTD_ID:
			Local_u8PortValue = PORTD;
    201e:	e2 e3       	ldi	r30, 0x32	; 50
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	89 83       	std	Y+1, r24	; 0x01
			break;
		default :
			break ;
		}
	return Local_u8PortValue ;
    2026:	89 81       	ldd	r24, Y+1	; 0x01
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <ADC_voidInit>:
static void (*ADC_pvoidNotifiFunction) (void) = NULL;
volatile u16 ADC_u16DigitalResult;
volatile u8 ADC_u8DigitalValue;

void ADC_voidInit(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    /*Check For The ADC Enable*/
    #if ADC_ENABLE  == ENABLE
        SET_BIT(ADCSRA, ADCSRA_ADEN);
    203e:	a6 e2       	ldi	r26, 0x26	; 38
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e6 e2       	ldi	r30, 0x26	; 38
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	80 68       	ori	r24, 0x80	; 128
    204a:	8c 93       	st	X, r24
        #error "Error, ADC_ENABLE Configuration Error"
    #endif

    /*Check For The ADC Interrupt*/ 
    #if ADC_INTERRUPT_STATUS == ENABLE
        SET_BIT(ADCSRA, ADCSRA_ADIE);
    204c:	a6 e2       	ldi	r26, 0x26	; 38
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e6 e2       	ldi	r30, 0x26	; 38
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	88 60       	ori	r24, 0x08	; 8
    2058:	8c 93       	st	X, r24
    #else
        #error("Error, ADC_INTERRUPT_ENABLE Configuration Error")
    #endif

    /* Set the reference selection option using Bt Masking */
    ADMUX &= REF_SEL_BIT_MASK;
    205a:	a7 e2       	ldi	r26, 0x27	; 39
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e7 e2       	ldi	r30, 0x27	; 39
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8f 73       	andi	r24, 0x3F	; 63
    2066:	8c 93       	st	X, r24
    ADMUX |= ADC_REFERENCE_SELECTION;
    2068:	a7 e2       	ldi	r26, 0x27	; 39
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e7 e2       	ldi	r30, 0x27	; 39
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8c 93       	st	X, r24

    /*Check For The ADC Adjust Result*/
    #if ADC_ADJUST_RESULT == RIGHT_ADJUST
        CLR_BIT(ADMUX, ADMUX_ADLAR);
    #elif ADC_ADJUST_RESULT == LEFT_ADJUST
        SET_BIT(ADMUX, ADMUX_ADLAR);
    2074:	a7 e2       	ldi	r26, 0x27	; 39
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e7 e2       	ldi	r30, 0x27	; 39
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 62       	ori	r24, 0x20	; 32
    2080:	8c 93       	st	X, r24
    #else
        #error("Error, ADC_ADJUST_RESULT Confiuration Error")
    #endif

    /* Set The Prescaler Values*/
    ADCSRA &= DIV_FACTOR_SEL_BIT_MASK;
    2082:	a6 e2       	ldi	r26, 0x26	; 38
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e6 e2       	ldi	r30, 0x26	; 38
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	88 7f       	andi	r24, 0xF8	; 248
    208e:	8c 93       	st	X, r24
    ADCSRA |= ADC_PRESCALER_VALUE;
    2090:	a6 e2       	ldi	r26, 0x26	; 38
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e6 e2       	ldi	r30, 0x26	; 38
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	87 60       	ori	r24, 0x07	; 7
    209c:	8c 93       	st	X, r24
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <ADC_voidInterruptControl>:


void ADC_voidInterruptControl(u8 Copy_u8InterruptStatus)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <ADC_voidInterruptControl+0x6>
    20aa:	0f 92       	push	r0
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8InterruptStatus)
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3b 83       	std	Y+3, r19	; 0x03
    20ba:	2a 83       	std	Y+2, r18	; 0x02
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	31 f0       	breq	.+12     	; 0x20d0 <ADC_voidInterruptControl+0x2c>
    20c4:	2a 81       	ldd	r18, Y+2	; 0x02
    20c6:	3b 81       	ldd	r19, Y+3	; 0x03
    20c8:	21 30       	cpi	r18, 0x01	; 1
    20ca:	31 05       	cpc	r19, r1
    20cc:	49 f0       	breq	.+18     	; 0x20e0 <ADC_voidInterruptControl+0x3c>
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <ADC_voidInterruptControl+0x4a>
    {
        case DISABLE:
            CLR_BIT(ADCSRA, ADCSRA_ADIE);
    20d0:	a6 e2       	ldi	r26, 0x26	; 38
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e6 e2       	ldi	r30, 0x26	; 38
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	87 7f       	andi	r24, 0xF7	; 247
    20dc:	8c 93       	st	X, r24
    20de:	07 c0       	rjmp	.+14     	; 0x20ee <ADC_voidInterruptControl+0x4a>
        break;

        case ENABLE:
            SET_BIT(ADCSRA, ADCSRA_ADIE);
    20e0:	a6 e2       	ldi	r26, 0x26	; 38
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e6 e2       	ldi	r30, 0x26	; 38
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	88 60       	ori	r24, 0x08	; 8
    20ec:	8c 93       	st	X, r24

        default:
            /*Do Noting*/
        break;
    }
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <ADC_u8StartConversionSynchronous>:

// Post-buid Channel Selection 
u8 ADC_u8StartConversionSynchronous(u8 Copy_u8ChannelNumber) // Polling Mechanism (Synchronous or Blocking)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <ADC_u8StartConversionSynchronous+0x6>
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8DigitalValue;

    /* Set channle of ADC */
    ADMUX &= CHANNEL_SELECTION_MASK;
    2106:	a7 e2       	ldi	r26, 0x27	; 39
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e7 e2       	ldi	r30, 0x27	; 39
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	80 7e       	andi	r24, 0xE0	; 224
    2112:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ChannelNumber;
    2114:	a7 e2       	ldi	r26, 0x27	; 39
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e7 e2       	ldi	r30, 0x27	; 39
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	90 81       	ld	r25, Z
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	89 2b       	or	r24, r25
    2122:	8c 93       	st	X, r24

    /* Start Conversion */
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2124:	a6 e2       	ldi	r26, 0x26	; 38
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e6 e2       	ldi	r30, 0x26	; 38
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 64       	ori	r24, 0x40	; 64
    2130:	8c 93       	st	X, r24

    /* Polling (busy wait) till flag is raised */
    while(GET_BIT(ADCSRA, ADCSRA_ADIF) == FALSE);
    2132:	e6 e2       	ldi	r30, 0x26	; 38
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 95       	swap	r24
    213a:	8f 70       	andi	r24, 0x0F	; 15
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	81 70       	andi	r24, 0x01	; 1
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	a9 f3       	breq	.-22     	; 0x2132 <ADC_u8StartConversionSynchronous+0x38>

    /* Clear The Flag */
    SET_BIT(ADCSRA, ADCSRA_ADIF);
    2148:	a6 e2       	ldi	r26, 0x26	; 38
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 61       	ori	r24, 0x10	; 16
    2154:	8c 93       	st	X, r24

    /* Check For Left or Right Adjust */
    #if ADC_ADJUST_RESULT == LEFT_ADJUST
        Local_u8DigitalValue = ADCH;
    2156:	e5 e2       	ldi	r30, 0x25	; 37
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	89 83       	std	Y+1, r24	; 0x01
    #elif ADC_ADJUST_RESULT == RIGHT_ADJUST
        Local_u8DigitalValue = ADCL;
    #endif

    /* Return The Digital Value */
    return Local_u8DigitalValue;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <ADC_u8StartConversionAsynchronous>:

void ADC_u8StartConversionAsynchronous(u8 Copy_u8ChannelNumber, void (*NotifiFunction)(void)) // Polling Mechanism (Asynchronous)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <ADC_u8StartConversionAsynchronous+0x6>
    2170:	0f 92       	push	r0
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	7b 83       	std	Y+3, r23	; 0x03
    217a:	6a 83       	std	Y+2, r22	; 0x02
    /* Set channle of ADC */
    ADMUX &= CHANNEL_SELECTION_MASK;
    217c:	a7 e2       	ldi	r26, 0x27	; 39
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e7 e2       	ldi	r30, 0x27	; 39
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 7e       	andi	r24, 0xE0	; 224
    2188:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ChannelNumber;
    218a:	a7 e2       	ldi	r26, 0x27	; 39
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e7 e2       	ldi	r30, 0x27	; 39
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	90 81       	ld	r25, Z
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	89 2b       	or	r24, r25
    2198:	8c 93       	st	X, r24

    /* Set Callback Function in the Global Pointer to Function */
    ADC_pvoidNotifiFunction = NotifiFunction;
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	90 93 75 01 	sts	0x0175, r25
    21a2:	80 93 74 01 	sts	0x0174, r24

    /* Start Conversion */
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    21a6:	a6 e2       	ldi	r26, 0x26	; 38
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e6 e2       	ldi	r30, 0x26	; 38
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	80 64       	ori	r24, 0x40	; 64
    21b2:	8c 93       	st	X, r24
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	2f 93       	push	r18
    21cc:	3f 93       	push	r19
    21ce:	4f 93       	push	r20
    21d0:	5f 93       	push	r21
    21d2:	6f 93       	push	r22
    21d4:	7f 93       	push	r23
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	af 93       	push	r26
    21dc:	bf 93       	push	r27
    21de:	ef 93       	push	r30
    21e0:	ff 93       	push	r31
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    ADC_voidInterruptControl(DISABLE);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	0e 94 52 10 	call	0x20a4	; 0x20a4 <ADC_voidInterruptControl>
    
    ADC_u8DigitalValue = ADCH;
    21f0:	e5 e2       	ldi	r30, 0x25	; 37
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	80 93 7b 01 	sts	0x017B, r24

    if (ADC_pvoidNotifiFunction != NULL)
    21fa:	80 91 74 01 	lds	r24, 0x0174
    21fe:	90 91 75 01 	lds	r25, 0x0175
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	29 f0       	breq	.+10     	; 0x2210 <__vector_16+0x50>
    {
        ADC_pvoidNotifiFunction();
    2206:	e0 91 74 01 	lds	r30, 0x0174
    220a:	f0 91 75 01 	lds	r31, 0x0175
    220e:	09 95       	icall
    }
    else
    {
        /* Do Nothing */
    }
    ADC_voidInterruptControl(ENABLE);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	0e 94 52 10 	call	0x20a4	; 0x20a4 <ADC_voidInterruptControl>
}
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	ff 91       	pop	r31
    221c:	ef 91       	pop	r30
    221e:	bf 91       	pop	r27
    2220:	af 91       	pop	r26
    2222:	9f 91       	pop	r25
    2224:	8f 91       	pop	r24
    2226:	7f 91       	pop	r23
    2228:	6f 91       	pop	r22
    222a:	5f 91       	pop	r21
    222c:	4f 91       	pop	r20
    222e:	3f 91       	pop	r19
    2230:	2f 91       	pop	r18
    2232:	0f 90       	pop	r0
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	0f 90       	pop	r0
    2238:	1f 90       	pop	r1
    223a:	18 95       	reti

0000223c <HULTRASONIC_voidInit>:
u8 Global_u8StateCounter=0;


void ICU_HW (void);
void HULTRASONIC_voidInit(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	// set ICP1 Echo pin as INPUT
	MDIO_voidSetPinDirection(PORTD_ID,PIN6_ID,INPUT);
    2244:	84 e0       	ldi	r24, 0x04	; 4
    2246:	66 e0       	ldi	r22, 0x06	; 6
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <MDIO_voidSetPinDirection>
	// set direction for trigg to be OUTPUT
	MDIO_voidSetPinDirection(TRIG_PORT,TRIG_PIN,OUPUT);
    224e:	83 e0       	ldi	r24, 0x03	; 3
    2250:	65 e0       	ldi	r22, 0x05	; 5
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 c1 0b 	call	0x1782	; 0x1782 <MDIO_voidSetPinDirection>

	// Initialize ICU
	ICU_voidInterruptControl(ICU_ENABLE);
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	0e 94 1e 09 	call	0x123c	; 0x123c <ICU_voidInterruptControl>
	
	// Set Call Back
	ICU_vodSetCallBack(&ICU_HW);
    225e:	8e e5       	ldi	r24, 0x5E	; 94
    2260:	92 e1       	ldi	r25, 0x12	; 18
    2262:	0e 94 53 09 	call	0x12a6	; 0x12a6 <ICU_vodSetCallBack>

	/* Enable Global Interrupt */
    M_GIE_void_enable();
    2266:	0e 94 28 0a 	call	0x1450	; 0x1450 <M_GIE_void_enable>

	// Initialize Timer1
	TIMER1_voidInit(); // timer1 start
    226a:	0e 94 48 07 	call	0xe90	; 0xe90 <TIMER1_voidInit>
}
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <HULTRASONIC_voidReadDistance>:

void HULTRASONIC_voidReadDistance(u32 *Local_pu32Distance)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	a0 97       	sbiw	r28, 0x20	; 32
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	98 a3       	std	Y+32, r25	; 0x20
    228a:	8f 8f       	std	Y+31, r24	; 0x1f
	u16 Local_u16OnTicks =0;
    228c:	1e 8e       	std	Y+30, r1	; 0x1e
    228e:	1d 8e       	std	Y+29, r1	; 0x1d
	Global_u8StateCounter = 0;
    2290:	10 92 7a 01 	sts	0x017A, r1


	// Initialize ICU
	ICU_voidInterruptControl(ICU_ENABLE);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	0e 94 1e 09 	call	0x123c	; 0x123c <ICU_voidInterruptControl>
	/* Set The Trigger to be Rising Edge */
    ICU_voidSetTriggerSignal(ICU_RISING_EDGE);	
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	0e 94 65 09 	call	0x12ca	; 0x12ca <ICU_voidSetTriggerSignal>

	// Send Trigger
	// Send High
	MDIO_voidSetPinValue(TRIG_PORT,TRIG_PIN, HIGH );
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	65 e0       	ldi	r22, 0x05	; 5
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e2       	ldi	r26, 0x20	; 32
    22b0:	b1 e4       	ldi	r27, 0x41	; 65
    22b2:	8d 8b       	std	Y+21, r24	; 0x15
    22b4:	9e 8b       	std	Y+22, r25	; 0x16
    22b6:	af 8b       	std	Y+23, r26	; 0x17
    22b8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	2b ea       	ldi	r18, 0xAB	; 171
    22c4:	3a ea       	ldi	r19, 0xAA	; 170
    22c6:	4a e2       	ldi	r20, 0x2A	; 42
    22c8:	50 e4       	ldi	r21, 0x40	; 64
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	89 8b       	std	Y+17, r24	; 0x11
    22d4:	9a 8b       	std	Y+18, r25	; 0x12
    22d6:	ab 8b       	std	Y+19, r26	; 0x13
    22d8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22da:	69 89       	ldd	r22, Y+17	; 0x11
    22dc:	7a 89       	ldd	r23, Y+18	; 0x12
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	1c f4       	brge	.+6      	; 0x22f8 <HULTRASONIC_voidReadDistance+0x84>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	88 8b       	std	Y+16, r24	; 0x10
    22f6:	91 c0       	rjmp	.+290    	; 0x241a <HULTRASONIC_voidReadDistance+0x1a6>
	else if (__tmp > 255)
    22f8:	69 89       	ldd	r22, Y+17	; 0x11
    22fa:	7a 89       	ldd	r23, Y+18	; 0x12
    22fc:	8b 89       	ldd	r24, Y+19	; 0x13
    22fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	53 e4       	ldi	r21, 0x43	; 67
    2308:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	0c f0       	brlt	.+2      	; 0x2312 <HULTRASONIC_voidReadDistance+0x9e>
    2310:	7b c0       	rjmp	.+246    	; 0x2408 <HULTRASONIC_voidReadDistance+0x194>
	{
		_delay_ms(__us / 1000.0);
    2312:	6d 89       	ldd	r22, Y+21	; 0x15
    2314:	7e 89       	ldd	r23, Y+22	; 0x16
    2316:	8f 89       	ldd	r24, Y+23	; 0x17
    2318:	98 8d       	ldd	r25, Y+24	; 0x18
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a e7       	ldi	r20, 0x7A	; 122
    2320:	54 e4       	ldi	r21, 0x44	; 68
    2322:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8c 87       	std	Y+12, r24	; 0x0c
    232c:	9d 87       	std	Y+13, r25	; 0x0d
    232e:	ae 87       	std	Y+14, r26	; 0x0e
    2330:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2332:	6c 85       	ldd	r22, Y+12	; 0x0c
    2334:	7d 85       	ldd	r23, Y+13	; 0x0d
    2336:	8e 85       	ldd	r24, Y+14	; 0x0e
    2338:	9f 85       	ldd	r25, Y+15	; 0x0f
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a ef       	ldi	r20, 0xFA	; 250
    2340:	54 e4       	ldi	r21, 0x44	; 68
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	88 87       	std	Y+8, r24	; 0x08
    234c:	99 87       	std	Y+9, r25	; 0x09
    234e:	aa 87       	std	Y+10, r26	; 0x0a
    2350:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2352:	68 85       	ldd	r22, Y+8	; 0x08
    2354:	79 85       	ldd	r23, Y+9	; 0x09
    2356:	8a 85       	ldd	r24, Y+10	; 0x0a
    2358:	9b 85       	ldd	r25, Y+11	; 0x0b
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	2c f4       	brge	.+10     	; 0x2374 <HULTRASONIC_voidReadDistance+0x100>
		__ticks = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9f 83       	std	Y+7, r25	; 0x07
    2370:	8e 83       	std	Y+6, r24	; 0x06
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <HULTRASONIC_voidReadDistance+0x17e>
	else if (__tmp > 65535)
    2374:	68 85       	ldd	r22, Y+8	; 0x08
    2376:	79 85       	ldd	r23, Y+9	; 0x09
    2378:	8a 85       	ldd	r24, Y+10	; 0x0a
    237a:	9b 85       	ldd	r25, Y+11	; 0x0b
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	4c f5       	brge	.+82     	; 0x23de <HULTRASONIC_voidReadDistance+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238c:	6c 85       	ldd	r22, Y+12	; 0x0c
    238e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2390:	8e 85       	ldd	r24, Y+14	; 0x0e
    2392:	9f 85       	ldd	r25, Y+15	; 0x0f
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9f 83       	std	Y+7, r25	; 0x07
    23b2:	8e 83       	std	Y+6, r24	; 0x06
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <HULTRASONIC_voidReadDistance+0x160>
    23b6:	88 ec       	ldi	r24, 0xC8	; 200
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9d 83       	std	Y+5, r25	; 0x05
    23bc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23be:	8c 81       	ldd	r24, Y+4	; 0x04
    23c0:	9d 81       	ldd	r25, Y+5	; 0x05
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <HULTRASONIC_voidReadDistance+0x14e>
    23c6:	9d 83       	std	Y+5, r25	; 0x05
    23c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ca:	8e 81       	ldd	r24, Y+6	; 0x06
    23cc:	9f 81       	ldd	r25, Y+7	; 0x07
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	9f 83       	std	Y+7, r25	; 0x07
    23d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	9f 81       	ldd	r25, Y+7	; 0x07
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	69 f7       	brne	.-38     	; 0x23b6 <HULTRASONIC_voidReadDistance+0x142>
    23dc:	24 c0       	rjmp	.+72     	; 0x2426 <HULTRASONIC_voidReadDistance+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	68 85       	ldd	r22, Y+8	; 0x08
    23e0:	79 85       	ldd	r23, Y+9	; 0x09
    23e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9f 83       	std	Y+7, r25	; 0x07
    23f0:	8e 83       	std	Y+6, r24	; 0x06
    23f2:	8e 81       	ldd	r24, Y+6	; 0x06
    23f4:	9f 81       	ldd	r25, Y+7	; 0x07
    23f6:	9b 83       	std	Y+3, r25	; 0x03
    23f8:	8a 83       	std	Y+2, r24	; 0x02
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <HULTRASONIC_voidReadDistance+0x18a>
    2402:	9b 83       	std	Y+3, r25	; 0x03
    2404:	8a 83       	std	Y+2, r24	; 0x02
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <HULTRASONIC_voidReadDistance+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2408:	69 89       	ldd	r22, Y+17	; 0x11
    240a:	7a 89       	ldd	r23, Y+18	; 0x12
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	88 8b       	std	Y+16, r24	; 0x10
    241a:	88 89       	ldd	r24, Y+16	; 0x10
    241c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	8a 95       	dec	r24
    2422:	f1 f7       	brne	.-4      	; 0x2420 <HULTRASONIC_voidReadDistance+0x1ac>
    2424:	89 83       	std	Y+1, r24	; 0x01
	// Delay for 10 micro secs (ON period)
	_delay_us(10);
	// send Low
	MDIO_voidSetPinValue(TRIG_PORT,TRIG_PIN,LOW);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	65 e0       	ldi	r22, 0x05	; 5
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>

	// busy wait until counter =2
	while (Global_u8StateCounter != 2);
    2430:	80 91 7a 01 	lds	r24, 0x017A
    2434:	82 30       	cpi	r24, 0x02	; 2
    2436:	e1 f7       	brne	.-8      	; 0x2430 <HULTRASONIC_voidReadDistance+0x1bc>
		Then time to execute 1 instruction is 1 us.

		= 17150 x (TIMER value) x 10^-6 cm
		= (TIMER value)/58.30 cm
	*/
	u32 Local_u32Distance = ceil(Local_u16OnTicks / 58.3) - 1;
    2438:	8d 8d       	ldd	r24, Y+29	; 0x1d
    243a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    243c:	cc 01       	movw	r24, r24
    243e:	a0 e0       	ldi	r26, 0x00	; 0
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	23 e3       	ldi	r18, 0x33	; 51
    2454:	33 e3       	ldi	r19, 0x33	; 51
    2456:	49 e6       	ldi	r20, 0x69	; 105
    2458:	52 e4       	ldi	r21, 0x42	; 66
    245a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 08 17 	call	0x2e10	; 0x2e10 <ceil>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	89 8f       	std	Y+25, r24	; 0x19
    2490:	9a 8f       	std	Y+26, r25	; 0x1a
    2492:	ab 8f       	std	Y+27, r26	; 0x1b
    2494:	bc 8f       	std	Y+28, r27	; 0x1c
	*Local_pu32Distance = Local_u32Distance;
    2496:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2498:	f8 a1       	ldd	r31, Y+32	; 0x20
    249a:	89 8d       	ldd	r24, Y+25	; 0x19
    249c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    249e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    24a0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    24a2:	80 83       	st	Z, r24
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	a2 83       	std	Z+2, r26	; 0x02
    24a8:	b3 83       	std	Z+3, r27	; 0x03
}
    24aa:	a0 96       	adiw	r28, 0x20	; 32
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <ICU_HW>:

void ICU_HW (void)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <ICU_HW+0x6>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
	switch (Global_u8StateCounter)
    24c6:	80 91 7a 01 	lds	r24, 0x017A
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	3a 83       	std	Y+2, r19	; 0x02
    24d0:	29 83       	std	Y+1, r18	; 0x01
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <ICU_HW+0x2a>
    24da:	29 81       	ldd	r18, Y+1	; 0x01
    24dc:	3a 81       	ldd	r19, Y+2	; 0x02
    24de:	21 30       	cpi	r18, 0x01	; 1
    24e0:	31 05       	cpc	r19, r1
    24e2:	59 f0       	breq	.+22     	; 0x24fa <ICU_HW+0x3e>
    24e4:	13 c0       	rjmp	.+38     	; 0x250c <ICU_HW+0x50>
	{
	case 0:
		// read
		Global_u16Reading1 = ICU_u16GetICRRegister();
    24e6:	0e 94 48 09 	call	0x1290	; 0x1290 <ICU_u16GetICRRegister>
    24ea:	90 93 77 01 	sts	0x0177, r25
    24ee:	80 93 76 01 	sts	0x0176, r24
		// change trigger to be falling
		ICU_voidSetTriggerSignal(ICU_FALLING_EDGE);
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	0e 94 65 09 	call	0x12ca	; 0x12ca <ICU_voidSetTriggerSignal>
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <ICU_HW+0x50>
		break;
	case 1:
		// read
		Global_u16Reading2 = ICU_u16GetICRRegister();
    24fa:	0e 94 48 09 	call	0x1290	; 0x1290 <ICU_u16GetICRRegister>
    24fe:	90 93 79 01 	sts	0x0179, r25
    2502:	80 93 78 01 	sts	0x0178, r24
		// disable ICU Interrupt
		ICU_voidSetTriggerSignal(ICU_DISABLE);
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	0e 94 65 09 	call	0x12ca	; 0x12ca <ICU_voidSetTriggerSignal>
		break ;
	default : /* do nothing */
			break;
	}

	Global_u8StateCounter++;
    250c:	80 91 7a 01 	lds	r24, 0x017A
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	80 93 7a 01 	sts	0x017A, r24
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <HLED_voidLedInit>:
/*****************************************************************
 ***********FUNCTION IMPLEMENTATION*******************************
 ***************************************************************/

void HLED_voidLedInit(LED_t* LedOBJ)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <HLED_voidLedInit+0x6>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection (LedOBJ->LED_PORT , LedOBJ->LED_PIN , OUPUT);
    252e:	e9 81       	ldd	r30, Y+1	; 0x01
    2530:	fa 81       	ldd	r31, Y+2	; 0x02
    2532:	80 81       	ld	r24, Z
    2534:	e9 81       	ldd	r30, Y+1	; 0x01
    2536:	fa 81       	ldd	r31, Y+2	; 0x02
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	69 2f       	mov	r22, r25
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <MDIO_voidSetPinDirection>
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <HLED_voidTurnOnLed>:
void HLED_voidTurnOnLed(LED_t* LedOBJ)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	00 d0       	rcall	.+0      	; 0x2552 <HLED_voidTurnOnLed+0x6>
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue (LedOBJ->LED_PORT  , LedOBJ->LED_PIN , HIGH);
    255a:	e9 81       	ldd	r30, Y+1	; 0x01
    255c:	fa 81       	ldd	r31, Y+2	; 0x02
    255e:	80 81       	ld	r24, Z
    2560:	e9 81       	ldd	r30, Y+1	; 0x01
    2562:	fa 81       	ldd	r31, Y+2	; 0x02
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	69 2f       	mov	r22, r25
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <HLED_voidTurnOffLed>:
void HLED_voidTurnOffLed(LED_t * LedOBJ)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <HLED_voidTurnOffLed+0x6>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue (LedOBJ->LED_PORT  , LedOBJ->LED_PIN , LOW);
    2586:	e9 81       	ldd	r30, Y+1	; 0x01
    2588:	fa 81       	ldd	r31, Y+2	; 0x02
    258a:	80 81       	ld	r24, Z
    258c:	e9 81       	ldd	r30, Y+1	; 0x01
    258e:	fa 81       	ldd	r31, Y+2	; 0x02
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	69 2f       	mov	r22, r25
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <HLED_voidToggleLed>:
void HLED_voidToggleLed(LED_t* LedOBJ)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <HLED_voidToggleLed+0x6>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidTogglePin(LedOBJ->LED_PORT , LedOBJ->LED_PIN );
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	80 81       	ld	r24, Z
    25b8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ba:	fa 81       	ldd	r31, Y+2	; 0x02
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	69 2f       	mov	r22, r25
    25c0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <MDIO_voidTogglePin>
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <HLCD_voidInit>:

/*****************************************************************
 ***********FUNCTION IMPLEMENTATION*******************************
 ****************************************************************/
void HLCD_voidInit(void)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	2e 97       	sbiw	r28, 0x0e	; 14
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
	#if LCD_INIT_MODE == EIGHT_BIT_MODE
		/**intialize data port**/
		MDIO_voidSetPortSpecificDirection(LCD_DATA_PORT,LCD_ALL_OUTPUT);
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	6f ef       	ldi	r22, 0xFF	; 255
    25e6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <MDIO_voidSetPortSpecificDirection>
		/**initialize control pins as output**/
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_RS_PIN,OUPUT);
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_EN_PIN,OUPUT);
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	62 e0       	ldi	r22, 0x02	; 2
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 c1 0b 	call	0x1782	; 0x1782 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_RW_PIN,OUPUT);
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 c1 0b 	call	0x1782	; 0x1782 <MDIO_voidSetPinDirection>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e2       	ldi	r26, 0x20	; 32
    260e:	b2 e4       	ldi	r27, 0x42	; 66
    2610:	8b 87       	std	Y+11, r24	; 0x0b
    2612:	9c 87       	std	Y+12, r25	; 0x0c
    2614:	ad 87       	std	Y+13, r26	; 0x0d
    2616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	6b 85       	ldd	r22, Y+11	; 0x0b
    261a:	7c 85       	ldd	r23, Y+12	; 0x0c
    261c:	8d 85       	ldd	r24, Y+13	; 0x0d
    261e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4a ef       	ldi	r20, 0xFA	; 250
    2626:	54 e4       	ldi	r21, 0x44	; 68
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	8f 83       	std	Y+7, r24	; 0x07
    2632:	98 87       	std	Y+8, r25	; 0x08
    2634:	a9 87       	std	Y+9, r26	; 0x09
    2636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	2c f4       	brge	.+10     	; 0x265a <HLCD_voidInit+0x8c>
		__ticks = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	3f c0       	rjmp	.+126    	; 0x26d8 <HLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    265a:	6f 81       	ldd	r22, Y+7	; 0x07
    265c:	78 85       	ldd	r23, Y+8	; 0x08
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	9a 85       	ldd	r25, Y+10	; 0x0a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	3f ef       	ldi	r19, 0xFF	; 255
    2666:	4f e7       	ldi	r20, 0x7F	; 127
    2668:	57 e4       	ldi	r21, 0x47	; 71
    266a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266e:	18 16       	cp	r1, r24
    2670:	4c f5       	brge	.+82     	; 0x26c4 <HLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	6b 85       	ldd	r22, Y+11	; 0x0b
    2674:	7c 85       	ldd	r23, Y+12	; 0x0c
    2676:	8d 85       	ldd	r24, Y+13	; 0x0d
    2678:	9e 85       	ldd	r25, Y+14	; 0x0e
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e2       	ldi	r20, 0x20	; 32
    2680:	51 e4       	ldi	r21, 0x41	; 65
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	8d 83       	std	Y+5, r24	; 0x05
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <HLCD_voidInit+0xec>
    269c:	88 ec       	ldi	r24, 0xC8	; 200
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9c 83       	std	Y+4, r25	; 0x04
    26a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <HLCD_voidInit+0xda>
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	69 f7       	brne	.-38     	; 0x269c <HLCD_voidInit+0xce>
    26c2:	14 c0       	rjmp	.+40     	; 0x26ec <HLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <HLCD_voidInit+0x116>
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
		/**pooling for 40 seconds**/
		_delay_ms(40);

		/**Send Function Set Command**/
		HLCD_voidSendCommand(FUNCTION_SET_CMD);
    26ec:	88 e3       	ldi	r24, 0x38	; 56
    26ee:	0e 94 88 13 	call	0x2710	; 0x2710 <HLCD_voidSendCommand>
		/**Send Display On/Off Control Command**/
		HLCD_voidSendCommand(DISPLAY_ON_OFF_CMD);
    26f2:	8f e0       	ldi	r24, 0x0F	; 15
    26f4:	0e 94 88 13 	call	0x2710	; 0x2710 <HLCD_voidSendCommand>
		/**Send Display Clear Command**/
		HLCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	0e 94 88 13 	call	0x2710	; 0x2710 <HLCD_voidSendCommand>
			// task
		}
	#else
        #error("LCD_INIT_MODE Configuration Error")
	#endif
}
    26fe:	2e 96       	adiw	r28, 0x0e	; 14
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <HLCD_voidSendCommand>:
static void HLCD_voidSendCommand (u8 Copy_u8Command)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	2f 97       	sbiw	r28, 0x0f	; 15
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	8f 87       	std	Y+15, r24	; 0x0f
	// Clear The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOW);
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	60 e0       	ldi	r22, 0x00	; 0
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
	// Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
    // Set The Command On The Data/Command Port
	MDIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	6f 85       	ldd	r22, Y+15	; 0x0f
    273e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <MDIO_voidSetPortValue>

	/****SEND  ENABLE PULSE *****/
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	62 e0       	ldi	r22, 0x02	; 2
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
	/*HIGH for 2 ms*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,HIGH);
    274c:	82 e0       	ldi	r24, 0x02	; 2
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a0 e0       	ldi	r26, 0x00	; 0
    275c:	b0 e4       	ldi	r27, 0x40	; 64
    275e:	8b 87       	std	Y+11, r24	; 0x0b
    2760:	9c 87       	std	Y+12, r25	; 0x0c
    2762:	ad 87       	std	Y+13, r26	; 0x0d
    2764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a ef       	ldi	r20, 0xFA	; 250
    2774:	54 e4       	ldi	r21, 0x44	; 68
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8f 83       	std	Y+7, r24	; 0x07
    2780:	98 87       	std	Y+8, r25	; 0x08
    2782:	a9 87       	std	Y+9, r26	; 0x09
    2784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	2c f4       	brge	.+10     	; 0x27a8 <HLCD_voidSendCommand+0x98>
		__ticks = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	3f c0       	rjmp	.+126    	; 0x2826 <HLCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    27a8:	6f 81       	ldd	r22, Y+7	; 0x07
    27aa:	78 85       	ldd	r23, Y+8	; 0x08
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	3f ef       	ldi	r19, 0xFF	; 255
    27b4:	4f e7       	ldi	r20, 0x7F	; 127
    27b6:	57 e4       	ldi	r21, 0x47	; 71
    27b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27bc:	18 16       	cp	r1, r24
    27be:	4c f5       	brge	.+82     	; 0x2812 <HLCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e2       	ldi	r20, 0x20	; 32
    27ce:	51 e4       	ldi	r21, 0x41	; 65
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <HLCD_voidSendCommand+0xf8>
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9c 83       	std	Y+4, r25	; 0x04
    27f0:	8b 83       	std	Y+3, r24	; 0x03
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <HLCD_voidSendCommand+0xe6>
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f7       	brne	.-38     	; 0x27ea <HLCD_voidSendCommand+0xda>
    2810:	14 c0       	rjmp	.+40     	; 0x283a <HLCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	8d 83       	std	Y+5, r24	; 0x05
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <HLCD_voidSendCommand+0x122>
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    283a:	82 e0       	ldi	r24, 0x02	; 2
    283c:	62 e0       	ldi	r22, 0x02	; 2
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
}
    2844:	2f 96       	adiw	r28, 0x0f	; 15
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	2f 97       	sbiw	r28, 0x0f	; 15
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	8f 87       	std	Y+15, r24	; 0x0f
	// Set The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,HIGH);
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
	// Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
    // Set The Command On The Data/Command Port
	MDIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	6f 85       	ldd	r22, Y+15	; 0x0f
    2884:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <MDIO_voidSetPortValue>

	/****SEND  ENABLE PULSE *****/
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	62 e0       	ldi	r22, 0x02	; 2
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
	/*HIGH for 2 ms*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,HIGH);
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	62 e0       	ldi	r22, 0x02	; 2
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a0 e0       	ldi	r26, 0x00	; 0
    28a2:	b0 e4       	ldi	r27, 0x40	; 64
    28a4:	8b 87       	std	Y+11, r24	; 0x0b
    28a6:	9c 87       	std	Y+12, r25	; 0x0c
    28a8:	ad 87       	std	Y+13, r26	; 0x0d
    28aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a ef       	ldi	r20, 0xFA	; 250
    28ba:	54 e4       	ldi	r21, 0x44	; 68
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8f 83       	std	Y+7, r24	; 0x07
    28c6:	98 87       	std	Y+8, r25	; 0x08
    28c8:	a9 87       	std	Y+9, r26	; 0x09
    28ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <HLCD_voidSendData+0x98>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <HLCD_voidSendData+0x116>
	else if (__tmp > 65535)
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <HLCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	6b 85       	ldd	r22, Y+11	; 0x0b
    2908:	7c 85       	ldd	r23, Y+12	; 0x0c
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	0f c0       	rjmp	.+30     	; 0x294e <HLCD_voidSendData+0xf8>
    2930:	88 ec       	ldi	r24, 0xC8	; 200
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <HLCD_voidSendData+0xe6>
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	9e 81       	ldd	r25, Y+6	; 0x06
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <HLCD_voidSendData+0xda>
    2956:	14 c0       	rjmp	.+40     	; 0x2980 <HLCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <HLCD_voidSendData+0x122>
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Low*/
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,LOW);
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	62 e0       	ldi	r22, 0x02	; 2
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 b4 0c 	call	0x1968	; 0x1968 <MDIO_voidSetPinValue>

}
    298a:	2f 96       	adiw	r28, 0x0f	; 15
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	f8 94       	cli
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	0e 94 88 13 	call	0x2710	; 0x2710 <HLCD_voidSendCommand>
}
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <HLCD_voidGoToXY>:

/****************NEW FUNCTIONS***********************/

void HLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <HLCD_voidGoToXY+0x6>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	8a 83       	std	Y+2, r24	; 0x02
    29be:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8CharacterAddress = 0;
    29c0:	19 82       	std	Y+1, r1	; 0x01
    /*Calculate The Address Of The Character On LCD*/
    if(Copy_u8XPos == 0)
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	88 23       	and	r24, r24
    29c6:	19 f4       	brne	.+6      	; 0x29ce <HLCD_voidGoToXY+0x1e>
    {
        // @ x = 0 -> Address = Y-Position
        Local_u8CharacterAddress = Copy_u8YPos;
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <HLCD_voidGoToXY+0x2a>
    }
    else if (Copy_u8XPos == 1)
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	19 f4       	brne	.+6      	; 0x29da <HLCD_voidGoToXY+0x2a>
    {
        // @ x = 1 -> Address = Y-Position + 0x40
        Local_u8CharacterAddress = Copy_u8YPos + 0x40;
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	80 5c       	subi	r24, 0xC0	; 192
    29d8:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        // Raise an error
    }
    /*Set The 7th bit in the address variable*/
    SET_BIT(Local_u8CharacterAddress, 7);
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	80 68       	ori	r24, 0x80	; 128
    29de:	89 83       	std	Y+1, r24	; 0x01
    /*Send the address variable as a command*/
    HLCD_voidSendCommand(Local_u8CharacterAddress);
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	0e 94 88 13 	call	0x2710	; 0x2710 <HLCD_voidSendCommand>
}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <HLCD_voidSendString>:
void HLCD_voidSendString (u8 *Copy_pu8StringArray)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <HLCD_voidSendString+0x6>
    29f8:	0f 92       	push	r0
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	9b 83       	std	Y+3, r25	; 0x03
    2a00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_s8LoopIterator = 0 ;
    2a02:	19 82       	std	Y+1, r1	; 0x01
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <HLCD_voidSendString+0x32>
	while (Copy_pu8StringArray[Local_s8LoopIterator]!= '\0')
	{
		HLCD_voidSendData(Copy_pu8StringArray[Local_s8LoopIterator++]);
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	fc 01       	movw	r30, r24
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
    2a16:	90 81       	ld	r25, Z
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	8f 5f       	subi	r24, 0xFF	; 255
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	89 2f       	mov	r24, r25
    2a20:	0e 94 2b 14 	call	0x2856	; 0x2856 <HLCD_voidSendData>
    HLCD_voidSendCommand(Local_u8CharacterAddress);
}
void HLCD_voidSendString (u8 *Copy_pu8StringArray)
{
	u8 Local_s8LoopIterator = 0 ;
	while (Copy_pu8StringArray[Local_s8LoopIterator]!= '\0')
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2e:	fc 01       	movw	r30, r24
    2a30:	e2 0f       	add	r30, r18
    2a32:	f3 1f       	adc	r31, r19
    2a34:	80 81       	ld	r24, Z
    2a36:	88 23       	and	r24, r24
    2a38:	31 f7       	brne	.-52     	; 0x2a06 <HLCD_voidSendString+0x14>
	{
		HLCD_voidSendData(Copy_pu8StringArray[Local_s8LoopIterator++]);
	}
}
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <HLCD_voidSendNumber>:
void HLCD_voidSendNumber (u32 Copy_u32Number)
{
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	2f 97       	sbiw	r28, 0x0f	; 15
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	6c 87       	std	Y+12, r22	; 0x0c
    2a60:	7d 87       	std	Y+13, r23	; 0x0d
    2a62:	8e 87       	std	Y+14, r24	; 0x0e
    2a64:	9f 87       	std	Y+15, r25	; 0x0f
	// assume number of 10 digits
	u8 Local_u8ArrayNumber[10];
	s8 Local_s8LoopIterator = 0 ;
    2a66:	19 82       	std	Y+1, r1	; 0x01
    2a68:	2f c0       	rjmp	.+94     	; 0x2ac8 <HLCD_voidSendNumber+0x82>
	while (Copy_u32Number != 0 )
	{
		Local_u8ArrayNumber[Local_s8LoopIterator++] = Copy_u32Number%10;
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	08 2f       	mov	r16, r24
    2a6e:	11 27       	eor	r17, r17
    2a70:	07 fd       	sbrc	r16, 7
    2a72:	10 95       	com	r17
    2a74:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a76:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a78:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a7a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a7c:	2a e0       	ldi	r18, 0x0A	; 10
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__udivmodsi4>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	28 2f       	mov	r18, r24
    2a92:	ce 01       	movw	r24, r28
    2a94:	02 96       	adiw	r24, 0x02	; 2
    2a96:	fc 01       	movw	r30, r24
    2a98:	e0 0f       	add	r30, r16
    2a9a:	f1 1f       	adc	r31, r17
    2a9c:	20 83       	st	Z, r18
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	8f 5f       	subi	r24, 0xFF	; 255
    2aa2:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Number/=10;
    2aa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aa6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2aa8:	ae 85       	ldd	r26, Y+14	; 0x0e
    2aaa:	bf 85       	ldd	r27, Y+15	; 0x0f
    2aac:	2a e0       	ldi	r18, 0x0A	; 10
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	cd 01       	movw	r24, r26
    2ab8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__udivmodsi4>
    2abc:	da 01       	movw	r26, r20
    2abe:	c9 01       	movw	r24, r18
    2ac0:	8c 87       	std	Y+12, r24	; 0x0c
    2ac2:	9d 87       	std	Y+13, r25	; 0x0d
    2ac4:	ae 87       	std	Y+14, r26	; 0x0e
    2ac6:	bf 87       	std	Y+15, r27	; 0x0f
void HLCD_voidSendNumber (u32 Copy_u32Number)
{
	// assume number of 10 digits
	u8 Local_u8ArrayNumber[10];
	s8 Local_s8LoopIterator = 0 ;
	while (Copy_u32Number != 0 )
    2ac8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aca:	9d 85       	ldd	r25, Y+13	; 0x0d
    2acc:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ace:	bf 85       	ldd	r27, Y+15	; 0x0f
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	a1 05       	cpc	r26, r1
    2ad4:	b1 05       	cpc	r27, r1
    2ad6:	49 f6       	brne	.-110    	; 0x2a6a <HLCD_voidSendNumber+0x24>
	{
		Local_u8ArrayNumber[Local_s8LoopIterator++] = Copy_u32Number%10;
		Copy_u32Number/=10;
	}
	Local_s8LoopIterator-- ;
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	81 50       	subi	r24, 0x01	; 1
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	13 c0       	rjmp	.+38     	; 0x2b06 <HLCD_voidSendNumber+0xc0>
	while (Local_s8LoopIterator >= 0)
	{
		HLCD_voidSendData (Local_u8ArrayNumber[Local_s8LoopIterator--] + '0');
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	33 27       	eor	r19, r19
    2ae6:	27 fd       	sbrc	r18, 7
    2ae8:	30 95       	com	r19
    2aea:	ce 01       	movw	r24, r28
    2aec:	02 96       	adiw	r24, 0x02	; 2
    2aee:	fc 01       	movw	r30, r24
    2af0:	e2 0f       	add	r30, r18
    2af2:	f3 1f       	adc	r31, r19
    2af4:	80 81       	ld	r24, Z
    2af6:	98 2f       	mov	r25, r24
    2af8:	90 5d       	subi	r25, 0xD0	; 208
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	81 50       	subi	r24, 0x01	; 1
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	89 2f       	mov	r24, r25
    2b02:	0e 94 2b 14 	call	0x2856	; 0x2856 <HLCD_voidSendData>
	{
		Local_u8ArrayNumber[Local_s8LoopIterator++] = Copy_u32Number%10;
		Copy_u32Number/=10;
	}
	Local_s8LoopIterator-- ;
	while (Local_s8LoopIterator >= 0)
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	88 23       	and	r24, r24
    2b0a:	54 f7       	brge	.-44     	; 0x2ae0 <HLCD_voidSendNumber+0x9a>
	{
		HLCD_voidSendData (Local_u8ArrayNumber[Local_s8LoopIterator--] + '0');
	}
}
    2b0c:	2f 96       	adiw	r28, 0x0f	; 15
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	08 95       	ret

00002b22 <HLCD_voidSendCustomCharacter>:

void HLCD_voidSendCustomCharacter (u8 *Copy_pu8CharectarArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	27 97       	sbiw	r28, 0x07	; 7
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	6d 83       	std	Y+5, r22	; 0x05
    2b3c:	4e 83       	std	Y+6, r20	; 0x06
    2b3e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_s8LoopIterator ;
	u8 Local_u8CGRAMAddress = 0 ;
    2b40:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT (Local_u8CGRAMAddress , 6);
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	80 64       	ori	r24, 0x40	; 64
    2b5a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand (Local_u8CGRAMAddress);
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	0e 94 88 13 	call	0x2710	; 0x2710 <HLCD_voidSendCommand>
	for (Local_s8LoopIterator=0 ; Local_s8LoopIterator < 8 ; Local_s8LoopIterator++)
    2b62:	1a 82       	std	Y+2, r1	; 0x02
    2b64:	0e c0       	rjmp	.+28     	; 0x2b82 <HLCD_voidSendCustomCharacter+0x60>
	{
		HLCD_voidSendData (Copy_pu8CharectarArray[Local_s8LoopIterator]);
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	fc 01       	movw	r30, r24
    2b72:	e2 0f       	add	r30, r18
    2b74:	f3 1f       	adc	r31, r19
    2b76:	80 81       	ld	r24, Z
    2b78:	0e 94 2b 14 	call	0x2856	; 0x2856 <HLCD_voidSendData>
	u8 Local_u8CGRAMAddress = 0 ;

	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
	SET_BIT (Local_u8CGRAMAddress , 6);
	HLCD_voidSendCommand (Local_u8CGRAMAddress);
	for (Local_s8LoopIterator=0 ; Local_s8LoopIterator < 8 ; Local_s8LoopIterator++)
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	8f 5f       	subi	r24, 0xFF	; 255
    2b80:	8a 83       	std	Y+2, r24	; 0x02
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	88 30       	cpi	r24, 0x08	; 8
    2b86:	78 f3       	brcs	.-34     	; 0x2b66 <HLCD_voidSendCustomCharacter+0x44>
	{
		HLCD_voidSendData (Copy_pu8CharectarArray[Local_s8LoopIterator]);
	}
	HLCD_voidGoToXY (Copy_u8XPosition,Copy_u8YPosition);
    2b88:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <HLCD_voidGoToXY>
	HLCD_voidSendData (Copy_u8PatternNumber);
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	0e 94 2b 14 	call	0x2856	; 0x2856 <HLCD_voidSendData>
}
    2b96:	27 96       	adiw	r28, 0x07	; 7
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <BUTTON_voidInit>:
#include "BUTTON_private.h"
#include "BUTTON_config.h"


void BUTTON_voidInit(BUTTON_t* Copy_pBUTTON_t_Obj)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <BUTTON_voidInit+0x6>
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection(Copy_pBUTTON_t_Obj->BUTTON_u8PORT, Copy_pBUTTON_t_Obj->BUTTON_u8PIN, INPUT);
    2bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bba:	80 81       	ld	r24, Z
    2bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	69 2f       	mov	r22, r25
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	0e 94 c1 0b 	call	0x1782	; 0x1782 <MDIO_voidSetPinDirection>
}
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <BUTTON_u8Read>:

u8 BUTTON_u8Read(BUTTON_t* Copy_pBUTTON_t_Obj)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <BUTTON_u8Read+0x6>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	9a 83       	std	Y+2, r25	; 0x02
    2be0:	89 83       	std	Y+1, r24	; 0x01
	return MDIO_voidReadPinValue(Copy_pBUTTON_t_Obj->BUTTON_u8PORT, Copy_pBUTTON_t_Obj->BUTTON_u8PIN);
    2be2:	e9 81       	ldd	r30, Y+1	; 0x01
    2be4:	fa 81       	ldd	r31, Y+2	; 0x02
    2be6:	80 81       	ld	r24, Z
    2be8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bea:	fa 81       	ldd	r31, Y+2	; 0x02
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	69 2f       	mov	r22, r25
    2bf0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <MDIO_voidReadPinValue>
}
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <main>:
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/ULTRASONIC/ULTRASONIC_int.h"


void main(void)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	62 97       	sbiw	r28, 0x12	; 18
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
	u32 Distance ;
	// enable LCD
	HLCD_voidInit();
    2c12:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_voidInit>
	// enable ULTRASONIC
	// ICU_voidSetTRiggerSignal();
	HULTRASONIC_voidInit();
    2c16:	0e 94 1e 11 	call	0x223c	; 0x223c <HULTRASONIC_voidInit>
	// enable GIE
	M_GIE_void_enable();
    2c1a:	0e 94 28 0a 	call	0x1450	; 0x1450 <M_GIE_void_enable>
//		_delay_ms(1000);
//		HLCD_voidSendNumber(50);
//		_delay_ms(1000);
//		HLCD_voidClearDisplay();
//		_delay_ms(1000);
		HULTRASONIC_voidReadDistance(&Distance);
    2c1e:	ce 01       	movw	r24, r28
    2c20:	0f 96       	adiw	r24, 0x0f	; 15
    2c22:	0e 94 3a 11 	call	0x2274	; 0x2274 <HULTRASONIC_voidReadDistance>
		HLCD_voidClearDisplay();
    2c26:	0e 94 ce 14 	call	0x299c	; 0x299c <HLCD_voidClearDisplay>
		HLCD_voidSendNumber(Distance);
    2c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2c:	98 89       	ldd	r25, Y+16	; 0x10
    2c2e:	a9 89       	ldd	r26, Y+17	; 0x11
    2c30:	ba 89       	ldd	r27, Y+18	; 0x12
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 23 15 	call	0x2a46	; 0x2a46 <HLCD_voidSendNumber>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a8 ec       	ldi	r26, 0xC8	; 200
    2c40:	b3 e4       	ldi	r27, 0x43	; 67
    2c42:	8b 87       	std	Y+11, r24	; 0x0b
    2c44:	9c 87       	std	Y+12, r25	; 0x0c
    2c46:	ad 87       	std	Y+13, r26	; 0x0d
    2c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a ef       	ldi	r20, 0xFA	; 250
    2c58:	54 e4       	ldi	r21, 0x44	; 68
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8f 83       	std	Y+7, r24	; 0x07
    2c64:	98 87       	std	Y+8, r25	; 0x08
    2c66:	a9 87       	std	Y+9, r26	; 0x09
    2c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6c:	78 85       	ldd	r23, Y+8	; 0x08
    2c6e:	89 85       	ldd	r24, Y+9	; 0x09
    2c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <main+0x8e>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <main+0x10c>
	else if (__tmp > 65535)
    2c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8e:	78 85       	ldd	r23, Y+8	; 0x08
    2c90:	89 85       	ldd	r24, Y+9	; 0x09
    2c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	4c f5       	brge	.+82     	; 0x2cf6 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e2       	ldi	r20, 0x20	; 32
    2cb2:	51 e4       	ldi	r21, 0x41	; 65
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
    2ccc:	0f c0       	rjmp	.+30     	; 0x2cec <main+0xee>
    2cce:	88 ec       	ldi	r24, 0xC8	; 200
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	8b 83       	std	Y+3, r24	; 0x03
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <main+0xdc>
    2cde:	9c 83       	std	Y+4, r25	; 0x04
    2ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	9e 83       	std	Y+6, r25	; 0x06
    2cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	69 f7       	brne	.-38     	; 0x2cce <main+0xd0>
    2cf4:	94 cf       	rjmp	.-216    	; 0x2c1e <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf8:	78 85       	ldd	r23, Y+8	; 0x08
    2cfa:	89 85       	ldd	r24, Y+9	; 0x09
    2cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <main+0x118>
    2d1a:	9a 83       	std	Y+2, r25	; 0x02
    2d1c:	89 83       	std	Y+1, r24	; 0x01
    2d1e:	7f cf       	rjmp	.-258    	; 0x2c1e <main+0x20>

00002d20 <__mulsi3>:
    2d20:	62 9f       	mul	r22, r18
    2d22:	d0 01       	movw	r26, r0
    2d24:	73 9f       	mul	r23, r19
    2d26:	f0 01       	movw	r30, r0
    2d28:	82 9f       	mul	r24, r18
    2d2a:	e0 0d       	add	r30, r0
    2d2c:	f1 1d       	adc	r31, r1
    2d2e:	64 9f       	mul	r22, r20
    2d30:	e0 0d       	add	r30, r0
    2d32:	f1 1d       	adc	r31, r1
    2d34:	92 9f       	mul	r25, r18
    2d36:	f0 0d       	add	r31, r0
    2d38:	83 9f       	mul	r24, r19
    2d3a:	f0 0d       	add	r31, r0
    2d3c:	74 9f       	mul	r23, r20
    2d3e:	f0 0d       	add	r31, r0
    2d40:	65 9f       	mul	r22, r21
    2d42:	f0 0d       	add	r31, r0
    2d44:	99 27       	eor	r25, r25
    2d46:	72 9f       	mul	r23, r18
    2d48:	b0 0d       	add	r27, r0
    2d4a:	e1 1d       	adc	r30, r1
    2d4c:	f9 1f       	adc	r31, r25
    2d4e:	63 9f       	mul	r22, r19
    2d50:	b0 0d       	add	r27, r0
    2d52:	e1 1d       	adc	r30, r1
    2d54:	f9 1f       	adc	r31, r25
    2d56:	bd 01       	movw	r22, r26
    2d58:	cf 01       	movw	r24, r30
    2d5a:	11 24       	eor	r1, r1
    2d5c:	08 95       	ret

00002d5e <__udivmodsi4>:
    2d5e:	a1 e2       	ldi	r26, 0x21	; 33
    2d60:	1a 2e       	mov	r1, r26
    2d62:	aa 1b       	sub	r26, r26
    2d64:	bb 1b       	sub	r27, r27
    2d66:	fd 01       	movw	r30, r26
    2d68:	0d c0       	rjmp	.+26     	; 0x2d84 <__udivmodsi4_ep>

00002d6a <__udivmodsi4_loop>:
    2d6a:	aa 1f       	adc	r26, r26
    2d6c:	bb 1f       	adc	r27, r27
    2d6e:	ee 1f       	adc	r30, r30
    2d70:	ff 1f       	adc	r31, r31
    2d72:	a2 17       	cp	r26, r18
    2d74:	b3 07       	cpc	r27, r19
    2d76:	e4 07       	cpc	r30, r20
    2d78:	f5 07       	cpc	r31, r21
    2d7a:	20 f0       	brcs	.+8      	; 0x2d84 <__udivmodsi4_ep>
    2d7c:	a2 1b       	sub	r26, r18
    2d7e:	b3 0b       	sbc	r27, r19
    2d80:	e4 0b       	sbc	r30, r20
    2d82:	f5 0b       	sbc	r31, r21

00002d84 <__udivmodsi4_ep>:
    2d84:	66 1f       	adc	r22, r22
    2d86:	77 1f       	adc	r23, r23
    2d88:	88 1f       	adc	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	1a 94       	dec	r1
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <__udivmodsi4_loop>
    2d90:	60 95       	com	r22
    2d92:	70 95       	com	r23
    2d94:	80 95       	com	r24
    2d96:	90 95       	com	r25
    2d98:	9b 01       	movw	r18, r22
    2d9a:	ac 01       	movw	r20, r24
    2d9c:	bd 01       	movw	r22, r26
    2d9e:	cf 01       	movw	r24, r30
    2da0:	08 95       	ret

00002da2 <__prologue_saves__>:
    2da2:	2f 92       	push	r2
    2da4:	3f 92       	push	r3
    2da6:	4f 92       	push	r4
    2da8:	5f 92       	push	r5
    2daa:	6f 92       	push	r6
    2dac:	7f 92       	push	r7
    2dae:	8f 92       	push	r8
    2db0:	9f 92       	push	r9
    2db2:	af 92       	push	r10
    2db4:	bf 92       	push	r11
    2db6:	cf 92       	push	r12
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	ca 1b       	sub	r28, r26
    2dcc:	db 0b       	sbc	r29, r27
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	09 94       	ijmp

00002dda <__epilogue_restores__>:
    2dda:	2a 88       	ldd	r2, Y+18	; 0x12
    2ddc:	39 88       	ldd	r3, Y+17	; 0x11
    2dde:	48 88       	ldd	r4, Y+16	; 0x10
    2de0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2de8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dec:	b9 84       	ldd	r11, Y+9	; 0x09
    2dee:	c8 84       	ldd	r12, Y+8	; 0x08
    2df0:	df 80       	ldd	r13, Y+7	; 0x07
    2df2:	ee 80       	ldd	r14, Y+6	; 0x06
    2df4:	fd 80       	ldd	r15, Y+5	; 0x05
    2df6:	0c 81       	ldd	r16, Y+4	; 0x04
    2df8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dfa:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dfe:	ce 0f       	add	r28, r30
    2e00:	d1 1d       	adc	r29, r1
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	ed 01       	movw	r28, r26
    2e0e:	08 95       	ret

00002e10 <ceil>:
    2e10:	3b d0       	rcall	.+118    	; 0x2e88 <__fp_trunc>
    2e12:	80 f0       	brcs	.+32     	; 0x2e34 <ceil+0x24>
    2e14:	9f 37       	cpi	r25, 0x7F	; 127
    2e16:	40 f4       	brcc	.+16     	; 0x2e28 <ceil+0x18>
    2e18:	91 11       	cpse	r25, r1
    2e1a:	0e f4       	brtc	.+2      	; 0x2e1e <ceil+0xe>
    2e1c:	4d c0       	rjmp	.+154    	; 0x2eb8 <__fp_szero>
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	70 e0       	ldi	r23, 0x00	; 0
    2e22:	80 e8       	ldi	r24, 0x80	; 128
    2e24:	9f e3       	ldi	r25, 0x3F	; 63
    2e26:	08 95       	ret
    2e28:	26 f0       	brts	.+8      	; 0x2e32 <ceil+0x22>
    2e2a:	1b 16       	cp	r1, r27
    2e2c:	61 1d       	adc	r22, r1
    2e2e:	71 1d       	adc	r23, r1
    2e30:	81 1d       	adc	r24, r1
    2e32:	01 c0       	rjmp	.+2      	; 0x2e36 <__fp_mintl>
    2e34:	1b c0       	rjmp	.+54     	; 0x2e6c <__fp_mpack>

00002e36 <__fp_mintl>:
    2e36:	88 23       	and	r24, r24
    2e38:	71 f4       	brne	.+28     	; 0x2e56 <__fp_mintl+0x20>
    2e3a:	77 23       	and	r23, r23
    2e3c:	21 f0       	breq	.+8      	; 0x2e46 <__fp_mintl+0x10>
    2e3e:	98 50       	subi	r25, 0x08	; 8
    2e40:	87 2b       	or	r24, r23
    2e42:	76 2f       	mov	r23, r22
    2e44:	07 c0       	rjmp	.+14     	; 0x2e54 <__fp_mintl+0x1e>
    2e46:	66 23       	and	r22, r22
    2e48:	11 f4       	brne	.+4      	; 0x2e4e <__fp_mintl+0x18>
    2e4a:	99 27       	eor	r25, r25
    2e4c:	0d c0       	rjmp	.+26     	; 0x2e68 <__fp_mintl+0x32>
    2e4e:	90 51       	subi	r25, 0x10	; 16
    2e50:	86 2b       	or	r24, r22
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	2a f0       	brmi	.+10     	; 0x2e62 <__fp_mintl+0x2c>
    2e58:	9a 95       	dec	r25
    2e5a:	66 0f       	add	r22, r22
    2e5c:	77 1f       	adc	r23, r23
    2e5e:	88 1f       	adc	r24, r24
    2e60:	da f7       	brpl	.-10     	; 0x2e58 <__fp_mintl+0x22>
    2e62:	88 0f       	add	r24, r24
    2e64:	96 95       	lsr	r25
    2e66:	87 95       	ror	r24
    2e68:	97 f9       	bld	r25, 7
    2e6a:	08 95       	ret

00002e6c <__fp_mpack>:
    2e6c:	9f 3f       	cpi	r25, 0xFF	; 255
    2e6e:	31 f0       	breq	.+12     	; 0x2e7c <__fp_mpack_finite+0xc>

00002e70 <__fp_mpack_finite>:
    2e70:	91 50       	subi	r25, 0x01	; 1
    2e72:	20 f4       	brcc	.+8      	; 0x2e7c <__fp_mpack_finite+0xc>
    2e74:	87 95       	ror	r24
    2e76:	77 95       	ror	r23
    2e78:	67 95       	ror	r22
    2e7a:	b7 95       	ror	r27
    2e7c:	88 0f       	add	r24, r24
    2e7e:	91 1d       	adc	r25, r1
    2e80:	96 95       	lsr	r25
    2e82:	87 95       	ror	r24
    2e84:	97 f9       	bld	r25, 7
    2e86:	08 95       	ret

00002e88 <__fp_trunc>:
    2e88:	25 d0       	rcall	.+74     	; 0x2ed4 <__fp_splitA>
    2e8a:	a0 f0       	brcs	.+40     	; 0x2eb4 <__fp_trunc+0x2c>
    2e8c:	be e7       	ldi	r27, 0x7E	; 126
    2e8e:	b9 17       	cp	r27, r25
    2e90:	88 f4       	brcc	.+34     	; 0x2eb4 <__fp_trunc+0x2c>
    2e92:	bb 27       	eor	r27, r27
    2e94:	9f 38       	cpi	r25, 0x8F	; 143
    2e96:	60 f4       	brcc	.+24     	; 0x2eb0 <__fp_trunc+0x28>
    2e98:	16 16       	cp	r1, r22
    2e9a:	b1 1d       	adc	r27, r1
    2e9c:	67 2f       	mov	r22, r23
    2e9e:	78 2f       	mov	r23, r24
    2ea0:	88 27       	eor	r24, r24
    2ea2:	98 5f       	subi	r25, 0xF8	; 248
    2ea4:	f7 cf       	rjmp	.-18     	; 0x2e94 <__fp_trunc+0xc>
    2ea6:	86 95       	lsr	r24
    2ea8:	77 95       	ror	r23
    2eaa:	67 95       	ror	r22
    2eac:	b1 1d       	adc	r27, r1
    2eae:	93 95       	inc	r25
    2eb0:	96 39       	cpi	r25, 0x96	; 150
    2eb2:	c8 f3       	brcs	.-14     	; 0x2ea6 <__fp_trunc+0x1e>
    2eb4:	08 95       	ret

00002eb6 <__fp_zero>:
    2eb6:	e8 94       	clt

00002eb8 <__fp_szero>:
    2eb8:	bb 27       	eor	r27, r27
    2eba:	66 27       	eor	r22, r22
    2ebc:	77 27       	eor	r23, r23
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	97 f9       	bld	r25, 7
    2ec2:	08 95       	ret

00002ec4 <__fp_split3>:
    2ec4:	57 fd       	sbrc	r21, 7
    2ec6:	90 58       	subi	r25, 0x80	; 128
    2ec8:	44 0f       	add	r20, r20
    2eca:	55 1f       	adc	r21, r21
    2ecc:	59 f0       	breq	.+22     	; 0x2ee4 <__fp_splitA+0x10>
    2ece:	5f 3f       	cpi	r21, 0xFF	; 255
    2ed0:	71 f0       	breq	.+28     	; 0x2eee <__fp_splitA+0x1a>
    2ed2:	47 95       	ror	r20

00002ed4 <__fp_splitA>:
    2ed4:	88 0f       	add	r24, r24
    2ed6:	97 fb       	bst	r25, 7
    2ed8:	99 1f       	adc	r25, r25
    2eda:	61 f0       	breq	.+24     	; 0x2ef4 <__fp_splitA+0x20>
    2edc:	9f 3f       	cpi	r25, 0xFF	; 255
    2ede:	79 f0       	breq	.+30     	; 0x2efe <__fp_splitA+0x2a>
    2ee0:	87 95       	ror	r24
    2ee2:	08 95       	ret
    2ee4:	12 16       	cp	r1, r18
    2ee6:	13 06       	cpc	r1, r19
    2ee8:	14 06       	cpc	r1, r20
    2eea:	55 1f       	adc	r21, r21
    2eec:	f2 cf       	rjmp	.-28     	; 0x2ed2 <__fp_split3+0xe>
    2eee:	46 95       	lsr	r20
    2ef0:	f1 df       	rcall	.-30     	; 0x2ed4 <__fp_splitA>
    2ef2:	08 c0       	rjmp	.+16     	; 0x2f04 <__fp_splitA+0x30>
    2ef4:	16 16       	cp	r1, r22
    2ef6:	17 06       	cpc	r1, r23
    2ef8:	18 06       	cpc	r1, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	f1 cf       	rjmp	.-30     	; 0x2ee0 <__fp_splitA+0xc>
    2efe:	86 95       	lsr	r24
    2f00:	71 05       	cpc	r23, r1
    2f02:	61 05       	cpc	r22, r1
    2f04:	08 94       	sec
    2f06:	08 95       	ret

00002f08 <_exit>:
    2f08:	f8 94       	cli

00002f0a <__stop_program>:
    2f0a:	ff cf       	rjmp	.-2      	; 0x2f0a <__stop_program>
